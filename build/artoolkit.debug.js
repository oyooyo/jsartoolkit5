// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};




// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
var
WebAssembly = {
  Memory: function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 272 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // XXX hack to get an atob implementation

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


    var atob = decodeBase64;
    // This will be replaced by the actual wasm2js code.
    var exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var exit = env.exit;
 var _embind_register_function = env._embind_register_function;
 var _embind_register_constant = env._embind_register_constant;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var __cxa_throw = env.__cxa_throw;
 var __syscall5 = env.__syscall5;
 var __wasi_fd_close = env.fd_close;
 var __syscall221 = env.__syscall221;
 var __syscall54 = env.__syscall54;
 var __wasi_fd_write = env.fd_write;
 var __lock = env.__lock;
 var __unlock = env.__unlock;
 var __wasi_fd_read = env.fd_read;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var abort = env.abort;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var emscripten_asm_const_iii = env.emscripten_asm_const_iii;
 var global$0 = 5276928;
 var global$1 = 34040;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 672 | 0;
 global$0 = $2;
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 656 | 0, 20312);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 312 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 316 >> 2] = $4;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 312 | 0), HEAP8[wasm2js_i32$0 + 671 | 0] = wasm2js_i32$1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 2) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $4 = HEAP8[$1 | 0];
  $5 = $4 + -76 | 0;
  if ($5 >>> 0 > 40) {
   if ($4 + -49 >>> 0 >= 9) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
   break label$1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   label$20 : {
                    label$21 : {
                     label$22 : {
                      label$23 : {
                       label$24 : {
                        label$25 : {
                         label$26 : {
                          label$27 : {
                           label$28 : {
                            label$29 : {
                             label$30 : {
                              label$31 : {
                               label$32 : {
                                label$33 : {
                                 switch ($5 - 1 | 0) {
                                 default:
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0);
                                  break label$1;
                                 case 7:
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
                                  break label$1;
                                 case 25:
                                  label$51 : {
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                                   if (($1 | 0) != 112) {
                                    if (($1 & 255) != 76) {
                                     break label$51;
                                    }
                                    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 2) + -48 >>> 0 > 9) {
                                     break label$51;
                                    }
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0);
                                   break label$1;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($0);
                                  break label$1;
                                 case 20:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 <= 3) {
                                   break label$32;
                                  }
                                  label$53 : {
                                   label$54 : {
                                    if (($4 | 0) != 78) {
                                     if (($4 | 0) == 83) {
                                      break label$54;
                                     }
                                     if (($4 | 0) != 110) {
                                      if (($4 | 0) == 116) {
                                       break label$53;
                                      }
                                      if (($4 | 0) != 122) {
                                       break label$1;
                                      }
                                      HEAP32[$0 >> 2] = $1 + 2;
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                      HEAP32[$2 + 600 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20325, $2 + 600 | 0);
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 632 | 0, 20318);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 16 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 20 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 624 | 0, 20320);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 28 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 24 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 616 | 0, 20323);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 32 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 36 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 32 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20325, $2 + 600 | 0);
                                  break label$1;
                                 case 22:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 <= 3) {
                                   break label$31;
                                  }
                                  if (($4 | 0) != 118) {
                                   if (($4 | 0) != 99) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 612 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 20335, $2 + 600 | 0, $2 + 612 | 0);
                                   break label$1;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($0);
                                  break label$1;
                                 case 23:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 <= 10) {
                                   break label$30;
                                  }
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 > 4) {
                                   if (($4 | 0) != 86) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 560 | 0, 20372);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 72 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 76 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 72 | 0);
                                   break label$1;
                                  }
                                  label$59 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    HEAP8[$2 + 612 | 0] = 1;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $2 + 600 | 0, $2 + 671 | 0, $2 + 612 | 0);
                                    break label$1;
                                   case 1:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 612 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 20350, $2 + 600 | 0, $2 + 612 | 0);
                                    break label$1;
                                   case 0:
                                   case 2:
                                    break label$1;
                                   case 3:
                                    break label$59;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 576 | 0, 20363);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 56 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 60 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 56 | 0);
                                  break label$1;
                                 case 24:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -111 | 0;
                                  if ($5 >>> 0 > 2) {
                                   if (($4 | 0) != 79) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 544 | 0, 20377);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 88 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 92 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 88 | 0);
                                   break label$1;
                                  }
                                  label$63 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 552 | 0, 20375);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 80 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 84 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 80 | 0);
                                    break label$1;
                                   case 0:
                                    break label$1;
                                   case 1:
                                    break label$63;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 536 | 0, 20380);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 96 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 100 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 96 | 0);
                                  break label$1;
                                 case 26:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  if (($4 | 0) != 116) {
                                   if (($4 | 0) != 101) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 528 | 0, 20383);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 104 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 108 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 104 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 520 | 0, 20386);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 112 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 116 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 112 | 0);
                                  break label$1;
                                 case 28:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  if (($4 | 0) != 108) {
                                   if (($4 | 0) != 120) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                   HEAP32[$2 + 612 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $1 = $2 + 600 | 0;
                                   $3 = $2 + 612 | 0;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$3 >> 2]);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $0 + 8 | 0;
                                  $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1);
                                  while (1) {
                                   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                                    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $5;
                                    if (!$5) {
                                     break label$1;
                                    }
                                    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                                    continue;
                                   }
                                   break;
                                  }
                                  HEAP32[$2 + 612 >> 2] = 0;
                                  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 600 | 0);
                                  break label$1;
                                 case 31:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -115 | 0;
                                  if ($5 >>> 0 <= 1) {
                                   break label$29;
                                  }
                                  if (($4 | 0) != 83) {
                                   if (($4 | 0) != 101) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 512 | 0, 20388);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 120 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 124 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 120 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 496 | 0, 20394);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 136 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 140 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 136 | 0);
                                  break label$1;
                                 case 32:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -105 | 0;
                                  if ($5 >>> 0 <= 4) {
                                   break label$28;
                                  }
                                  $4 = $4 + -73 | 0;
                                  if ($4 >>> 0 > 3) {
                                   break label$1;
                                  }
                                  label$70 : {
                                   switch ($4 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 472 | 0, 20402);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 160 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 164 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 160 | 0);
                                    break label$1;
                                   case 0:
                                   case 1:
                                    break label$1;
                                   case 2:
                                    break label$70;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 456 | 0, 20405);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 176 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 180 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 176 | 0);
                                  break label$1;
                                 case 33:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -97 | 0;
                                  if ($5 >>> 0 <= 6) {
                                   break label$27;
                                  }
                                  $4 = $4 + -116 | 0;
                                  if ($4 >>> 0 > 4) {
                                   break label$1;
                                  }
                                  label$72 : {
                                   switch ($4 - 1 | 0) {
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 424 | 0, 20414);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 208 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 212 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 208 | 0);
                                    break label$1;
                                   case 0:
                                   case 1:
                                    break label$1;
                                   case 2:
                                    break label$19;
                                   case 3:
                                    break label$72;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, 20416, $2 + 600 | 0);
                                  break label$1;
                                 case 34:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -110 | 0;
                                  if ($5 >>> 0 > 4) {
                                   if (($4 | 0) != 82) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 400 | 0, 20432);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 232 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 236 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 232 | 0);
                                   break label$1;
                                  }
                                  label$75 : {
                                   switch ($5 - 1 | 0) {
                                   default:
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
                                    break label$1;
                                   case 0:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 416 | 0, 20427);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 216 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 220 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 216 | 0);
                                    break label$1;
                                   case 1:
                                   case 2:
                                    break label$1;
                                   case 3:
                                    break label$75;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 408 | 0, 20430);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 224 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 228 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 224 | 0);
                                  break label$1;
                                 case 35:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -108 | 0;
                                  if ($5 >>> 0 > 8) {
                                   if (($4 | 0) != 76) {
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 376 | 0, 20441);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 256 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 260 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 256 | 0);
                                   break label$1;
                                  }
                                  label$79 : {
                                   switch ($5 - 1 | 0) {
                                   case 0:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 392 | 0, 20435);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 240 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 244 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 240 | 0);
                                    break label$1;
                                   default:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 384 | 0, 20439);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 248 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 252 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 248 | 0);
                                    break label$1;
                                   case 3:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 368 | 0, 20444);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 264 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 268 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 264 | 0);
                                     break label$1;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $2 + 600 | 0, 20444);
                                    break label$1;
                                   case 6:
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 360 | 0, 20439);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 272 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 276 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 272 | 0);
                                    break label$1;
                                   case 1:
                                   case 2:
                                   case 4:
                                   case 5:
                                    break label$1;
                                   case 7:
                                    break label$79;
                                   }
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 612 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0, 20447, $2 + 612 | 0);
                                  break label$1;
                                 case 36:
                                  if (HEAPU8[$1 + 1 | 0] != 117) {
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 612 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 356 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $1 = $2 + 600 | 0;
                                  $3 = $2 + 612 | 0;
                                  $4 = $2 + 356 | 0;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$3 >> 2], HEAP32[$4 >> 2]);
                                  break label$1;
                                 case 37:
                                  label$85 : {
                                   label$86 : {
                                    $4 = HEAP8[$1 + 1 | 0];
                                    if (($4 | 0) != 77) {
                                     if (($4 | 0) == 83) {
                                      break label$85;
                                     }
                                     if (($4 | 0) == 115) {
                                      break label$86;
                                     }
                                     if (($4 | 0) != 109) {
                                      if (($4 | 0) != 99) {
                                       break label$1;
                                      }
                                      HEAP32[$0 >> 2] = $1 + 2;
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                      HEAP32[$2 + 600 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                      HEAP32[$2 + 612 >> 2] = $1;
                                      if (!$1) {
                                       break label$5;
                                      }
                                      $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 20450, $2 + 600 | 0, $2 + 612 | 0);
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 344 | 0, 20467);
                                     $3 = HEAP32[$1 + 4 >> 2];
                                     HEAP32[$2 + 280 >> 2] = HEAP32[$1 >> 2];
                                     HEAP32[$2 + 284 >> 2] = $3;
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 280 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 336 | 0, 20469);
                                    $3 = HEAP32[$1 + 4 >> 2];
                                    HEAP32[$2 + 288 >> 2] = HEAP32[$1 >> 2];
                                    HEAP32[$2 + 292 >> 2] = $3;
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 288 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 328 | 0, 20472);
                                   $3 = HEAP32[$1 + 4 >> 2];
                                   HEAP32[$2 + 296 >> 2] = HEAP32[$1 >> 2];
                                   HEAP32[$2 + 300 >> 2] = $3;
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 296 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 320 | 0, 20475);
                                  $3 = HEAP32[$1 + 4 >> 2];
                                  HEAP32[$2 + 304 >> 2] = HEAP32[$1 >> 2];
                                  HEAP32[$2 + 308 >> 2] = $3;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 304 | 0);
                                  break label$1;
                                 case 38:
                                  $4 = HEAP8[$1 + 1 | 0];
                                  $5 = $4 + -112 | 0;
                                  if ($5 >>> 0 <= 4) {
                                   break label$26;
                                  }
                                  if (($4 | 0) != 80) {
                                   if (($4 | 0) != 90) {
                                    if (($4 | 0) != 122) {
                                     if (($4 | 0) != 99) {
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = $1 + 2;
                                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                                     HEAP32[$2 + 600 >> 2] = $1;
                                     if (!$1) {
                                      break label$5;
                                     }
                                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                     HEAP32[$2 + 612 >> 2] = $1;
                                     if (!$1) {
                                      break label$5;
                                     }
                                     $3 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 20479, $2 + 600 | 0, $2 + 612 | 0);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = $1 + 2;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20491, $2 + 600 | 0);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = $1 + 2;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
                                   if (($1 | 0) != 102) {
                                    if (($1 & 255) != 84) {
                                     break label$1;
                                    }
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $1;
                                    if (!$1) {
                                     break label$5;
                                    }
                                    $3 = $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0);
                                    break label$1;
                                   }
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0);
                                   HEAP32[$2 + 600 >> 2] = $1;
                                   if (!$1) {
                                    break label$5;
                                   }
                                   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $2 + 600 | 0);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $0 + 8 | 0;
                                  $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1);
                                  while (1) {
                                   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                                    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
                                    HEAP32[$2 + 600 >> 2] = $5;
                                    if (!$5) {
                                     break label$1;
                                    }
                                    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                                    continue;
                                   }
                                   break;
                                  }
                                  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
                                  wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 600 | 0), HEAP32[wasm2js_i32$0 + 612 >> 2] = wasm2js_i32$1;
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $2 + 612 | 0);
                                  break label$1;
                                 case 0:
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 8:
                                 case 9:
                                 case 10:
                                 case 11:
                                 case 12:
                                 case 13:
                                 case 14:
                                 case 15:
                                 case 16:
                                 case 17:
                                 case 18:
                                 case 19:
                                 case 21:
                                 case 27:
                                 case 29:
                                 case 30:
                                  break label$1;
                                 case 39:
                                  break label$33;
                                 }
                                }
                                $4 = HEAP8[$1 + 1 | 0];
                                $5 = $4 + -105 | 0;
                                if ($5 >>> 0 <= 3) {
                                 break label$25;
                                }
                                if (($4 | 0) != 119) {
                                 if (($4 | 0) != 114) {
                                  if (($4 | 0) != 101) {
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = $1 + 2;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                  HEAP32[$2 + 600 >> 2] = $1;
                                  if (!$1) {
                                   break label$5;
                                  }
                                  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20512, $2 + 600 | 0);
                                  break label$1;
                                 }
                                 HEAP32[$0 >> 2] = $1 + 2;
                                 $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20521);
                                 break label$1;
                                }
                                HEAP32[$0 >> 2] = $1 + 2;
                                $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                                HEAP32[$2 + 600 >> 2] = $1;
                                if (!$1) {
                                 break label$5;
                                }
                                $3 = $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0);
                                break label$1;
                               }
                               switch ($5 - 1 | 0) {
                               case 0:
                               case 1:
                                break label$1;
                               case 2:
                                break label$4;
                               default:
                                break label$3;
                               }
                              }
                              switch ($5 - 1 | 0) {
                              case 1:
                               break label$1;
                              case 0:
                               break label$7;
                              case 2:
                               break label$8;
                              default:
                               break label$6;
                              }
                             }
                             switch ($5 - 1 | 0) {
                             case 0:
                             case 2:
                             case 3:
                             case 4:
                             case 5:
                             case 8:
                              break label$1;
                             case 1:
                              break label$10;
                             case 6:
                              break label$11;
                             case 7:
                              break label$12;
                             case 9:
                              break label$13;
                             default:
                              break label$9;
                             }
                            }
                            if ($5 - 1) {
                             break label$14;
                            }
                            break label$15;
                           }
                           switch ($5 - 1 | 0) {
                           case 0:
                           case 1:
                            break label$1;
                           case 2:
                            break label$17;
                           case 3:
                            break label$18;
                           default:
                            break label$16;
                           }
                          }
                          switch ($5 - 1 | 0) {
                          case 0:
                          case 1:
                          case 2:
                          case 4:
                           break label$1;
                          case 3:
                           break label$20;
                          case 5:
                           break label$21;
                          default:
                           break label$19;
                          }
                         }
                         switch ($5 - 1 | 0) {
                         case 0:
                         case 2:
                          break label$1;
                         case 1:
                          break label$23;
                         case 3:
                          break label$24;
                         default:
                          break label$22;
                         }
                        }
                        label$97 : {
                         switch ($5 - 1 | 0) {
                         case 2:
                          HEAP32[$0 >> 2] = $1 + 2;
                          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                          HEAP32[$2 + 612 >> 2] = $1;
                          if (!$1) {
                           break label$5;
                          }
                          $1 = $0 + 8 | 0;
                          $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1);
                          while (1) {
                           if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                            $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
                            HEAP32[$2 + 600 >> 2] = $4;
                            if (!$4) {
                             break label$5;
                            }
                            $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
                            continue;
                           }
                           break;
                          }
                          $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $3);
                          $3 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 612 | 0, $2 + 600 | 0);
                          break label$1;
                         case 0:
                         case 1:
                          break label$1;
                         default:
                          break label$97;
                         }
                        }
                        HEAP32[$0 >> 2] = $1 + 2;
                        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                        HEAP32[$2 + 600 >> 2] = $1;
                        if (!$1) {
                         break label$5;
                        }
                        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20512, $2 + 600 | 0);
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = $1 + 2;
                       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                       HEAP32[$2 + 600 >> 2] = $1;
                       if (!$1) {
                        break label$5;
                       }
                       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20491, $2 + 600 | 0);
                       break label$1;
                      }
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = $1 + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                     HEAP32[$2 + 600 >> 2] = $1;
                     if (!$1) {
                      break label$5;
                     }
                     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = $1 + 2;
                    $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 432 | 0, 20400);
                    $3 = HEAP32[$1 + 4 >> 2];
                    HEAP32[$2 + 200 >> 2] = HEAP32[$1 >> 2];
                    HEAP32[$2 + 204 >> 2] = $3;
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 200 | 0);
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = $1 + 2;
                   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 440 | 0, 20411);
                   $3 = HEAP32[$1 + 4 >> 2];
                   HEAP32[$2 + 192 >> 2] = HEAP32[$1 >> 2];
                   HEAP32[$2 + 196 >> 2] = $3;
                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 192 | 0);
                   break label$1;
                  }
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($0);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = $1 + 2;
                 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
                  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 448 | 0, 20408);
                  $3 = HEAP32[$1 + 4 >> 2];
                  HEAP32[$2 + 184 >> 2] = HEAP32[$1 >> 2];
                  HEAP32[$2 + 188 >> 2] = $3;
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 184 | 0);
                  break label$1;
                 }
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
                 HEAP32[$2 + 600 >> 2] = $1;
                 if (!$1) {
                  break label$5;
                 }
                 $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $2 + 600 | 0, 20408);
                 break label$1;
                }
                HEAP32[$0 >> 2] = $1 + 2;
                $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 464 | 0, 20363);
                $3 = HEAP32[$1 + 4 >> 2];
                HEAP32[$2 + 168 >> 2] = HEAP32[$1 >> 2];
                HEAP32[$2 + 172 >> 2] = $3;
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 168 | 0);
                break label$1;
               }
               HEAP32[$0 >> 2] = $1 + 2;
               $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 480 | 0, 20400);
               $3 = HEAP32[$1 + 4 >> 2];
               HEAP32[$2 + 152 >> 2] = HEAP32[$1 >> 2];
               HEAP32[$2 + 156 >> 2] = $3;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 152 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $1 + 2;
              $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 488 | 0, 20398);
              $3 = HEAP32[$1 + 4 >> 2];
              HEAP32[$2 + 144 >> 2] = HEAP32[$1 >> 2];
              HEAP32[$2 + 148 >> 2] = $3;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 144 | 0);
              break label$1;
             }
             HEAP32[$0 >> 2] = $1 + 2;
             $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 504 | 0, 20391);
             $3 = HEAP32[$1 + 4 >> 2];
             HEAP32[$2 + 128 >> 2] = HEAP32[$1 >> 2];
             HEAP32[$2 + 132 >> 2] = $3;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 128 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $1 + 2;
            $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 568 | 0, 20370);
            $3 = HEAP32[$1 + 4 >> 2];
            HEAP32[$2 + 64 >> 2] = HEAP32[$1 >> 2];
            HEAP32[$2 + 68 >> 2] = $3;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 - -64 | 0);
            break label$1;
           }
           HEAP32[$0 >> 2] = $1 + 2;
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
           HEAP32[$2 + 600 >> 2] = $1;
           if (!$1) {
            break label$5;
           }
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
           HEAP32[$2 + 612 >> 2] = $1;
           if (!$1) {
            break label$5;
           }
           $3 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 600 | 0, 20368, $2 + 612 | 0);
           break label$1;
          }
          HEAP32[$0 >> 2] = $1 + 2;
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
          HEAP32[$2 + 600 >> 2] = $1;
          if (!$1) {
           break label$5;
          }
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
          HEAP32[$2 + 612 >> 2] = $1;
          if (!$1) {
           break label$5;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 600 | 0, 20365, $2 + 612 | 0);
          break label$1;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0);
         break label$1;
        }
        HEAP32[$0 >> 2] = $1 + 2;
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
        HEAP32[$2 + 600 >> 2] = $1;
        if (!$1) {
         break label$5;
        }
        HEAP8[$2 + 612 | 0] = 0;
        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $2 + 600 | 0, $2 + 671 | 0, $2 + 612 | 0);
        break label$1;
       }
       HEAP32[$0 >> 2] = $1 + 2;
       $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 584 | 0, 20348);
       $3 = HEAP32[$1 + 4 >> 2];
       HEAP32[$2 + 48 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 52 >> 2] = $3;
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 48 | 0);
       break label$1;
      }
      HEAP32[$0 >> 2] = $1 + 2;
      $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 592 | 0, 20346);
      $3 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 40 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 44 >> 2] = $3;
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 40 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = $1 + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$2 + 612 >> 2] = $1;
     if (!$1) {
      break label$1;
     }
     $1 = $0 + 8 | 0;
     $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1);
     while (1) {
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
       HEAP32[$2 + 600 >> 2] = $5;
       if (!$5) {
        break label$1;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 600 | 0);
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 600 | 0, $0, $4);
     $3 = $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 612 | 0, $2 + 600 | 0);
     break label$1;
    }
    $3 = 0;
    break label$1;
   }
   HEAP32[$0 >> 2] = $1 + 2;
   $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 640 | 0, 20318);
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0);
   break label$1;
  }
  HEAP32[$0 >> 2] = $1 + 2;
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 648 | 0, 20315);
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $2);
 }
 global$0 = $2 + 672 | 0;
 return $3;
}
function arPattGetImage2($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 $12 = global$0 - 224 | 0;
 global$0 = $12;
 HEAP32[$12 + 216 >> 2] = 0;
 HEAP32[$12 + 220 >> 2] = 1079738368;
 HEAP32[$12 + 200 >> 2] = 0;
 HEAP32[$12 + 204 >> 2] = 1079738368;
 HEAP32[$12 + 184 >> 2] = 0;
 HEAP32[$12 + 188 >> 2] = 1079574528;
 HEAP32[$12 + 208 >> 2] = 0;
 HEAP32[$12 + 212 >> 2] = 1079574528;
 HEAP32[$12 + 192 >> 2] = 0;
 HEAP32[$12 + 196 >> 2] = 1079738368;
 HEAP32[$12 + 176 >> 2] = 0;
 HEAP32[$12 + 180 >> 2] = 1079738368;
 HEAP32[$12 + 168 >> 2] = 0;
 HEAP32[$12 + 172 >> 2] = 1079574528;
 HEAP32[$12 + 160 >> 2] = 0;
 HEAP32[$12 + 164 >> 2] = 1079574528;
 while (1) {
  if (($16 | 0) != 4) {
   $19 = $16 << 4;
   $15 = $19 + ($12 + 96 | 0) | 0;
   $19 = $9 + $19 | 0;
   $24 = HEAP32[$19 + 4 >> 2];
   HEAP32[$15 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$15 + 4 >> 2] = $24;
   $24 = HEAP32[$19 + 12 >> 2];
   HEAP32[$15 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
   HEAP32[$15 + 12 >> 2] = $24;
   $16 = $16 + 1 | 0;
   continue;
  }
  break;
 }
 get_cpara($12 + 160 | 0, $12 + 96 | 0, $12 + 16 | 0);
 $20 = HEAPF64[$12 + 112 >> 3];
 $21 = HEAPF64[$12 + 128 >> 3];
 $17 = $20 - $21;
 $23 = $17 * $17;
 $17 = HEAPF64[$12 + 120 >> 3];
 $18 = HEAPF64[$12 + 136 >> 3];
 $22 = $17 - $18;
 $22 = $23 + $22 * $22;
 label$3 : {
  if (Math_abs($22) < 2147483648) {
   $9 = ~~$22;
   break label$3;
  }
  $9 = -2147483648;
 }
 $22 = HEAPF64[$12 + 144 >> 3];
 $23 = HEAPF64[$12 + 96 >> 3];
 $30 = $22 - $23;
 $35 = $30 * $30;
 $30 = HEAPF64[$12 + 152 >> 3];
 $34 = HEAPF64[$12 + 104 >> 3];
 $29 = $30 - $34;
 $29 = $35 + $29 * $29;
 label$6 : {
  if (Math_abs($29) < 2147483648) {
   $15 = ~~$29;
   break label$6;
  }
  $15 = -2147483648;
 }
 $29 = +((($15 | 0) > ($9 | 0) ? $15 : $9) | 0) * $10 * $10;
 label$5 : {
  if (Math_abs($29) < 2147483648) {
   $9 = ~~$29;
   break label$5;
  }
  $9 = -2147483648;
 }
 $20 = $23 - $20;
 $23 = $20 * $20;
 $20 = $34 - $17;
 $20 = $23 + $20 * $20;
 label$9 : {
  if (Math_abs($20) < 2147483648) {
   $15 = ~~$20;
   break label$9;
  }
  $15 = -2147483648;
 }
 $20 = $21 - $22;
 $17 = $20 * $20;
 $20 = $18 - $30;
 $20 = $17 + $20 * $20;
 label$12 : {
  if (Math_abs($20) < 2147483648) {
   $19 = ~~$20;
   break label$12;
  }
  $19 = -2147483648;
 }
 $20 = +((($19 | 0) > ($15 | 0) ? $19 : $15) | 0) * $10 * $10;
 label$11 : {
  if (Math_abs($20) < 2147483648) {
   $15 = ~~$20;
   break label$11;
  }
  $15 = -2147483648;
 }
 label$15 : {
  if (!$0) {
   $19 = $2;
   while (1) {
    $16 = $19;
    if (($16 | 0) < ($3 | 0)) {
     $19 = $16 << 1;
     if ((Math_imul($16, $16) | 0) < ($15 | 0)) {
      continue;
     }
    }
    break;
   }
   $15 = $2;
   while (1) {
    $19 = $15;
    if (($15 | 0) >= ($3 | 0)) {
     break label$15;
    }
    $15 = $19 << 1;
    if ((Math_imul($19, $19) | 0) < ($9 | 0)) {
     continue;
    }
    break;
   }
   break label$15;
  }
  $19 = $2;
  while (1) {
   $16 = $19;
   if (($16 | 0) < ($3 | 0)) {
    $19 = $16 << 1;
    if (Math_imul($16, $16) << 2 < ($15 | 0)) {
     continue;
    }
   }
   break;
  }
  $15 = $2;
  while (1) {
   $19 = $15;
   if (($15 | 0) >= ($3 | 0)) {
    break label$15;
   }
   $15 = $19 << 1;
   if (Math_imul($19, $19) << 2 < ($9 | 0)) {
    continue;
   }
   break;
  }
 }
 $20 = $10 * 10;
 $10 = (1 - $10) * .5 * 10;
 $19 = ($19 | 0) > ($3 | 0) ? $3 : $19;
 $26 = ($19 | 0) / ($2 | 0) | 0;
 $24 = ($16 | 0) > ($3 | 0) ? $3 : $16;
 $27 = ($24 | 0) / ($2 | 0) | 0;
 $3 = Math_imul($2, $2);
 label$23 : {
  label$24 : {
   label$25 : {
    if (!$1) {
     $25 = Math_imul($3, 3);
     $9 = dlcalloc($25);
     if (!$9) {
      break label$23;
     }
     label$28 : {
      if ($7 >>> 0 <= 14) {
       label$30 : {
        switch ($7 - 1 | 0) {
        default:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$45 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$47 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$47;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$49 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$49;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$45;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$51 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$51;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$45;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = Math_imul($0 + Math_imul($5, $15) | 0, 3) + $4 | 0;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[$0 + 2 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[$0 + 1 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[$0 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 0:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$58 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$60 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$60;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$62 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$62;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$58;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$64 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$64;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$58;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = Math_imul($0 + Math_imul($5, $15) | 0, 3) + $4 | 0;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[$0 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[$0 + 1 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[$0 + 2 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 1:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$71 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$73 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$73;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$75 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$75;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$71;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$77 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$77;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$71;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 2;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[($0 | 2) + $4 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[($0 | 1) + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[$0 + $4 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 2:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$84 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$86 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$86;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$88 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$88;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$84;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$90 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$90;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$84;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 2;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[$0 + $4 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[($0 | 1) + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[($0 | 2) + $4 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 3:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$97 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$99 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$99;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$101 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$101;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$97;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$103 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$103;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$97;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 2;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[($0 | 1) + $4 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[($0 | 2) + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[($0 | 3) + $4 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 4:
        case 11:
        case 12:
        case 13:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$110 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$112 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$112;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$114 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$114;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$110;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$116 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$116;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$110;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = HEAPU8[($0 + Math_imul($5, $15) | 0) + $4 | 0];
             HEAP32[$3 >> 2] = $0 + HEAP32[$3 >> 2];
             HEAP32[$3 + 4 >> 2] = $0 + HEAP32[$3 + 4 >> 2];
             HEAP32[$3 + 8 >> 2] = $0 + HEAP32[$3 + 8 >> 2];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 5:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$123 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$125 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$125;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$127 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$127;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$123;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$129 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$129;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$123;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 2;
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + HEAPU8[($0 | 3) + $4 | 0];
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + HEAPU8[($0 | 2) + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + HEAPU8[($0 | 1) + $4 | 0];
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 6:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $32 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$136 : {
             if (!$32) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$138 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$138;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$140 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$140;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$136;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$142 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$142;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$136;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul($5, $15);
             $7 = ($3 + ($0 & 65534) << 1) + $4 | 0;
             $14 = Math_fround(HEAPU8[$7 | 0] + -128 | 0);
             $13 = Math_fround(Math_fround(HEAPU8[($0 + $3 << 1 | 1) + $4 | 0] + -16 | 0) * Math_fround(298.0820007324219));
             $28 = Math_fround(Math_fround($14 * Math_fround(516.4110107421875)) + $13);
             label$146 : {
              if (Math_fround(Math_abs($28)) < Math_fround(2147483648)) {
               $3 = ~~$28;
               break label$146;
              }
              $3 = -2147483648;
             }
             $7 = HEAPU8[$7 + 2 | 0];
             $0 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $3 = $3 >> 8;
             $3 = ($3 | 0) > 0 ? $3 : 0;
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (($3 | 0) < 255 ? $3 : 255);
             $15 = $0;
             $33 = HEAP32[$0 + 8 >> 2];
             $28 = Math_fround($7 + -128 | 0);
             $31 = Math_fround($13 + Math_fround($28 * Math_fround(408.5830078125)));
             label$148 : {
              if (Math_fround(Math_abs($31)) < Math_fround(2147483648)) {
               $3 = ~~$31;
               break label$148;
              }
              $3 = -2147483648;
             }
             $3 = $3 >> 8;
             $3 = ($3 | 0) > 0 ? $3 : 0;
             HEAP32[$15 + 8 >> 2] = $33 + (($3 | 0) < 255 ? $3 : 255);
             $3 = $0;
             $7 = HEAP32[$0 + 4 >> 2];
             $13 = Math_fround(Math_fround($13 + Math_fround($14 * Math_fround(-100.29100036621094))) + Math_fround($28 * Math_fround(-208.1199951171875)));
             label$150 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$150;
              }
              $0 = -2147483648;
             }
             $0 = $0 >> 8;
             $0 = ($0 | 0) > 0 ? $0 : 0;
             HEAP32[$3 + 4 >> 2] = $7 + (($0 | 0) < 255 ? $0 : 255);
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 7:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $32 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$155 : {
             if (!$32) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$157 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$157;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$159 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$159;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$155;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$161 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$161;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$155;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul($5, $15);
             $13 = Math_fround(Math_fround(HEAPU8[($3 + $0 << 1) + $4 | 0] + -16 | 0) * Math_fround(298.0820007324219));
             $0 = $3 + ($0 & 65534) << 1;
             $14 = Math_fround(HEAPU8[($0 | 1) + $4 | 0] + -128 | 0);
             $28 = Math_fround($13 + Math_fround($14 * Math_fround(516.4110107421875)));
             label$165 : {
              if (Math_fround(Math_abs($28)) < Math_fround(2147483648)) {
               $3 = ~~$28;
               break label$165;
              }
              $3 = -2147483648;
             }
             $7 = HEAPU8[($0 + $4 | 0) + 3 | 0];
             $0 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $3 = $3 >> 8;
             $3 = ($3 | 0) > 0 ? $3 : 0;
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (($3 | 0) < 255 ? $3 : 255);
             $15 = $0;
             $33 = HEAP32[$0 + 8 >> 2];
             $28 = Math_fround($7 + -128 | 0);
             $31 = Math_fround($13 + Math_fround($28 * Math_fround(408.5830078125)));
             label$167 : {
              if (Math_fround(Math_abs($31)) < Math_fround(2147483648)) {
               $3 = ~~$31;
               break label$167;
              }
              $3 = -2147483648;
             }
             $3 = $3 >> 8;
             $3 = ($3 | 0) > 0 ? $3 : 0;
             HEAP32[$15 + 8 >> 2] = $33 + (($3 | 0) < 255 ? $3 : 255);
             $3 = $0;
             $7 = HEAP32[$0 + 4 >> 2];
             $13 = Math_fround(Math_fround($13 + Math_fround($14 * Math_fround(-100.29100036621094))) + Math_fround($28 * Math_fround(-208.1199951171875)));
             label$169 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$169;
              }
              $0 = -2147483648;
             }
             $0 = $0 >> 8;
             $0 = ($0 | 0) > 0 ? $0 : 0;
             HEAP32[$3 + 4 >> 2] = $7 + (($0 | 0) < 255 ? $0 : 255);
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 8:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$174 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$176 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$176;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$178 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$178;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$174;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$180 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$180;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$174;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 1;
             $15 = HEAPU8[($0 | 1) + $4 | 0];
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (($15 << 3 | 4) & 252);
             $0 = HEAPU8[$0 + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + (($0 | 4) & 252);
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + (($0 << 5 | $15 >>> 3 | 2) & 254);
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 9:
         $21 = $10 + 100;
         $22 = +($24 | 0);
         $23 = +($19 | 0);
         $7 = ($0 | 0) != 1;
         $1 = 0;
         while (1) {
          if (($1 | 0) >= ($19 | 0)) {
           break label$28;
          }
          $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
          $16 = 0;
          while (1) {
           if (($16 | 0) < ($24 | 0)) {
            $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
            $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
            if ($18 == 0) {
             break label$25;
            }
            $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
            HEAPF32[$12 + 12 >> 2] = $13;
            $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
            HEAPF32[$12 + 8 >> 2] = $14;
            arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
            $13 = HEAPF32[$12 + 12 >> 2];
            label$187 : {
             if (!$7) {
              $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
              label$189 : {
               if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
                $0 = ~~$14;
                break label$189;
               }
               $0 = -2147483648;
              }
              $15 = ($0 | 0) / 2 << 1;
              $13 = Math_fround($13 + Math_fround(1));
              label$191 : {
               if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
                $0 = ~~$13;
                break label$191;
               }
               $0 = -2147483648;
              }
              $0 = ($0 | 0) / 2 << 1;
              break label$187;
             }
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
             label$193 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $15 = ~~$14;
               break label$193;
              }
              $15 = -2147483648;
             }
             $13 = Math_fround($13 + Math_fround(.5));
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$187;
             }
             $0 = -2147483648;
            }
            if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
             $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
             $0 = $0 + Math_imul($5, $15) << 1;
             $15 = HEAPU8[($0 | 1) + $4 | 0];
             HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (($15 << 2 | 4) & 252);
             $0 = HEAPU8[$0 + $4 | 0];
             HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + (($0 | 4) & 252);
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + (($0 << 5 | $15 >>> 3 | 4) & 252);
            }
            $16 = $16 + 1 | 0;
            continue;
           }
           break;
          }
          $1 = $1 + 1 | 0;
          continue;
         }
        case 10:
         break label$30;
        }
       }
       $21 = $10 + 100;
       $22 = +($24 | 0);
       $23 = +($19 | 0);
       $7 = ($0 | 0) != 1;
       $1 = 0;
       while (1) {
        if (($1 | 0) >= ($19 | 0)) {
         break label$28;
        }
        $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
        $16 = 0;
        while (1) {
         if (($16 | 0) < ($24 | 0)) {
          $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
          $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
          if ($18 == 0) {
           break label$25;
          }
          $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
          HEAPF32[$12 + 12 >> 2] = $13;
          $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
          HEAPF32[$12 + 8 >> 2] = $14;
          arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
          $13 = HEAPF32[$12 + 12 >> 2];
          label$200 : {
           if (!$7) {
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
            label$202 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $0 = ~~$14;
              break label$202;
             }
             $0 = -2147483648;
            }
            $15 = ($0 | 0) / 2 << 1;
            $13 = Math_fround($13 + Math_fround(1));
            label$204 : {
             if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
              $0 = ~~$13;
              break label$204;
             }
             $0 = -2147483648;
            }
            $0 = ($0 | 0) / 2 << 1;
            break label$200;
           }
           $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
           label$206 : {
            if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
             $15 = ~~$14;
             break label$206;
            }
            $15 = -2147483648;
           }
           $13 = Math_fround($13 + Math_fround(.5));
           if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
            $0 = ~~$13;
            break label$200;
           }
           $0 = -2147483648;
          }
          if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
           $3 = Math_imul(Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) | 0, 12) + $9 | 0;
           $0 = $0 + Math_imul($5, $15) << 1;
           HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAPU8[($0 | 1) + $4 | 0] & 240 | 8);
           $0 = HEAPU8[$0 + $4 | 0];
           HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + (($0 | 8) & 248);
           HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + (($0 << 4 | 8) & 248);
          }
          $16 = $16 + 1 | 0;
          continue;
         }
         break;
        }
        $1 = $1 + 1 | 0;
        continue;
       }
      }
      arLog(3, 1964, 0);
      break label$25;
     }
     $0 = Math_imul($26, $27);
     $19 = 0;
     $16 = 0;
     while (1) {
      if (($16 | 0) == ($25 | 0)) {
       break label$24;
      }
      HEAP8[$11 + $16 | 0] = HEAPU32[($16 << 2) + $9 >> 2] / ($0 >>> 0);
      $16 = $16 + 1 | 0;
      continue;
     }
    }
    $9 = dlcalloc($3);
    if (!$9) {
     break label$23;
    }
    label$211 : {
     if ($7 >>> 0 <= 1) {
      $21 = $10 + 100;
      $22 = +($24 | 0);
      $23 = +($19 | 0);
      $7 = ($0 | 0) != 1;
      $1 = 0;
      while (1) {
       if (($1 | 0) >= ($19 | 0)) {
        break label$211;
       }
       $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
       $16 = 0;
       while (1) {
        if (($16 | 0) < ($24 | 0)) {
         $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
         $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
         if ($18 == 0) {
          break label$25;
         }
         $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
         HEAPF32[$12 + 12 >> 2] = $13;
         $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
         HEAPF32[$12 + 8 >> 2] = $14;
         arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
         $13 = HEAPF32[$12 + 12 >> 2];
         label$216 : {
          if (!$7) {
           $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
           label$218 : {
            if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
             $0 = ~~$14;
             break label$218;
            }
            $0 = -2147483648;
           }
           $15 = ($0 | 0) / 2 << 1;
           $13 = Math_fround($13 + Math_fround(1));
           label$220 : {
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$220;
            }
            $0 = -2147483648;
           }
           $0 = ($0 | 0) / 2 << 1;
           break label$216;
          }
          $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
          label$222 : {
           if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
            $15 = ~~$14;
            break label$222;
           }
           $15 = -2147483648;
          }
          $13 = Math_fround($13 + Math_fround(.5));
          if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
           $0 = ~~$13;
           break label$216;
          }
          $0 = -2147483648;
         }
         if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
          $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
          $0 = Math_imul($0 + Math_imul($5, $15) | 0, 3) + $4 | 0;
          HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + (((HEAPU8[$0 + 1 | 0] + HEAPU8[$0 | 0] | 0) + HEAPU8[$0 + 2 | 0] >>> 0) / 3 | 0);
         }
         $16 = $16 + 1 | 0;
         continue;
        }
        break;
       }
       $1 = $1 + 1 | 0;
       continue;
      }
     }
     if (($7 | 1) == 3) {
      $21 = $10 + 100;
      $22 = +($24 | 0);
      $23 = +($19 | 0);
      $7 = ($0 | 0) != 1;
      $1 = 0;
      while (1) {
       if (($1 | 0) >= ($19 | 0)) {
        break label$211;
       }
       $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
       $16 = 0;
       while (1) {
        if (($16 | 0) < ($24 | 0)) {
         $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
         $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
         if ($18 == 0) {
          break label$25;
         }
         $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
         HEAPF32[$12 + 12 >> 2] = $13;
         $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
         HEAPF32[$12 + 8 >> 2] = $14;
         arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
         $13 = HEAPF32[$12 + 12 >> 2];
         label$230 : {
          if (!$7) {
           $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
           label$232 : {
            if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
             $0 = ~~$14;
             break label$232;
            }
            $0 = -2147483648;
           }
           $15 = ($0 | 0) / 2 << 1;
           $13 = Math_fround($13 + Math_fround(1));
           label$234 : {
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$234;
            }
            $0 = -2147483648;
           }
           $0 = ($0 | 0) / 2 << 1;
           break label$230;
          }
          $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
          label$236 : {
           if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
            $15 = ~~$14;
            break label$236;
           }
           $15 = -2147483648;
          }
          $13 = Math_fround($13 + Math_fround(.5));
          if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
           $0 = ~~$13;
           break label$230;
          }
          $0 = -2147483648;
         }
         if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
          $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
          $0 = $0 + Math_imul($5, $15) << 2;
          HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + (((HEAPU8[($0 | 1) + $4 | 0] + HEAPU8[$0 + $4 | 0] | 0) + HEAPU8[($0 | 2) + $4 | 0] >>> 0) / 3 | 0);
         }
         $16 = $16 + 1 | 0;
         continue;
        }
        break;
       }
       $1 = $1 + 1 | 0;
       continue;
      }
     }
     if (($7 | 2) == 6) {
      $21 = $10 + 100;
      $22 = +($24 | 0);
      $23 = +($19 | 0);
      $7 = ($0 | 0) != 1;
      $1 = 0;
      while (1) {
       if (($1 | 0) >= ($19 | 0)) {
        break label$211;
       }
       $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
       $16 = 0;
       while (1) {
        if (($16 | 0) < ($24 | 0)) {
         $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
         $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
         if ($18 == 0) {
          break label$25;
         }
         $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
         HEAPF32[$12 + 12 >> 2] = $13;
         $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
         HEAPF32[$12 + 8 >> 2] = $14;
         arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
         $13 = HEAPF32[$12 + 12 >> 2];
         label$244 : {
          if (!$7) {
           $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
           label$246 : {
            if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
             $0 = ~~$14;
             break label$246;
            }
            $0 = -2147483648;
           }
           $15 = ($0 | 0) / 2 << 1;
           $13 = Math_fround($13 + Math_fround(1));
           label$248 : {
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$248;
            }
            $0 = -2147483648;
           }
           $0 = ($0 | 0) / 2 << 1;
           break label$244;
          }
          $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
          label$250 : {
           if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
            $15 = ~~$14;
            break label$250;
           }
           $15 = -2147483648;
          }
          $13 = Math_fround($13 + Math_fround(.5));
          if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
           $0 = ~~$13;
           break label$244;
          }
          $0 = -2147483648;
         }
         if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
          $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
          $0 = $0 + Math_imul($5, $15) << 2;
          HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + (((HEAPU8[($0 | 2) + $4 | 0] + HEAPU8[($0 | 1) + $4 | 0] | 0) + HEAPU8[($0 | 3) + $4 | 0] >>> 0) / 3 | 0);
         }
         $16 = $16 + 1 | 0;
         continue;
        }
        break;
       }
       $1 = $1 + 1 | 0;
       continue;
      }
     }
     label$254 : {
      $1 = $7 + -5 | 0;
      if ($1 >>> 0 > 9) {
       break label$254;
      }
      label$255 : {
       switch ($1 - 1 | 0) {
       default:
        $21 = $10 + 100;
        $22 = +($24 | 0);
        $23 = +($19 | 0);
        $7 = ($0 | 0) != 1;
        $1 = 0;
        while (1) {
         if (($1 | 0) >= ($19 | 0)) {
          break label$211;
         }
         $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
         $16 = 0;
         while (1) {
          if (($16 | 0) < ($24 | 0)) {
           $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
           $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
           if ($18 == 0) {
            break label$25;
           }
           $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
           HEAPF32[$12 + 12 >> 2] = $13;
           $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
           HEAPF32[$12 + 8 >> 2] = $14;
           arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
           $13 = HEAPF32[$12 + 12 >> 2];
           label$264 : {
            if (!$7) {
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
             label$266 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $0 = ~~$14;
               break label$266;
              }
              $0 = -2147483648;
             }
             $15 = ($0 | 0) / 2 << 1;
             $13 = Math_fround($13 + Math_fround(1));
             label$268 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$268;
              }
              $0 = -2147483648;
             }
             $0 = ($0 | 0) / 2 << 1;
             break label$264;
            }
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
            label$270 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $15 = ~~$14;
              break label$270;
             }
             $15 = -2147483648;
            }
            $13 = Math_fround($13 + Math_fround(.5));
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$264;
            }
            $0 = -2147483648;
           }
           if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
            $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
            HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + HEAPU8[($0 + Math_imul($5, $15) | 0) + $4 | 0];
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
       case 1:
        $21 = $10 + 100;
        $22 = +($24 | 0);
        $23 = +($19 | 0);
        $7 = ($0 | 0) != 1;
        $1 = 0;
        while (1) {
         if (($1 | 0) >= ($19 | 0)) {
          break label$211;
         }
         $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
         $16 = 0;
         while (1) {
          if (($16 | 0) < ($24 | 0)) {
           $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
           $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
           if ($18 == 0) {
            break label$25;
           }
           $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
           HEAPF32[$12 + 12 >> 2] = $13;
           $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
           HEAPF32[$12 + 8 >> 2] = $14;
           arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
           $13 = HEAPF32[$12 + 12 >> 2];
           label$277 : {
            if (!$7) {
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
             label$279 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $0 = ~~$14;
               break label$279;
              }
              $0 = -2147483648;
             }
             $15 = ($0 | 0) / 2 << 1;
             $13 = Math_fround($13 + Math_fround(1));
             label$281 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$281;
              }
              $0 = -2147483648;
             }
             $0 = ($0 | 0) / 2 << 1;
             break label$277;
            }
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
            label$283 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $15 = ~~$14;
              break label$283;
             }
             $15 = -2147483648;
            }
            $13 = Math_fround($13 + Math_fround(.5));
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$277;
            }
            $0 = -2147483648;
           }
           if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
            $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
            HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + HEAPU8[($0 + Math_imul($5, $15) << 1 | 1) + $4 | 0];
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
       case 2:
        $21 = $10 + 100;
        $22 = +($24 | 0);
        $23 = +($19 | 0);
        $7 = ($0 | 0) != 1;
        $1 = 0;
        while (1) {
         if (($1 | 0) >= ($19 | 0)) {
          break label$211;
         }
         $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
         $16 = 0;
         while (1) {
          if (($16 | 0) < ($24 | 0)) {
           $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
           $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
           if ($18 == 0) {
            break label$25;
           }
           $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
           HEAPF32[$12 + 12 >> 2] = $13;
           $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
           HEAPF32[$12 + 8 >> 2] = $14;
           arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
           $13 = HEAPF32[$12 + 12 >> 2];
           label$290 : {
            if (!$7) {
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
             label$292 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $0 = ~~$14;
               break label$292;
              }
              $0 = -2147483648;
             }
             $15 = ($0 | 0) / 2 << 1;
             $13 = Math_fround($13 + Math_fround(1));
             label$294 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$294;
              }
              $0 = -2147483648;
             }
             $0 = ($0 | 0) / 2 << 1;
             break label$290;
            }
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
            label$296 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $15 = ~~$14;
              break label$296;
             }
             $15 = -2147483648;
            }
            $13 = Math_fround($13 + Math_fround(.5));
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$290;
            }
            $0 = -2147483648;
           }
           if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
            $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
            HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + HEAPU8[($0 + Math_imul($5, $15) << 1) + $4 | 0];
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
       case 3:
        $21 = $10 + 100;
        $22 = +($24 | 0);
        $23 = +($19 | 0);
        $7 = ($0 | 0) != 1;
        $1 = 0;
        while (1) {
         if (($1 | 0) >= ($19 | 0)) {
          break label$211;
         }
         $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
         $16 = 0;
         while (1) {
          if (($16 | 0) < ($24 | 0)) {
           $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
           $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
           if ($18 == 0) {
            break label$25;
           }
           $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
           HEAPF32[$12 + 12 >> 2] = $13;
           $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
           HEAPF32[$12 + 8 >> 2] = $14;
           arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
           $13 = HEAPF32[$12 + 12 >> 2];
           label$303 : {
            if (!$7) {
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
             label$305 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $0 = ~~$14;
               break label$305;
              }
              $0 = -2147483648;
             }
             $15 = ($0 | 0) / 2 << 1;
             $13 = Math_fround($13 + Math_fround(1));
             label$307 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$307;
              }
              $0 = -2147483648;
             }
             $0 = ($0 | 0) / 2 << 1;
             break label$303;
            }
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
            label$309 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $15 = ~~$14;
              break label$309;
             }
             $15 = -2147483648;
            }
            $13 = Math_fround($13 + Math_fround(.5));
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$303;
            }
            $0 = -2147483648;
           }
           if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
            $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
            $0 = $0 + Math_imul($5, $15) << 1;
            $15 = HEAPU8[$0 + $4 | 0];
            $0 = HEAPU8[($0 | 1) + $4 | 0];
            HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + ((((($15 << 5 | $0 >>> 3) & 252 | 2) + ($15 & 248 | 4) | 0) + ($0 << 3 & 248 | 4) >>> 0) / 3 | 0);
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
       case 4:
        $21 = $10 + 100;
        $22 = +($24 | 0);
        $23 = +($19 | 0);
        $7 = ($0 | 0) != 1;
        $1 = 0;
        while (1) {
         if (($1 | 0) >= ($19 | 0)) {
          break label$211;
         }
         $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
         $16 = 0;
         while (1) {
          if (($16 | 0) < ($24 | 0)) {
           $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
           $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
           if ($18 == 0) {
            break label$25;
           }
           $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
           HEAPF32[$12 + 12 >> 2] = $13;
           $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
           HEAPF32[$12 + 8 >> 2] = $14;
           arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
           $13 = HEAPF32[$12 + 12 >> 2];
           label$316 : {
            if (!$7) {
             $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
             label$318 : {
              if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
               $0 = ~~$14;
               break label$318;
              }
              $0 = -2147483648;
             }
             $15 = ($0 | 0) / 2 << 1;
             $13 = Math_fround($13 + Math_fround(1));
             label$320 : {
              if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
               $0 = ~~$13;
               break label$320;
              }
              $0 = -2147483648;
             }
             $0 = ($0 | 0) / 2 << 1;
             break label$316;
            }
            $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
            label$322 : {
             if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
              $15 = ~~$14;
              break label$322;
             }
             $15 = -2147483648;
            }
            $13 = Math_fround($13 + Math_fround(.5));
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$316;
            }
            $0 = -2147483648;
           }
           if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
            $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
            $0 = $0 + Math_imul($5, $15) << 1;
            $15 = HEAPU8[$0 + $4 | 0];
            $0 = HEAPU8[($0 | 1) + $4 | 0];
            HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + ((((($15 << 5 | $0 >>> 3) & 248 | 4) + ($15 & 248 | 4) | 0) + ($0 << 2 & 248 | 4) >>> 0) / 3 | 0);
           }
           $16 = $16 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
       case 0:
        break label$254;
       case 5:
        break label$255;
       }
      }
      $21 = $10 + 100;
      $22 = +($24 | 0);
      $23 = +($19 | 0);
      $7 = ($0 | 0) != 1;
      $1 = 0;
      while (1) {
       if (($1 | 0) >= ($19 | 0)) {
        break label$211;
       }
       $10 = $21 + $20 * (+($1 | 0) + .5) / $23;
       $16 = 0;
       while (1) {
        if (($16 | 0) < ($24 | 0)) {
         $17 = $21 + $20 * (+($16 | 0) + .5) / $22;
         $18 = HEAPF64[$12 + 80 >> 3] + ($17 * HEAPF64[$12 + 64 >> 3] + $10 * HEAPF64[$12 + 72 >> 3]);
         if ($18 == 0) {
          break label$25;
         }
         $13 = Math_fround((HEAPF64[$12 + 32 >> 3] + ($17 * HEAPF64[$12 + 16 >> 3] + $10 * HEAPF64[$12 + 24 >> 3])) / $18);
         HEAPF32[$12 + 12 >> 2] = $13;
         $14 = Math_fround((HEAPF64[$12 + 56 >> 3] + ($17 * HEAPF64[$12 + 40 >> 3] + $10 * HEAPF64[$12 + 48 >> 3])) / $18);
         HEAPF32[$12 + 8 >> 2] = $14;
         arParamIdeal2ObservLTf($8, $13, $14, $12 + 12 | 0, $12 + 8 | 0);
         $13 = HEAPF32[$12 + 12 >> 2];
         label$329 : {
          if (!$7) {
           $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(1));
           label$331 : {
            if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
             $0 = ~~$14;
             break label$331;
            }
            $0 = -2147483648;
           }
           $15 = ($0 | 0) / 2 << 1;
           $13 = Math_fround($13 + Math_fround(1));
           label$333 : {
            if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
             $0 = ~~$13;
             break label$333;
            }
            $0 = -2147483648;
           }
           $0 = ($0 | 0) / 2 << 1;
           break label$329;
          }
          $14 = Math_fround(HEAPF32[$12 + 8 >> 2] + Math_fround(.5));
          label$335 : {
           if (Math_fround(Math_abs($14)) < Math_fround(2147483648)) {
            $15 = ~~$14;
            break label$335;
           }
           $15 = -2147483648;
          }
          $13 = Math_fround($13 + Math_fround(.5));
          if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
           $0 = ~~$13;
           break label$329;
          }
          $0 = -2147483648;
         }
         if (!(($0 | 0) < 0 | ($15 | 0) >= ($6 | 0) | (($15 | 0) < 0 | ($0 | 0) >= ($5 | 0)))) {
          $25 = (Math_imul(($1 | 0) / ($26 | 0) | 0, $2) + (($16 | 0) / ($27 | 0) | 0) << 2) + $9 | 0;
          $0 = $0 + Math_imul($5, $15) << 1;
          $15 = HEAPU8[$0 + $4 | 0];
          HEAP32[$25 >> 2] = HEAP32[$25 >> 2] + (((($15 << 4 & 240 | 8) + ($15 & 240 | 8) | 0) + (HEAPU8[($0 | 1) + $4 | 0] & 240 | 8) >>> 0) / 3 | 0);
         }
         $16 = $16 + 1 | 0;
         continue;
        }
        break;
       }
       $1 = $1 + 1 | 0;
       continue;
      }
     }
     arLog(3, 1964, 0);
     break label$25;
    }
    $0 = Math_imul($26, $27);
    $19 = 0;
    $16 = 0;
    while (1) {
     if (($3 | 0) == ($16 | 0)) {
      break label$24;
     }
     HEAP8[$11 + $16 | 0] = HEAPU32[($16 << 2) + $9 >> 2] / ($0 >>> 0);
     $16 = $16 + 1 | 0;
     continue;
    }
   }
   $19 = -1;
  }
  dlfree($9);
  global$0 = $12 + 224 | 0;
  return $19;
 }
 arLog(3, 1511, 0);
 exit(1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -97 | 0;
 label$1 : {
  if ($3 >>> 0 > 21) {
   break label$1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                switch ($3 - 1 | 0) {
                default:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 3) {
                  break label$14;
                 }
                 label$30 : {
                  if (($1 | 0) != 78) {
                   if (($1 | 0) == 83) {
                    break label$30;
                   }
                   if (($1 | 0) != 110) {
                    break label$1;
                   }
                   break label$2;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22701);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22712);
                 break label$1;
                case 1:
                 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $5 = $3 + -108 | 0;
                 if ($5 >>> 0 > 3) {
                  if (($3 | 0) != 118) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($4 + 24 | 0, $0 + 360 | 0, 0);
                  $5 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($4 + 16 | 0, $0 + 361 | 0, (HEAPU8[$0 + 361 | 0] | $1) != 0);
                  $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                  HEAP32[$4 + 12 >> 2] = $6;
                  if ($6) {
                   if ($1) {
                    HEAP8[$1 | 0] = 1;
                   }
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 12 | 0);
                  }
                  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($5);
                  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
                  break label$1;
                 }
                 label$35 : {
                  switch ($5 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22722);
                   break label$1;
                  case 0:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22733);
                   break label$1;
                  case 1:
                   break label$1;
                  case 2:
                   break label$35;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22743);
                 break label$1;
                case 2:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$13;
                 }
                 if (($1 | 0) != 86) {
                  if (($1 | 0) != 108) {
                   if (($1 | 0) != 118) {
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22797);
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 22781);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22807);
                 break label$1;
                case 3:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -111 | 0;
                 if ($3 >>> 0 > 2) {
                  if (($1 | 0) != 79) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22828);
                  break label$1;
                 }
                 label$41 : {
                  switch ($3 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22818);
                   break label$1;
                  case 0:
                   break label$1;
                  case 1:
                   break label$41;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22839);
                 break label$1;
                case 5:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 if (($1 | 0) != 116) {
                  if (($1 | 0) != 101) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22850);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22861);
                 break label$1;
                case 7:
                 if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 120) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22871);
                 break label$1;
                case 10:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -101 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$12;
                 }
                 $3 = $1 + -115 | 0;
                 if ($3 >>> 0 > 1) {
                  if (($1 | 0) != 83) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22904);
                  break label$1;
                 }
                 if ($3 - 1) {
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22893);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22916);
                 break label$1;
                case 11:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -105 | 0;
                 if ($3 >>> 0 <= 4) {
                  break label$11;
                 }
                 $1 = $1 + -73 | 0;
                 if ($1 >>> 0 > 3) {
                  break label$1;
                 }
                 label$46 : {
                  switch ($1 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22936);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$46;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22947);
                 break label$1;
                case 12:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -97 | 0;
                 if ($3 >>> 0 <= 6) {
                  break label$10;
                 }
                 $1 = $1 + -116 | 0;
                 if ($1 >>> 0 > 3) {
                  break label$1;
                 }
                 label$48 : {
                  switch ($1 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22995);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$48;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23005);
                 break label$1;
                case 13:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -111 | 0;
                 if ($3 >>> 0 > 3) {
                  if (($1 | 0) != 82) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23039);
                  break label$1;
                 }
                 label$51 : {
                  switch ($3 - 1 | 0) {
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23018);
                   break label$1;
                  case 0:
                  case 1:
                   break label$1;
                  case 2:
                   break label$51;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23029);
                 break label$1;
                case 14:
                 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                 $3 = $1 + -108 | 0;
                 if ($3 >>> 0 > 8) {
                  if (($1 | 0) != 76) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23072);
                  break label$1;
                 }
                 label$54 : {
                  switch ($3 - 1 | 0) {
                  case 0:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23050);
                   break label$1;
                  default:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23062);
                   break label$1;
                  case 3:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23083);
                   break label$1;
                  case 6:
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23062);
                   break label$1;
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                   break label$1;
                  case 7:
                   break label$54;
                  }
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23094);
                 break label$1;
                case 15:
                 if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 117) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23105);
                 break label$1;
                case 16:
                 label$59 : {
                  label$60 : {
                   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                   if (($1 | 0) != 77) {
                    if (($1 | 0) == 83) {
                     break label$59;
                    }
                    if (($1 | 0) == 115) {
                     break label$60;
                    }
                    if (($1 | 0) != 109) {
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23115);
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23125);
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23136);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23147);
                 break label$1;
                case 17:
                 if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 115) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                 $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23159);
                 break label$1;
                case 0:
                case 4:
                case 6:
                case 8:
                case 9:
                case 18:
                case 19:
                 break label$1;
                case 20:
                 break label$15;
                }
               }
               if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) + -48 >>> 0 > 9) {
                break label$1;
               }
               HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
               $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
               HEAP32[$4 + 24 >> 2] = $1;
               if (!$1) {
                break label$1;
               }
               $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4 + 24 | 0);
               break label$1;
              }
              label$62 : {
               switch ($3 - 1 | 0) {
               case 0:
               case 1:
                break label$1;
               case 2:
                break label$2;
               default:
                break label$62;
               }
              }
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
              $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22680);
              break label$1;
             }
             switch ($3 - 1 | 0) {
             case 0:
             case 1:
             case 2:
              break label$1;
             case 3:
              break label$4;
             default:
              break label$3;
             }
            }
            switch ($3 - 1 | 0) {
            case 0:
            case 1:
            case 2:
             break label$1;
            case 3:
             break label$6;
            default:
             break label$5;
            }
           }
           switch ($3 - 1 | 0) {
           case 0:
           case 1:
            break label$1;
           case 2:
            break label$8;
           case 3:
            break label$9;
           default:
            break label$7;
           }
          }
          label$63 : {
           switch ($3 - 1 | 0) {
           case 5:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22926);
            break label$1;
           case 3:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22984);
            break label$1;
           case 0:
           case 1:
           case 2:
           case 4:
            break label$1;
           default:
            break label$63;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22969);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22958);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22771);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22926);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
      HEAP32[$4 + 24 >> 2] = $1;
      if (!$1) {
       break label$1;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $4 + 24 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22882);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22771);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22753);
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 22691);
 }
 global$0 = $4 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = 0;
 $4 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
            $3 = $1 + -65 | 0;
            if ($3 >>> 0 > 57) {
             break label$11;
            }
            label$12 : {
             switch ($3 - 1 | 0) {
             case 9:
             case 20:
             case 48:
              $3 = ($1 | 0) == 114;
              $3 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $3) | 0) == 86 ? $3 ? 2 : 1 : $3;
              $1 = (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $3) | 0) == 75) + $3 | 0;
              $3 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $1) & 255) + -68 | 0;
              if ($3 >>> 0 > 2) {
               break label$6;
              }
              label$46 : {
               switch ($3 - 1 | 0) {
               case 1:
                break label$5;
               case 0:
                break label$6;
               default:
                break label$46;
               }
              }
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $1 + 1 | 0) & 255;
              $3 = $1 + -111 | 0;
              if ($3 >>> 0 > 9 | !(1 << $3 & 769)) {
               break label$7;
              }
              break label$5;
             case 52:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27196);
              break label$1;
             case 53:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 20527);
              break label$1;
             case 32:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27201);
              break label$1;
             case 33:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20543);
              break label$1;
             case 31:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20548);
              break label$1;
             case 38:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20560);
              break label$1;
             case 49:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20574);
              break label$1;
             case 50:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20580);
              break label$1;
             case 39:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27206);
              break label$1;
             case 40:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27210);
              break label$1;
             case 42:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27223);
              break label$1;
             case 43:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27228);
              break label$1;
             case 54:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27242);
              break label$1;
             case 55:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 27252);
              break label$1;
             case 44:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20610);
              break label$1;
             case 45:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20619);
              break label$1;
             case 36:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27271);
              break label$1;
             case 34:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 27277);
              break label$1;
             case 35:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27284);
              break label$1;
             case 37:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27296);
              break label$1;
             case 56:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 21764);
              break label$1;
             case 51:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($2 + 16 | 0, $0);
              $1 = 0;
              if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($2 + 16 | 0)) {
               break label$1;
              }
              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $2 + 16 | 0);
              break label$1;
             case 2:
              $1 = 0;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) + -79 | 0;
              if ($3 >>> 0 > 41) {
               break label$1;
              }
              label$47 : {
               switch ($3 - 1 | 0) {
               case 20:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27307);
                break label$1;
               case 21:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27317);
                break label$1;
               case 22:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27328);
                break label$1;
               case 24:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27338);
                break label$1;
               case 25:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27348);
                break label$1;
               case 35:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27357);
                break label$1;
               case 17:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20175);
                break label$1;
               case 19:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27366);
                break label$1;
               case 30:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27381);
                break label$1;
               case 4:
               case 36:
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0);
                break label$4;
               case 38:
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($0);
                break label$4;
               case 32:
                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
                HEAP32[$2 + 16 >> 2] = $4;
                if (!$4) {
                 break label$1;
                }
                wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
                break label$3;
               case 0:
               case 1:
               case 2:
               case 3:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
               case 16:
               case 18:
               case 23:
               case 26:
               case 27:
               case 28:
               case 29:
               case 33:
               case 34:
               case 37:
                break label$1;
               default:
                break label$47;
               }
              }
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
              break label$4;
             case 4:
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
              break label$4;
             default:
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($0);
              break label$4;
             case 11:
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($0);
              break label$4;
             case 18:
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) & 255;
              $3 = $1 + -115 | 0;
              if ($3 >>> 0 <= 2) {
               break label$10;
              }
              if (($1 | 0) != 101) {
               break label$9;
              }
              break label$8;
             case 14:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $4;
              if (!$4) {
               break label$2;
              }
              wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$3;
             case 16:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $4;
              if (!$4) {
               break label$2;
              }
              HEAP32[$2 + 12 >> 2] = 0;
              wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $2 + 16 | 0, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$3;
             case 13:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $4;
              if (!$4) {
               break label$2;
              }
              HEAP32[$2 + 12 >> 2] = 1;
              wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $2 + 16 | 0, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$3;
             case 1:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $4;
              if (!$4) {
               break label$2;
              }
              wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0 + 368 | 0, $2 + 16 | 0, 27396), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$3;
             case 5:
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
              HEAP32[$2 + 16 >> 2] = $4;
              if (!$4) {
               break label$2;
              }
              wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0 + 368 | 0, $2 + 16 | 0, 27405), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$3;
             case 0:
             case 3:
             case 6:
             case 7:
             case 8:
             case 10:
             case 12:
             case 15:
             case 21:
             case 22:
             case 23:
             case 24:
             case 25:
             case 26:
             case 27:
             case 28:
             case 29:
             case 30:
             case 41:
             case 46:
             case 47:
              break label$11;
             case 17:
              break label$12;
             case 19:
              break label$6;
             }
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
            if (!$3 | ($3 & 255) == 116) {
             break label$11;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
            HEAP32[$2 + 16 >> 2] = $1;
            if (!$1 | !HEAPU8[$0 + 360 | 0]) {
             break label$1;
            }
            if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
             break label$1;
            }
            $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
            HEAP32[$2 + 12 >> 2] = $4;
            if (!$4) {
             break label$2;
            }
            wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 16 | 0, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
            break label$3;
           }
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0);
           break label$4;
          }
          if ($3 - 1) {
           break label$8;
          }
         }
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
         HEAP32[$2 + 28 >> 2] = $4;
         if (!$4) {
          break label$2;
         }
         if (!HEAPU8[$0 + 360 | 0]) {
          break label$3;
         }
         if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
          break label$3;
         }
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
         HEAP32[$2 + 16 >> 2] = $4;
         if (!$4) {
          break label$2;
         }
         wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 28 | 0, $2 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
         break label$3;
        }
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0);
        break label$4;
       }
       if (($1 | 0) == 79) {
        break label$5;
       }
      }
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
      break label$4;
     }
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0);
    }
    HEAP32[$4 + 28 >> 2] = $3;
    if (!$3) {
     break label$2;
    }
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 28 | 0);
   $1 = HEAP32[$2 + 28 >> 2];
   break label$1;
  }
  $1 = 0;
 }
 global$0 = $2 + 32 | 0;
 return $1;
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $12 = global$0 - 16 | 0;
 global$0 = $12;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($0 >>> 0 <= 244) {
      $4 = HEAP32[8380];
      $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
      $0 = $6 >>> 3;
      $1 = $4 >>> $0;
      if ($1 & 3) {
       $2 = $0 + (($1 ^ -1) & 1) | 0;
       $3 = $2 << 3;
       $1 = HEAP32[$3 + 33568 >> 2];
       $0 = HEAP32[$1 + 8 >> 2];
       $3 = $3 + 33560 | 0;
       label$7 : {
        if (($0 | 0) == ($3 | 0)) {
         wasm2js_i32$0 = 33520, wasm2js_i32$1 = __wasm_rotl_i32($2) & $4, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$7;
        }
        if (($1 | 0) != HEAP32[$0 + 12 >> 2] | HEAPU32[8384] > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       $0 = $1 + 8 | 0;
       $2 = $2 << 3;
       HEAP32[$1 + 4 >> 2] = $2 | 3;
       $1 = $1 + $2 | 0;
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
       break label$1;
      }
      $9 = HEAP32[8382];
      if ($6 >>> 0 <= $9 >>> 0) {
       break label$4;
      }
      if ($1) {
       $2 = 2 << $0;
       $0 = (0 - $2 | $2) & $1 << $0;
       $0 = (0 - $0 & $0) + -1 | 0;
       $1 = $0 >>> 12 & 16;
       $2 = $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 5 & 8;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 2 & 4;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 1 & 2;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 1 & 1;
       $2 = ($2 | $1) + ($0 >>> $1) | 0;
       $3 = $2 << 3;
       $1 = HEAP32[$3 + 33568 >> 2];
       $0 = HEAP32[$1 + 8 >> 2];
       $3 = $3 + 33560 | 0;
       label$10 : {
        if (($0 | 0) == ($3 | 0)) {
         $4 = __wasm_rotl_i32($2) & $4;
         HEAP32[8380] = $4;
         break label$10;
        }
        if (($1 | 0) != HEAP32[$0 + 12 >> 2] | HEAPU32[8384] > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       HEAP32[$1 + 4 >> 2] = $6 | 3;
       $7 = $1 + $6 | 0;
       $0 = $2 << 3;
       $3 = $0 - $6 | 0;
       HEAP32[$7 + 4 >> 2] = $3 | 1;
       HEAP32[$0 + $1 >> 2] = $3;
       if ($9) {
        $5 = $9 >>> 3;
        $0 = ($5 << 3) + 33560 | 0;
        $2 = HEAP32[8385];
        $5 = 1 << $5;
        label$13 : {
         if (!($5 & $4)) {
          HEAP32[8380] = $5 | $4;
          $5 = $0;
          break label$13;
         }
         $5 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[8384] > $5 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $2;
        HEAP32[$5 + 12 >> 2] = $2;
        HEAP32[$2 + 12 >> 2] = $0;
        HEAP32[$2 + 8 >> 2] = $5;
       }
       $0 = $1 + 8 | 0;
       HEAP32[8385] = $7;
       HEAP32[8382] = $3;
       break label$1;
      }
      $10 = HEAP32[8381];
      if (!$10) {
       break label$4;
      }
      $0 = ($10 & 0 - $10) + -1 | 0;
      $1 = $0 >>> 12 & 16;
      $2 = $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 5 & 8;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 2 & 4;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 1 & 2;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 1 & 1;
      $1 = HEAP32[(($2 | $1) + ($0 >>> $1) << 2) + 33824 >> 2];
      $3 = (HEAP32[$1 + 4 >> 2] & -8) - $6 | 0;
      $2 = $1;
      while (1) {
       label$16 : {
        $0 = HEAP32[$2 + 16 >> 2];
        if (!$0) {
         $0 = HEAP32[$2 + 20 >> 2];
         if (!$0) {
          break label$16;
         }
        }
        $5 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
        $2 = $5 >>> 0 < $3 >>> 0;
        $3 = $2 ? $5 : $3;
        $1 = $2 ? $0 : $1;
        $2 = $0;
        continue;
       }
       break;
      }
      $13 = HEAP32[8384];
      if ($13 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      $11 = $1 + $6 | 0;
      if ($11 >>> 0 <= $1 >>> 0) {
       break label$3;
      }
      $8 = HEAP32[$1 + 24 >> 2];
      $5 = HEAP32[$1 + 12 >> 2];
      label$18 : {
       if (($5 | 0) != ($1 | 0)) {
        $0 = HEAP32[$1 + 8 >> 2];
        if ($13 >>> 0 > $0 >>> 0 | HEAP32[$0 + 12 >> 2] != ($1 | 0) | HEAP32[$5 + 8 >> 2] != ($1 | 0)) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $5;
        HEAP32[$5 + 8 >> 2] = $0;
        break label$18;
       }
       label$20 : {
        $2 = $1 + 20 | 0;
        $0 = HEAP32[$2 >> 2];
        if (!$0) {
         $0 = HEAP32[$1 + 16 >> 2];
         if (!$0) {
          break label$20;
         }
         $2 = $1 + 16 | 0;
        }
        while (1) {
         $7 = $2;
         $5 = $0;
         $2 = $0 + 20 | 0;
         $0 = HEAP32[$2 >> 2];
         if ($0) {
          continue;
         }
         $2 = $5 + 16 | 0;
         $0 = HEAP32[$5 + 16 >> 2];
         if ($0) {
          continue;
         }
         break;
        }
        if ($13 >>> 0 > $7 >>> 0) {
         break label$3;
        }
        HEAP32[$7 >> 2] = 0;
        break label$18;
       }
       $5 = 0;
      }
      label$23 : {
       if (!$8) {
        break label$23;
       }
       $0 = HEAP32[$1 + 28 >> 2];
       $2 = ($0 << 2) + 33824 | 0;
       label$24 : {
        if (HEAP32[$2 >> 2] == ($1 | 0)) {
         HEAP32[$2 >> 2] = $5;
         if ($5) {
          break label$24;
         }
         wasm2js_i32$0 = 33524, wasm2js_i32$1 = __wasm_rotl_i32($0) & $10, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$23;
        }
        if (HEAPU32[8384] > $8 >>> 0) {
         break label$3;
        }
        HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $5;
        if (!$5) {
         break label$23;
        }
       }
       $2 = HEAP32[8384];
       if ($2 >>> 0 > $5 >>> 0) {
        break label$3;
       }
       HEAP32[$5 + 24 >> 2] = $8;
       $0 = HEAP32[$1 + 16 >> 2];
       if ($0) {
        if ($2 >>> 0 > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$5 + 16 >> 2] = $0;
        HEAP32[$0 + 24 >> 2] = $5;
       }
       $0 = HEAP32[$1 + 20 >> 2];
       if (!$0) {
        break label$23;
       }
       if (HEAPU32[8384] > $0 >>> 0) {
        break label$3;
       }
       HEAP32[$5 + 20 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $5;
      }
      label$27 : {
       if ($3 >>> 0 <= 15) {
        $0 = $3 + $6 | 0;
        HEAP32[$1 + 4 >> 2] = $0 | 3;
        $0 = $0 + $1 | 0;
        HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
        break label$27;
       }
       HEAP32[$1 + 4 >> 2] = $6 | 3;
       HEAP32[$11 + 4 >> 2] = $3 | 1;
       HEAP32[$3 + $11 >> 2] = $3;
       if ($9) {
        $5 = $9 >>> 3;
        $0 = ($5 << 3) + 33560 | 0;
        $2 = HEAP32[8385];
        $5 = 1 << $5;
        label$30 : {
         if (!($5 & $4)) {
          HEAP32[8380] = $5 | $4;
          $6 = $0;
          break label$30;
         }
         $6 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[8384] > $6 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $2;
        HEAP32[$6 + 12 >> 2] = $2;
        HEAP32[$2 + 12 >> 2] = $0;
        HEAP32[$2 + 8 >> 2] = $6;
       }
       HEAP32[8385] = $11;
       HEAP32[8382] = $3;
      }
      $0 = $1 + 8 | 0;
      break label$1;
     }
     $6 = -1;
     if ($0 >>> 0 > 4294967231) {
      break label$4;
     }
     $1 = $0 + 11 | 0;
     $6 = $1 & -8;
     $8 = HEAP32[8381];
     if (!$8) {
      break label$4;
     }
     $2 = 0 - $6 | 0;
     $1 = $1 >>> 8;
     $4 = 0;
     label$35 : {
      if (!$1) {
       break label$35;
      }
      $4 = 31;
      if ($6 >>> 0 > 16777215) {
       break label$35;
      }
      $3 = $1 + 1048320 >>> 16 & 8;
      $1 = $1 << $3;
      $0 = $1 + 520192 >>> 16 & 4;
      $4 = $1 << $0;
      $1 = $4 + 245760 >>> 16 & 2;
      $0 = ($4 << $1 >>> 15) - ($1 | ($0 | $3)) | 0;
      $4 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
     }
     $3 = HEAP32[($4 << 2) + 33824 >> 2];
     label$32 : {
      label$33 : {
       label$34 : {
        if (!$3) {
         $0 = 0;
         break label$34;
        }
        $1 = $6 << (($4 | 0) == 31 ? 0 : 25 - ($4 >>> 1) | 0);
        $0 = 0;
        while (1) {
         label$38 : {
          $7 = (HEAP32[$3 + 4 >> 2] & -8) - $6 | 0;
          if ($7 >>> 0 >= $2 >>> 0) {
           break label$38;
          }
          $5 = $3;
          $2 = $7;
          if ($2) {
           break label$38;
          }
          $2 = 0;
          $0 = $3;
          break label$33;
         }
         $7 = HEAP32[$3 + 20 >> 2];
         $3 = HEAP32[(($1 >>> 29 & 4) + $3 | 0) + 16 >> 2];
         $0 = $7 ? ($7 | 0) == ($3 | 0) ? $0 : $7 : $0;
         $1 = $1 << (($3 | 0) != 0);
         if ($3) {
          continue;
         }
         break;
        }
       }
       if (!($0 | $5)) {
        $0 = 2 << $4;
        $0 = (0 - $0 | $0) & $8;
        if (!$0) {
         break label$4;
        }
        $0 = ($0 & 0 - $0) + -1 | 0;
        $1 = $0 >>> 12 & 16;
        $3 = $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 5 & 8;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 2 & 4;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 1 & 2;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 1 & 1;
        $0 = HEAP32[(($3 | $1) + ($0 >>> $1) << 2) + 33824 >> 2];
       }
       if (!$0) {
        break label$32;
       }
      }
      while (1) {
       $3 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
       $1 = $3 >>> 0 < $2 >>> 0;
       $2 = $1 ? $3 : $2;
       $5 = $1 ? $0 : $5;
       $1 = HEAP32[$0 + 16 >> 2];
       if ($1) {
        $0 = $1;
       } else {
        $0 = HEAP32[$0 + 20 >> 2];
       }
       if ($0) {
        continue;
       }
       break;
      }
     }
     if (!$5 | $2 >>> 0 >= HEAP32[8382] - $6 >>> 0) {
      break label$4;
     }
     $10 = HEAP32[8384];
     if ($10 >>> 0 > $5 >>> 0) {
      break label$3;
     }
     $4 = $5 + $6 | 0;
     if ($4 >>> 0 <= $5 >>> 0) {
      break label$3;
     }
     $9 = HEAP32[$5 + 24 >> 2];
     $1 = HEAP32[$5 + 12 >> 2];
     label$43 : {
      if (($5 | 0) != ($1 | 0)) {
       $0 = HEAP32[$5 + 8 >> 2];
       if ($10 >>> 0 > $0 >>> 0 | HEAP32[$0 + 12 >> 2] != ($5 | 0) | HEAP32[$1 + 8 >> 2] != ($5 | 0)) {
        break label$3;
       }
       HEAP32[$0 + 12 >> 2] = $1;
       HEAP32[$1 + 8 >> 2] = $0;
       break label$43;
      }
      label$45 : {
       $3 = $5 + 20 | 0;
       $0 = HEAP32[$3 >> 2];
       if (!$0) {
        $0 = HEAP32[$5 + 16 >> 2];
        if (!$0) {
         break label$45;
        }
        $3 = $5 + 16 | 0;
       }
       while (1) {
        $7 = $3;
        $1 = $0;
        $3 = $0 + 20 | 0;
        $0 = HEAP32[$3 >> 2];
        if ($0) {
         continue;
        }
        $3 = $1 + 16 | 0;
        $0 = HEAP32[$1 + 16 >> 2];
        if ($0) {
         continue;
        }
        break;
       }
       if ($10 >>> 0 > $7 >>> 0) {
        break label$3;
       }
       HEAP32[$7 >> 2] = 0;
       break label$43;
      }
      $1 = 0;
     }
     label$48 : {
      if (!$9) {
       break label$48;
      }
      $0 = HEAP32[$5 + 28 >> 2];
      $3 = ($0 << 2) + 33824 | 0;
      label$49 : {
       if (HEAP32[$3 >> 2] == ($5 | 0)) {
        HEAP32[$3 >> 2] = $1;
        if ($1) {
         break label$49;
        }
        $8 = __wasm_rotl_i32($0) & $8;
        HEAP32[8381] = $8;
        break label$48;
       }
       if (HEAPU32[8384] > $9 >>> 0) {
        break label$3;
       }
       HEAP32[$9 + (HEAP32[$9 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $1;
       if (!$1) {
        break label$48;
       }
      }
      $3 = HEAP32[8384];
      if ($3 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      HEAP32[$1 + 24 >> 2] = $9;
      $0 = HEAP32[$5 + 16 >> 2];
      if ($0) {
       if ($3 >>> 0 > $0 >>> 0) {
        break label$3;
       }
       HEAP32[$1 + 16 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $1;
      }
      $0 = HEAP32[$5 + 20 >> 2];
      if (!$0) {
       break label$48;
      }
      if (HEAPU32[8384] > $0 >>> 0) {
       break label$3;
      }
      HEAP32[$1 + 20 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1;
     }
     label$52 : {
      if ($2 >>> 0 <= 15) {
       $0 = $2 + $6 | 0;
       HEAP32[$5 + 4 >> 2] = $0 | 3;
       $0 = $0 + $5 | 0;
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
       break label$52;
      }
      HEAP32[$5 + 4 >> 2] = $6 | 3;
      HEAP32[$4 + 4 >> 2] = $2 | 1;
      HEAP32[$2 + $4 >> 2] = $2;
      if ($2 >>> 0 <= 255) {
       $1 = $2 >>> 3;
       $0 = ($1 << 3) + 33560 | 0;
       $2 = HEAP32[8380];
       $1 = 1 << $1;
       label$55 : {
        if (!($2 & $1)) {
         HEAP32[8380] = $1 | $2;
         $3 = $0;
         break label$55;
        }
        $3 = HEAP32[$0 + 8 >> 2];
        if (HEAPU32[8384] > $3 >>> 0) {
         break label$3;
        }
       }
       HEAP32[$0 + 8 >> 2] = $4;
       HEAP32[$3 + 12 >> 2] = $4;
       HEAP32[$4 + 12 >> 2] = $0;
       HEAP32[$4 + 8 >> 2] = $3;
       break label$52;
      }
      $1 = $4;
      $3 = $2 >>> 8;
      $0 = 0;
      label$57 : {
       if (!$3) {
        break label$57;
       }
       $0 = 31;
       if ($2 >>> 0 > 16777215) {
        break label$57;
       }
       $6 = $3 + 1048320 >>> 16 & 8;
       $3 = $3 << $6;
       $0 = $3 + 520192 >>> 16 & 4;
       $7 = $3 << $0;
       $3 = $7 + 245760 >>> 16 & 2;
       $0 = ($7 << $3 >>> 15) - ($3 | ($0 | $6)) | 0;
       $0 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
      }
      HEAP32[$1 + 28 >> 2] = $0;
      HEAP32[$4 + 16 >> 2] = 0;
      HEAP32[$4 + 20 >> 2] = 0;
      $1 = ($0 << 2) + 33824 | 0;
      label$58 : {
       $3 = 1 << $0;
       label$59 : {
        if (!($3 & $8)) {
         HEAP32[8381] = $3 | $8;
         HEAP32[$1 >> 2] = $4;
         break label$59;
        }
        $0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
        $6 = HEAP32[$1 >> 2];
        while (1) {
         $1 = $6;
         if ((HEAP32[$1 + 4 >> 2] & -8) == ($2 | 0)) {
          break label$58;
         }
         $3 = $0 >>> 29;
         $0 = $0 << 1;
         $3 = (($3 & 4) + $1 | 0) + 16 | 0;
         $6 = HEAP32[$3 >> 2];
         if ($6) {
          continue;
         }
         break;
        }
        if (HEAPU32[8384] > $3 >>> 0) {
         break label$3;
        }
        HEAP32[$3 >> 2] = $4;
       }
       HEAP32[$4 + 24 >> 2] = $1;
       HEAP32[$4 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $4;
       break label$52;
      }
      $2 = HEAP32[8384];
      $0 = HEAP32[$1 + 8 >> 2];
      if ($2 >>> 0 > $0 >>> 0 | $2 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      HEAP32[$0 + 12 >> 2] = $4;
      HEAP32[$1 + 8 >> 2] = $4;
      HEAP32[$4 + 24 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = $1;
      HEAP32[$4 + 8 >> 2] = $0;
     }
     $0 = $5 + 8 | 0;
     break label$1;
    }
    $1 = HEAP32[8382];
    if ($1 >>> 0 >= $6 >>> 0) {
     $0 = HEAP32[8385];
     $2 = $1 - $6 | 0;
     label$63 : {
      if ($2 >>> 0 >= 16) {
       HEAP32[8382] = $2;
       $3 = $0 + $6 | 0;
       HEAP32[8385] = $3;
       HEAP32[$3 + 4 >> 2] = $2 | 1;
       HEAP32[$0 + $1 >> 2] = $2;
       HEAP32[$0 + 4 >> 2] = $6 | 3;
       break label$63;
      }
      HEAP32[8385] = 0;
      HEAP32[8382] = 0;
      HEAP32[$0 + 4 >> 2] = $1 | 3;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     }
     $0 = $0 + 8 | 0;
     break label$1;
    }
    $3 = HEAP32[8383];
    if ($3 >>> 0 > $6 >>> 0) {
     $1 = $3 - $6 | 0;
     HEAP32[8383] = $1;
     $0 = HEAP32[8386];
     $2 = $0 + $6 | 0;
     HEAP32[8386] = $2;
     HEAP32[$2 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $6 | 3;
     $0 = $0 + 8 | 0;
     break label$1;
    }
    $0 = 0;
    $5 = $6 + 47 | 0;
    $2 = $5;
    if (HEAP32[8498]) {
     $1 = HEAP32[8500];
    } else {
     HEAP32[8501] = -1;
     HEAP32[8502] = -1;
     HEAP32[8499] = 4096;
     HEAP32[8500] = 4096;
     HEAP32[8498] = $12 + 12 & -16 ^ 1431655768;
     HEAP32[8503] = 0;
     HEAP32[8491] = 0;
     $1 = 4096;
    }
    $4 = $2 + $1 | 0;
    $7 = 0 - $1 | 0;
    $2 = $4 & $7;
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$1;
    }
    $1 = HEAP32[8490];
    if ($1) {
     $8 = HEAP32[8488];
     $9 = $8 + $2 | 0;
     if ($9 >>> 0 <= $8 >>> 0 | $9 >>> 0 > $1 >>> 0) {
      break label$1;
     }
    }
    label$69 : {
     if (!(HEAPU8[33964] & 4)) {
      label$71 : {
       label$72 : {
        label$73 : {
         label$74 : {
          $1 = HEAP32[8386];
          if ($1) {
           $0 = 33968;
           while (1) {
            $8 = HEAP32[$0 >> 2];
            if ($8 + HEAP32[$0 + 4 >> 2] >>> 0 > $1 >>> 0 ? $8 >>> 0 <= $1 >>> 0 : 0) {
             break label$74;
            }
            $0 = HEAP32[$0 + 8 >> 2];
            if ($0) {
             continue;
            }
            break;
           }
          }
          $1 = sbrk(0);
          if (($1 | 0) == -1) {
           break label$71;
          }
          $4 = $2;
          $0 = HEAP32[8499];
          $3 = $0 + -1 | 0;
          if ($3 & $1) {
           $4 = ($2 - $1 | 0) + ($1 + $3 & 0 - $0) | 0;
          }
          if ($4 >>> 0 <= $6 >>> 0 | $4 >>> 0 > 2147483646) {
           break label$71;
          }
          $0 = HEAP32[8490];
          if ($0) {
           $3 = HEAP32[8488];
           $7 = $3 + $4 | 0;
           if ($7 >>> 0 <= $3 >>> 0 | $7 >>> 0 > $0 >>> 0) {
            break label$71;
           }
          }
          $0 = sbrk($4);
          if (($1 | 0) != ($0 | 0)) {
           break label$73;
          }
          break label$69;
         }
         $4 = $7 & $4 - $3;
         if ($4 >>> 0 > 2147483646) {
          break label$71;
         }
         $1 = sbrk($4);
         if (($1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
          break label$72;
         }
         $0 = $1;
        }
        $1 = $0;
        if (!($6 + 48 >>> 0 <= $4 >>> 0 | $4 >>> 0 > 2147483646 | ($0 | 0) == -1)) {
         $0 = HEAP32[8500];
         $0 = $0 + ($5 - $4 | 0) & 0 - $0;
         if ($0 >>> 0 > 2147483646) {
          break label$69;
         }
         if ((sbrk($0) | 0) != -1) {
          $4 = $0 + $4 | 0;
          break label$69;
         }
         sbrk(0 - $4 | 0);
         break label$71;
        }
        if (($1 | 0) != -1) {
         break label$69;
        }
        break label$71;
       }
       if (($1 | 0) != -1) {
        break label$69;
       }
      }
      HEAP32[8491] = HEAP32[8491] | 4;
     }
     if ($2 >>> 0 > 2147483646) {
      break label$2;
     }
     $1 = sbrk($2);
     $0 = sbrk(0);
     if ($1 >>> 0 >= $0 >>> 0 | ($1 | 0) == -1 | ($0 | 0) == -1) {
      break label$2;
     }
     $4 = $0 - $1 | 0;
     if ($4 >>> 0 <= $6 + 40 >>> 0) {
      break label$2;
     }
    }
    $0 = HEAP32[8488] + $4 | 0;
    HEAP32[8488] = $0;
    if ($0 >>> 0 > HEAPU32[8489]) {
     HEAP32[8489] = $0;
    }
    label$83 : {
     label$84 : {
      label$85 : {
       $3 = HEAP32[8386];
       if ($3) {
        $0 = 33968;
        while (1) {
         $2 = HEAP32[$0 >> 2];
         $5 = HEAP32[$0 + 4 >> 2];
         if (($2 + $5 | 0) == ($1 | 0)) {
          break label$85;
         }
         $0 = HEAP32[$0 + 8 >> 2];
         if ($0) {
          continue;
         }
         break;
        }
        break label$84;
       }
       $0 = HEAP32[8384];
       if (!($1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
        HEAP32[8384] = $1;
       }
       $0 = 0;
       HEAP32[8493] = $4;
       HEAP32[8492] = $1;
       HEAP32[8388] = -1;
       HEAP32[8389] = HEAP32[8498];
       HEAP32[8495] = 0;
       while (1) {
        $2 = $0 << 3;
        $3 = $2 + 33560 | 0;
        HEAP32[$2 + 33568 >> 2] = $3;
        HEAP32[$2 + 33572 >> 2] = $3;
        $0 = $0 + 1 | 0;
        if (($0 | 0) != 32) {
         continue;
        }
        break;
       }
       $0 = $4 + -40 | 0;
       $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
       $3 = $0 - $2 | 0;
       HEAP32[8383] = $3;
       $2 = $1 + $2 | 0;
       HEAP32[8386] = $2;
       HEAP32[$2 + 4 >> 2] = $3 | 1;
       HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
       HEAP32[8387] = HEAP32[8502];
       break label$83;
      }
      if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 <= $3 >>> 0 | $2 >>> 0 > $3 >>> 0) {
       break label$84;
      }
      HEAP32[$0 + 4 >> 2] = $5 + $4;
      $0 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
      $1 = $0 + $3 | 0;
      HEAP32[8386] = $1;
      $2 = HEAP32[8383] + $4 | 0;
      $0 = $2 - $0 | 0;
      HEAP32[8383] = $0;
      HEAP32[$1 + 4 >> 2] = $0 | 1;
      HEAP32[($2 + $3 | 0) + 4 >> 2] = 40;
      HEAP32[8387] = HEAP32[8502];
      break label$83;
     }
     $5 = HEAP32[8384];
     if ($1 >>> 0 < $5 >>> 0) {
      HEAP32[8384] = $1;
      $5 = $1;
     }
     $2 = $1 + $4 | 0;
     $0 = 33968;
     label$91 : {
      label$92 : {
       label$93 : {
        while (1) {
         if (($2 | 0) != HEAP32[$0 >> 2]) {
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break label$93;
         }
         break;
        }
        if (!(HEAPU8[$0 + 12 | 0] & 8)) {
         break label$92;
        }
       }
       $0 = 33968;
       while (1) {
        $2 = HEAP32[$0 >> 2];
        if ($2 >>> 0 <= $3 >>> 0) {
         $5 = $2 + HEAP32[$0 + 4 >> 2] | 0;
         if ($5 >>> 0 > $3 >>> 0) {
          break label$91;
         }
        }
        $0 = HEAP32[$0 + 8 >> 2];
        continue;
       }
      }
      HEAP32[$0 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $4;
      $9 = ($1 + 8 & 7 ? -8 - $1 & 7 : 0) + $1 | 0;
      HEAP32[$9 + 4 >> 2] = $6 | 3;
      $1 = $2 + ($2 + 8 & 7 ? -8 - $2 & 7 : 0) | 0;
      $0 = ($1 - $9 | 0) - $6 | 0;
      $7 = $6 + $9 | 0;
      label$98 : {
       if (($1 | 0) == ($3 | 0)) {
        HEAP32[8386] = $7;
        $0 = HEAP32[8383] + $0 | 0;
        HEAP32[8383] = $0;
        HEAP32[$7 + 4 >> 2] = $0 | 1;
        break label$98;
       }
       if (HEAP32[8385] == ($1 | 0)) {
        HEAP32[8385] = $7;
        $0 = HEAP32[8382] + $0 | 0;
        HEAP32[8382] = $0;
        HEAP32[$7 + 4 >> 2] = $0 | 1;
        HEAP32[$0 + $7 >> 2] = $0;
        break label$98;
       }
       $10 = HEAP32[$1 + 4 >> 2];
       if (($10 & 3) == 1) {
        label$102 : {
         if ($10 >>> 0 <= 255) {
          $2 = HEAP32[$1 + 12 >> 2];
          $3 = HEAP32[$1 + 8 >> 2];
          $6 = $10 >>> 3;
          $4 = ($6 << 3) + 33560 | 0;
          if (HEAP32[$3 + 12 >> 2] != ($1 | 0) | $5 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($4 | 0) : 0) {
           break label$3;
          }
          if (($2 | 0) == ($3 | 0)) {
           wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break label$102;
          }
          if (HEAP32[$2 + 8 >> 2] != ($1 | 0) | $5 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($4 | 0) : 0) {
           break label$3;
          }
          HEAP32[$3 + 12 >> 2] = $2;
          HEAP32[$2 + 8 >> 2] = $3;
          break label$102;
         }
         $8 = HEAP32[$1 + 24 >> 2];
         $4 = HEAP32[$1 + 12 >> 2];
         label$107 : {
          if (($4 | 0) != ($1 | 0)) {
           $2 = HEAP32[$1 + 8 >> 2];
           if ($5 >>> 0 > $2 >>> 0 | HEAP32[$2 + 12 >> 2] != ($1 | 0) | HEAP32[$4 + 8 >> 2] != ($1 | 0)) {
            break label$3;
           }
           HEAP32[$2 + 12 >> 2] = $4;
           HEAP32[$4 + 8 >> 2] = $2;
           break label$107;
          }
          label$109 : {
           $3 = $1 + 20 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            break label$109;
           }
           $3 = $1 + 16 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            break label$109;
           }
           $4 = 0;
           break label$107;
          }
          while (1) {
           $2 = $3;
           $4 = $6;
           $3 = $4 + 20 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            continue;
           }
           $3 = $4 + 16 | 0;
           $6 = HEAP32[$4 + 16 >> 2];
           if ($6) {
            continue;
           }
           break;
          }
          if ($5 >>> 0 > $2 >>> 0) {
           break label$3;
          }
          HEAP32[$2 >> 2] = 0;
         }
         if (!$8) {
          break label$102;
         }
         $2 = HEAP32[$1 + 28 >> 2];
         $3 = ($2 << 2) + 33824 | 0;
         label$111 : {
          if (HEAP32[$3 >> 2] == ($1 | 0)) {
           HEAP32[$3 >> 2] = $4;
           if ($4) {
            break label$111;
           }
           wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
           break label$102;
          }
          if (HEAPU32[8384] > $8 >>> 0) {
           break label$3;
          }
          HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $4;
          if (!$4) {
           break label$102;
          }
         }
         $3 = HEAP32[8384];
         if ($3 >>> 0 > $4 >>> 0) {
          break label$3;
         }
         HEAP32[$4 + 24 >> 2] = $8;
         $2 = HEAP32[$1 + 16 >> 2];
         if ($2) {
          if ($3 >>> 0 > $2 >>> 0) {
           break label$3;
          }
          HEAP32[$4 + 16 >> 2] = $2;
          HEAP32[$2 + 24 >> 2] = $4;
         }
         $2 = HEAP32[$1 + 20 >> 2];
         if (!$2) {
          break label$102;
         }
         if (HEAPU32[8384] > $2 >>> 0) {
          break label$3;
         }
         HEAP32[$4 + 20 >> 2] = $2;
         HEAP32[$2 + 24 >> 2] = $4;
        }
        $2 = $10 & -8;
        $0 = $2 + $0 | 0;
        $1 = $1 + $2 | 0;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
       HEAP32[$7 + 4 >> 2] = $0 | 1;
       HEAP32[$0 + $7 >> 2] = $0;
       if ($0 >>> 0 <= 255) {
        $1 = $0 >>> 3;
        $0 = ($1 << 3) + 33560 | 0;
        $2 = HEAP32[8380];
        $1 = 1 << $1;
        label$115 : {
         if (!($2 & $1)) {
          HEAP32[8380] = $1 | $2;
          $3 = $0;
          break label$115;
         }
         $3 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[8384] > $3 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $7;
        HEAP32[$3 + 12 >> 2] = $7;
        HEAP32[$7 + 12 >> 2] = $0;
        HEAP32[$7 + 8 >> 2] = $3;
        break label$98;
       }
       $2 = $7;
       $3 = $0 >>> 8;
       $1 = 0;
       label$117 : {
        if (!$3) {
         break label$117;
        }
        $1 = 31;
        if ($0 >>> 0 > 16777215) {
         break label$117;
        }
        $5 = $3 + 1048320 >>> 16 & 8;
        $3 = $3 << $5;
        $1 = $3 + 520192 >>> 16 & 4;
        $6 = $3 << $1;
        $3 = $6 + 245760 >>> 16 & 2;
        $1 = ($6 << $3 >>> 15) - ($3 | ($1 | $5)) | 0;
        $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
       }
       HEAP32[$2 + 28 >> 2] = $1;
       HEAP32[$7 + 16 >> 2] = 0;
       HEAP32[$7 + 20 >> 2] = 0;
       $2 = ($1 << 2) + 33824 | 0;
       label$118 : {
        $3 = HEAP32[8381];
        $5 = 1 << $1;
        label$119 : {
         if (!($3 & $5)) {
          HEAP32[8381] = $3 | $5;
          HEAP32[$2 >> 2] = $7;
          break label$119;
         }
         $3 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
         $1 = HEAP32[$2 >> 2];
         while (1) {
          $2 = $1;
          if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
           break label$118;
          }
          $1 = $3 >>> 29;
          $3 = $3 << 1;
          $5 = (($1 & 4) + $2 | 0) + 16 | 0;
          $1 = HEAP32[$5 >> 2];
          if ($1) {
           continue;
          }
          break;
         }
         if (HEAPU32[8384] > $5 >>> 0) {
          break label$3;
         }
         HEAP32[$5 >> 2] = $7;
        }
        HEAP32[$7 + 24 >> 2] = $2;
        HEAP32[$7 + 12 >> 2] = $7;
        HEAP32[$7 + 8 >> 2] = $7;
        break label$98;
       }
       $1 = HEAP32[8384];
       $0 = HEAP32[$2 + 8 >> 2];
       if ($1 >>> 0 > $0 >>> 0 | $1 >>> 0 > $2 >>> 0) {
        break label$3;
       }
       HEAP32[$0 + 12 >> 2] = $7;
       HEAP32[$2 + 8 >> 2] = $7;
       HEAP32[$7 + 24 >> 2] = 0;
       HEAP32[$7 + 12 >> 2] = $2;
       HEAP32[$7 + 8 >> 2] = $0;
      }
      $0 = $9 + 8 | 0;
      break label$1;
     }
     $0 = $4 + -40 | 0;
     $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
     $7 = $0 - $2 | 0;
     HEAP32[8383] = $7;
     $2 = $1 + $2 | 0;
     HEAP32[8386] = $2;
     HEAP32[$2 + 4 >> 2] = $7 | 1;
     HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
     HEAP32[8387] = HEAP32[8502];
     $0 = ($5 + ($5 + -39 & 7 ? 39 - $5 & 7 : 0) | 0) + -47 | 0;
     $2 = $0 >>> 0 < $3 + 16 >>> 0 ? $3 : $0;
     HEAP32[$2 + 4 >> 2] = 27;
     $0 = HEAP32[8495];
     HEAP32[$2 + 16 >> 2] = HEAP32[8494];
     HEAP32[$2 + 20 >> 2] = $0;
     $0 = HEAP32[8493];
     HEAP32[$2 + 8 >> 2] = HEAP32[8492];
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[8494] = $2 + 8;
     HEAP32[8493] = $4;
     HEAP32[8492] = $1;
     HEAP32[8495] = 0;
     $0 = $2 + 24 | 0;
     while (1) {
      HEAP32[$0 + 4 >> 2] = 7;
      $1 = $0 + 8 | 0;
      $0 = $0 + 4 | 0;
      if ($1 >>> 0 < $5 >>> 0) {
       continue;
      }
      break;
     }
     if (($2 | 0) == ($3 | 0)) {
      break label$83;
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
     $5 = $2 - $3 | 0;
     HEAP32[$3 + 4 >> 2] = $5 | 1;
     HEAP32[$2 >> 2] = $5;
     if ($5 >>> 0 <= 255) {
      $1 = $5 >>> 3;
      $0 = ($1 << 3) + 33560 | 0;
      $2 = HEAP32[8380];
      $1 = 1 << $1;
      label$124 : {
       if (!($2 & $1)) {
        HEAP32[8380] = $1 | $2;
        $2 = $0;
        break label$124;
       }
       $2 = HEAP32[$0 + 8 >> 2];
       if (HEAPU32[8384] > $2 >>> 0) {
        break label$3;
       }
      }
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 12 >> 2] = $0;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$83;
     }
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 20 >> 2] = 0;
     $1 = $3;
     $2 = $5 >>> 8;
     $0 = 0;
     label$126 : {
      if (!$2) {
       break label$126;
      }
      $0 = 31;
      if ($5 >>> 0 > 16777215) {
       break label$126;
      }
      $4 = $2 + 1048320 >>> 16 & 8;
      $2 = $2 << $4;
      $0 = $2 + 520192 >>> 16 & 4;
      $7 = $2 << $0;
      $2 = $7 + 245760 >>> 16 & 2;
      $0 = ($7 << $2 >>> 15) - ($2 | ($0 | $4)) | 0;
      $0 = ($0 << 1 | $5 >>> $0 + 21 & 1) + 28 | 0;
     }
     HEAP32[$1 + 28 >> 2] = $0;
     $1 = ($0 << 2) + 33824 | 0;
     label$127 : {
      $2 = HEAP32[8381];
      $4 = 1 << $0;
      label$128 : {
       if (!($2 & $4)) {
        HEAP32[8381] = $2 | $4;
        HEAP32[$1 >> 2] = $3;
        HEAP32[$3 + 24 >> 2] = $1;
        break label$128;
       }
       $0 = $5 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
       $1 = HEAP32[$1 >> 2];
       while (1) {
        $2 = $1;
        if (($5 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
         break label$127;
        }
        $1 = $0 >>> 29;
        $0 = $0 << 1;
        $4 = ($2 + ($1 & 4) | 0) + 16 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         continue;
        }
        break;
       }
       if (HEAPU32[8384] > $4 >>> 0) {
        break label$3;
       }
       HEAP32[$4 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2;
      }
      HEAP32[$3 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $3;
      break label$83;
     }
     $1 = HEAP32[8384];
     $0 = HEAP32[$2 + 8 >> 2];
     if ($1 >>> 0 > $0 >>> 0 | $1 >>> 0 > $2 >>> 0) {
      break label$3;
     }
     HEAP32[$0 + 12 >> 2] = $3;
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 12 >> 2] = $2;
     HEAP32[$3 + 8 >> 2] = $0;
    }
    $0 = HEAP32[8383];
    if ($0 >>> 0 <= $6 >>> 0) {
     break label$2;
    }
    $1 = $0 - $6 | 0;
    HEAP32[8383] = $1;
    $0 = HEAP32[8386];
    $2 = $0 + $6 | 0;
    HEAP32[8386] = $2;
    HEAP32[$2 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + 4 >> 2] = $6 | 3;
    $0 = $0 + 8 | 0;
    break label$1;
   }
   abort();
   abort();
  }
  HEAP32[8356] = 48;
  $0 = 0;
 }
 global$0 = $12 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 528 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 102)) {
   break label$1;
  }
  $5 = 1;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
  label$2 : {
   if (($4 | 0) == 76) {
    break label$2;
   }
   $2 = $4 & 255;
   if (($2 | 0) != 114) {
    if (($2 | 0) == 108) {
     break label$2;
    }
    if (($2 | 0) != 82) {
     break label$1;
    }
   }
   $5 = 0;
  }
  HEAP8[$1 + 527 | 0] = $5;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  $5 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 512 | 0);
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 504 | 0, 21440);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 240 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 244 >> 2] = $3;
  label$4 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 240 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20315);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 488 | 0, 21443);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 232 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 236 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 232 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20318);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 480 | 0, 21446);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 224 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 228 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 224 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20320);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 472 | 0, 21449);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 216 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 220 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 216 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20323);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 464 | 0, 21452);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 208 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 212 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 208 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20346);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 456 | 0, 21455);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 200 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 204 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 200 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20365);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 448 | 0, 21458);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 192 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 196 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 192 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20370);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 440 | 0, 21461);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 184 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 188 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 184 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20372);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 432 | 0, 21464);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 176 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 180 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 176 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20375);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 424 | 0, 21467);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 168 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 172 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 168 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20377);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 416 | 0, 21470);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 160 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 164 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 160 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20380);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 408 | 0, 21473);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 152 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 156 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 152 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20383);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 400 | 0, 21476);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 144 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 148 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 144 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20386);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 392 | 0, 21479);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 136 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 140 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 136 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20388);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 384 | 0, 21482);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 128 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 132 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 128 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20391);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 376 | 0, 21485);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 120 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 124 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 120 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20394);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 368 | 0, 21488);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 112 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 116 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 112 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20398);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 360 | 0, 21491);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 104 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 108 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 104 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20400);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 352 | 0, 21494);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 96 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 100 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 96 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20402);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 344 | 0, 21497);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 88 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 92 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 88 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20363);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 336 | 0, 21500);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 80 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 84 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 80 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20405);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 328 | 0, 21503);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 72 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 76 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 72 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20411);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 320 | 0, 21506);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 64 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 68 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 - -64 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20427);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 312 | 0, 21509);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 60 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 56 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20430);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 304 | 0, 21512);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 52 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20432);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 296 | 0, 21515);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 44 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20439);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 288 | 0, 21518);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 36 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20441);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 280 | 0, 21521);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 28 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20467);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 272 | 0, 21524);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 20 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20469);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 264 | 0, 21527);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 12 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
    $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20472);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 256 | 0, 21530);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
    break label$1;
   }
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 496 | 0, 20475);
  }
  $2 = HEAP32[$1 + 500 >> 2];
  HEAP32[$1 + 512 >> 2] = HEAP32[$1 + 496 >> 2];
  HEAP32[$1 + 516 >> 2] = $2;
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 496 >> 2] = $2;
  HEAP32[$1 + 252 >> 2] = 0;
  if (!$2) {
   break label$1;
  }
  label$35 : {
   if (($4 & 255) != 76 ? ($4 | 0) != 82 : 0) {
    break label$35;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   HEAP32[$1 + 252 >> 2] = $4;
   if (!$4) {
    break label$1;
   }
   if (!HEAPU8[$1 + 527 | 0]) {
    break label$35;
   }
   std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($1 + 496 | 0, $1 + 252 | 0);
  }
  $6 = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 527 | 0, $5, $1 + 496 | 0, $1 + 252 | 0);
 }
 global$0 = $1 + 528 | 0;
 return $6;
}
function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 $13 = global$0 - 192 | 0;
 global$0 = $13;
 $28 = $7;
 $31 = $8 & 65535;
 $22 = $3;
 $17 = $4 & 65535;
 $29 = ($4 ^ $8) & -2147483648;
 $11 = $8 >>> 16 & 32767;
 label$1 : {
  $14 = $4 >>> 16 & 32767;
  label$2 : {
   label$3 : {
    if ($11 + -1 >>> 0 < 32766 ? $14 + -1 >>> 0 <= 32765 : 0) {
     break label$3;
    }
    $12 = $4 & 2147483647;
    $10 = $12;
    $9 = $3;
    if (!(!$9 & ($10 | 0) == 2147418112 ? !($1 | $2) : ($10 | 0) == 2147418112 & $9 >>> 0 < 0 | $10 >>> 0 < 2147418112)) {
     $34 = $3;
     $29 = $4 | 32768;
     break label$2;
    }
    $12 = $8 & 2147483647;
    $4 = $12;
    $3 = $7;
    if (!(!$3 & ($4 | 0) == 2147418112 ? !($5 | $6) : ($4 | 0) == 2147418112 & $3 >>> 0 < 0 | $4 >>> 0 < 2147418112)) {
     $34 = $7;
     $29 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break label$2;
    }
    if (!($1 | $9 | ($10 ^ 2147418112 | $2))) {
     if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      $29 = 2147450880;
      break label$2;
     }
     $29 = $29 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($1 | $9 | ($2 | $10))) {
     break label$1;
    }
    if (!($3 | $5 | ($4 | $6))) {
     $29 = $29 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (($10 | 0) == 65535 & $9 >>> 0 <= 4294967295 | $10 >>> 0 < 65535) {
     $9 = $1;
     $7 = !($17 | $22);
     $8 = $7 << 6;
     $10 = Math_clz32($7 ? $1 : $22) + 32 | 0;
     $1 = Math_clz32($7 ? $2 : $17);
     $1 = $8 + (($1 | 0) == 32 ? $10 : $1) | 0;
     __ashlti3($13 + 176 | 0, $9, $2, $22, $17, $1 + -15 | 0);
     $32 = 16 - $1 | 0;
     $22 = HEAP32[$13 + 184 >> 2];
     $17 = HEAP32[$13 + 188 >> 2];
     $2 = HEAP32[$13 + 180 >> 2];
     $1 = HEAP32[$13 + 176 >> 2];
    }
    if (($4 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4 >>> 0 > 65535) {
     break label$3;
    }
    $3 = !($28 | $31);
    $4 = $3 << 6;
    $7 = Math_clz32($3 ? $5 : $28) + 32 | 0;
    $3 = Math_clz32($3 ? $6 : $31);
    $3 = $4 + (($3 | 0) == 32 ? $7 : $3) | 0;
    __ashlti3($13 + 160 | 0, $5, $6, $28, $31, $3 + -15 | 0);
    $32 = ($3 + $32 | 0) + -16 | 0;
    $28 = HEAP32[$13 + 168 >> 2];
    $31 = HEAP32[$13 + 172 >> 2];
    $5 = HEAP32[$13 + 160 >> 2];
    $6 = HEAP32[$13 + 164 >> 2];
   }
   $4 = $31 | 65536;
   $35 = $4;
   $40 = $28;
   $3 = $28;
   $10 = $4 << 15 | $3 >>> 17;
   $3 = $3 << 15 | $6 >>> 17;
   $7 = -102865788 - $3 | 0;
   $4 = $10;
   $9 = $10;
   $8 = 1963258675 - ($9 + (4192101508 < $3 >>> 0) | 0) | 0;
   __multi3($13 + 144 | 0, $3, $9, $7, $8);
   $9 = HEAP32[$13 + 152 >> 2];
   __multi3($13 + 128 | 0, 0 - $9 | 0, 0 - (HEAP32[$13 + 156 >> 2] + (0 < $9 >>> 0) | 0) | 0, $7, $8);
   $7 = HEAP32[$13 + 136 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 132 >> 2] >>> 31;
   $7 = HEAP32[$13 + 140 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 112 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 120 >> 2];
   __multi3($13 + 96 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 124 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 104 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 100 >> 2] >>> 31;
   $7 = HEAP32[$13 + 108 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 80 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 88 >> 2];
   __multi3($13 - -64 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 92 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 72 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 68 >> 2] >>> 31;
   $7 = HEAP32[$13 + 76 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 48 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 56 >> 2];
   __multi3($13 + 32 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 60 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $7 = HEAP32[$13 + 40 >> 2];
   $8 = $7 << 1 | HEAP32[$13 + 36 >> 2] >>> 31;
   $7 = HEAP32[$13 + 44 >> 2] << 1 | $7 >>> 31;
   __multi3($13 + 16 | 0, $8, $7, $3, $10);
   $9 = $7;
   $7 = HEAP32[$13 + 24 >> 2];
   __multi3($13, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 28 >> 2] + (0 < $7 >>> 0) | 0) | 0);
   $32 = ($14 - $11 | 0) + $32 | 0;
   $7 = HEAP32[$13 + 8 >> 2];
   $9 = HEAP32[$13 + 12 >> 2] << 1 | $7 >>> 31;
   $8 = $7 << 1;
   $10 = $9 + -1 | 0;
   $8 = (HEAP32[$13 + 4 >> 2] >>> 31 | $8) + -1 | 0;
   if ($8 >>> 0 < 4294967295) {
    $10 = $10 + 1 | 0;
   }
   $9 = 0;
   $23 = $9;
   $7 = $8;
   $20 = $4;
   $16 = __wasm_i64_mul($7, $9, $4, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $15 = $4;
   $18 = $10;
   $8 = 0;
   $14 = $3;
   $10 = __wasm_i64_mul($10, $8, $3, 0);
   $3 = $10 + $16 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $4 | 0;
   $12 = $3;
   $3 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $12;
   $14 = __wasm_i64_mul($7, $23, $14, $21);
   $4 = 0 + $14 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $9 = $4 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $4;
   $4 = $9;
   $25 = ($10 | 0) == ($9 | 0) & $14 >>> 0 < $25 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $9 = __wasm_i64_mul($18, $8, $20, $19);
   $10 = ($3 | 0) == ($15 | 0) & $10 >>> 0 < $16 >>> 0 | $3 >>> 0 < $15 >>> 0;
   $12 = $3;
   $3 = $9 + $3 | 0;
   $11 = $10 + i64toi32_i32$HIGH_BITS | 0;
   $11 = $3 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
   $10 = $3;
   $3 = $25 + $10 | 0;
   $9 = $11;
   $26 = $3;
   $3 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = $6;
   $30 = ($9 & 131071) << 15 | $5 >>> 17;
   $15 = __wasm_i64_mul($7, $23, $30, 0);
   $9 = i64toi32_i32$HIGH_BITS;
   $25 = $9;
   $12 = $5;
   $21 = $12 << 15 & -32768;
   $11 = __wasm_i64_mul($18, $8, $21, 0);
   $12 = $11 + $15 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $10 = $12 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $9 = $12;
   $20 = 0;
   $11 = $9;
   $24 = __wasm_i64_mul($7, $23, $21, $24);
   $21 = $24 + $20 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $21 >>> 0 < $24 >>> 0 ? $9 + 1 | 0 : $9;
   $16 = ($9 | 0) == ($11 | 0) & $21 >>> 0 < $20 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $12 = __wasm_i64_mul($18, $8, $30, $27);
   $9 = ($10 | 0) == ($25 | 0) & $11 >>> 0 < $15 >>> 0 | $10 >>> 0 < $25 >>> 0;
   $19 = $10;
   $12 = $12 + $10 | 0;
   $11 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $10 = $12;
   $9 = $16 + $10 | 0;
   $12 = $10 >>> 0 < $19 >>> 0 ? $11 + 1 | 0 : $11;
   $12 = $9 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $9;
   $10 = $14 + $9 | 0;
   $9 = $12 + $4 | 0;
   $9 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $19 = $10;
   $10 = $3;
   $16 = $9;
   $3 = ($4 | 0) == ($9 | 0) & $19 >>> 0 < $14 >>> 0 | $9 >>> 0 < $4 >>> 0;
   $4 = $3 + $26 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $9 = $10;
   $3 = ($19 | 0) != 0 | ($16 | 0) != 0;
   $4 = $4 + $3 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = 0 - $4 | 0;
   $4 = 0 - ((0 < $4 >>> 0) + $9 | 0) | 0;
   $9 = $3;
   $15 = 0;
   $14 = __wasm_i64_mul($9, $15, $7, $23);
   $10 = i64toi32_i32$HIGH_BITS;
   $25 = $10;
   $11 = $10;
   $20 = __wasm_i64_mul($18, $8, $9, $15);
   $9 = i64toi32_i32$HIGH_BITS;
   $21 = $9;
   $10 = $9;
   $26 = $4;
   $9 = 0;
   $4 = __wasm_i64_mul($7, $23, $4, $9);
   $3 = $4 + $20 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $10 = $3 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10;
   $4 = $3;
   $3 = $14 + 0 | 0;
   $11 = $11 + $4 | 0;
   $11 = $3 >>> 0 < $15 >>> 0 ? $11 + 1 | 0 : $11;
   $15 = $3;
   $12 = $3;
   $3 = $11;
   $11 = ($25 | 0) == ($3 | 0) & $12 >>> 0 < $14 >>> 0 | $3 >>> 0 < $25 >>> 0;
   $9 = __wasm_i64_mul($18, $8, $26, $9);
   $12 = ($10 | 0) == ($21 | 0) & $4 >>> 0 < $20 >>> 0 | $10 >>> 0 < $21 >>> 0;
   $4 = $9 + $10 | 0;
   $9 = $12 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $4 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $4;
   $4 = $11 + $10 | 0;
   if ($4 >>> 0 < $10 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $30 = $4;
   $4 = $9;
   $14 = $15;
   $10 = 0 - $19 | 0;
   $27 = 0 - ((0 < $19 >>> 0) + $16 | 0) | 0;
   $19 = 0;
   $21 = __wasm_i64_mul($27, $19, $7, $23);
   $20 = i64toi32_i32$HIGH_BITS;
   $16 = $10;
   $24 = 0;
   $12 = __wasm_i64_mul($10, $24, $18, $8);
   $9 = $12 + $21 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $20 | 0;
   $10 = $9 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
   $26 = 0;
   $11 = $9;
   $16 = __wasm_i64_mul($7, $23, $16, $24);
   $7 = $16 + $26 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $7 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = ($9 | 0) == ($11 | 0) & $7 >>> 0 < $26 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $7 = __wasm_i64_mul($18, $8, $27, $19);
   $7 = $7 + $10 | 0;
   $12 = i64toi32_i32$HIGH_BITS + (($10 | 0) == ($20 | 0) & $11 >>> 0 < $21 >>> 0 | $10 >>> 0 < $20 >>> 0) | 0;
   $12 = $7 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $7;
   $7 = $9 + $7 | 0;
   $9 = $12;
   $9 = $7 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $7;
   $7 = $7 + $14 | 0;
   $9 = $9 + $3 | 0;
   $9 = $7 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $4;
   $4 = $9;
   $3 = ($3 | 0) == ($9 | 0) & $7 >>> 0 < $14 >>> 0 | $9 >>> 0 < $3 >>> 0;
   $8 = $3 + $30 | 0;
   if ($8 >>> 0 < $3 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $3 = $8;
   $9 = $10;
   $10 = $3;
   $11 = $4 + -1 | 0;
   $3 = $7 + -2 | 0;
   if ($3 >>> 0 < 4294967294) {
    $11 = $11 + 1 | 0;
   }
   $15 = $3;
   $8 = $3;
   $3 = $11;
   $4 = ($4 | 0) == ($3 | 0) & $8 >>> 0 < $7 >>> 0 | $3 >>> 0 < $4 >>> 0;
   $7 = $10 + $4 | 0;
   if ($7 >>> 0 < $4 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $4 = $7 + -1 | 0;
   $9 = $9 + -1 | 0;
   $9 = $4 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
   $7 = 0;
   $18 = $7;
   $14 = $4;
   $8 = $22;
   $20 = $8 << 2 | $2 >>> 30;
   $12 = __wasm_i64_mul($4, $7, $20, 0);
   $7 = i64toi32_i32$HIGH_BITS;
   $16 = $7;
   $10 = $7;
   $7 = $2;
   $30 = ($7 & 1073741823) << 2 | $1 >>> 30;
   $27 = $9;
   $8 = 0;
   $7 = __wasm_i64_mul($30, 0, $9, $8);
   $4 = $7 + $12 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $11 = $4 >>> 0 < $7 >>> 0 ? $11 + 1 | 0 : $11;
   $7 = $4;
   $10 = $11;
   $25 = ($16 | 0) == ($10 | 0) & $7 >>> 0 < $12 >>> 0 | $10 >>> 0 < $16 >>> 0;
   $9 = $10;
   $11 = 0;
   $16 = $11;
   $21 = $3;
   $24 = (($17 & 1073741823) << 2 | $22 >>> 30) & -262145 | 262144;
   $4 = __wasm_i64_mul($3, $11, $24, 0);
   $3 = $4 + $7 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $17 = $3;
   $9 = 0;
   $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
   $4 = $12;
   $3 = ($10 | 0) == ($4 | 0) & $3 >>> 0 < $7 >>> 0 | $4 >>> 0 < $10 >>> 0;
   $7 = $3 + $25 | 0;
   if ($7 >>> 0 < $3 >>> 0) {
    $9 = 1;
   }
   $2 = $7;
   $7 = __wasm_i64_mul($27, $8, $24, $36);
   $3 = $2 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $22 = $3;
   $7 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = __wasm_i64_mul($14, $18, $24, $36);
   $9 = i64toi32_i32$HIGH_BITS;
   $11 = __wasm_i64_mul($20, $26, $27, $8);
   $3 = $11 + $10 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $12 = $3 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $3;
   $3 = $12;
   $12 = ($9 | 0) == ($3 | 0) & $11 >>> 0 < $10 >>> 0 | $3 >>> 0 < $9 >>> 0;
   $22 = $3 + $22 | 0;
   $10 = $7 + $12 | 0;
   $9 = $22;
   $12 = $9 >>> 0 < $3 >>> 0 ? $10 + 1 | 0 : $10;
   $11 = $4 + $11 | 0;
   $10 = 0;
   $3 = $10 + $17 | 0;
   if ($3 >>> 0 < $10 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $10 = $3;
   $3 = $11;
   $4 = ($4 | 0) == ($3 | 0) & $10 >>> 0 < $17 >>> 0 | $3 >>> 0 < $4 >>> 0;
   $7 = $4 + $9 | 0;
   if ($7 >>> 0 < $4 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $23 = $7;
   $17 = $3;
   $22 = __wasm_i64_mul($30, $19, $21, $16);
   $11 = i64toi32_i32$HIGH_BITS;
   $25 = $15;
   $15 = __wasm_i64_mul($15, 0, $20, $26);
   $7 = $15 + $22 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $9 = $7 >>> 0 < $15 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $7;
   $7 = $9;
   $37 = ($11 | 0) == ($9 | 0) & $15 >>> 0 < $22 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $39 = $1 << 2 & -4;
   $2 = 0;
   $33 = __wasm_i64_mul($14, $18, $39, $2);
   $22 = $33 + $15 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $11 = $22 >>> 0 < $33 >>> 0 ? $11 + 1 | 0 : $11;
   $33 = $10;
   $9 = 0;
   $4 = $11;
   $7 = ($7 | 0) == ($4 | 0) & $22 >>> 0 < $15 >>> 0 | $4 >>> 0 < $7 >>> 0;
   $11 = $7 + $37 | 0;
   if ($11 >>> 0 < $7 >>> 0) {
    $9 = 1;
   }
   $7 = $33 + $11 | 0;
   $9 = $9 + $17 | 0;
   $9 = $7 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $7;
   $11 = $12;
   $7 = $9;
   $3 = ($3 | 0) == ($9 | 0) & $15 >>> 0 < $10 >>> 0 | $9 >>> 0 < $3 >>> 0;
   $9 = $3 + $23 | 0;
   if ($9 >>> 0 < $3 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $33 = $9;
   $17 = $15;
   $23 = $7;
   $37 = __wasm_i64_mul($27, $8, $39, $2);
   $27 = i64toi32_i32$HIGH_BITS;
   $8 = __wasm_i64_mul($24, $36, $25, $38);
   $3 = $8 + $37 | 0;
   $12 = i64toi32_i32$HIGH_BITS + $27 | 0;
   $24 = $3;
   $12 = $3 >>> 0 < $8 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $12;
   $10 = __wasm_i64_mul($20, $26, $21, $16);
   $3 = $10 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $12 | 0;
   $20 = $3;
   $9 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $9;
   $12 = __wasm_i64_mul($14, $18, $30, $19);
   $3 = $12 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $14 = $3;
   $9 = $3 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
   $18 = 0;
   $12 = $11;
   $3 = $9;
   $11 = ($9 | 0) == ($10 | 0) & $14 >>> 0 < $20 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $9 = ($8 | 0) == ($27 | 0) & $24 >>> 0 < $37 >>> 0 | $8 >>> 0 < $27 >>> 0;
   $8 = ($8 | 0) == ($10 | 0) & $20 >>> 0 < $24 >>> 0 | $10 >>> 0 < $8 >>> 0;
   $10 = $9 + $8 | 0;
   $10 >>> 0 < $8 >>> 0;
   $8 = $11 + $10 | 0;
   $9 = $8;
   $11 = $3 | 0;
   $8 = $11 + $17 | 0;
   $10 = ($9 | $18) + $23 | 0;
   $10 = $8 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $23 = $8;
   $17 = $10;
   $7 = ($7 | 0) == ($10 | 0) & $8 >>> 0 < $15 >>> 0 | $10 >>> 0 < $7 >>> 0;
   $8 = $7 + $33 | 0;
   if ($8 >>> 0 < $7 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $26 = $8;
   $8 = $12;
   $12 = $23;
   $15 = $17;
   $18 = $22;
   $21 = __wasm_i64_mul($21, $16, $39, $2);
   $16 = i64toi32_i32$HIGH_BITS;
   $9 = __wasm_i64_mul($30, $19, $25, $38);
   $7 = $9 + $21 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $16 | 0;
   $11 = $7 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
   $10 = $11;
   $19 = $10;
   $11 = 0;
   $9 = ($10 | 0) == ($16 | 0) & $7 >>> 0 < $21 >>> 0 | $10 >>> 0 < $16 >>> 0;
   $7 = $10 + $18 | 0;
   $10 = ($9 | $11) + $4 | 0;
   $10 = $7 >>> 0 < $19 >>> 0 ? $10 + 1 | 0 : $10;
   $19 = $7;
   $9 = $7;
   $7 = $10;
   $9 = ($4 | 0) == ($10 | 0) & $9 >>> 0 < $18 >>> 0 | $10 >>> 0 < $4 >>> 0;
   $16 = $12;
   $2 = $9;
   $9 = $10 + $14 | 0;
   $12 = 0;
   $3 = $12 + $19 | 0;
   if ($3 >>> 0 < $12 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $19 >>> 0 | $9 >>> 0 < $7 >>> 0;
   $4 = $2 + $3 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $11 = 1;
   }
   $3 = $16 + $4 | 0;
   $12 = $11 + $15 | 0;
   $7 = $3;
   $9 = $8;
   $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
   $8 = $12;
   $3 = ($17 | 0) == ($12 | 0) & $3 >>> 0 < $23 >>> 0 | $12 >>> 0 < $17 >>> 0;
   $4 = $3 + $26 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = $4;
   $4 = $9;
   label$12 : {
    if (($9 | 0) == 131071 & $3 >>> 0 <= 4294967295 | $9 >>> 0 < 131071) {
     $9 = $1 << 17;
     $10 = 0;
     $18 = 0;
     $12 = $5;
     $20 = 0;
     $1 = __wasm_i64_mul($7, $18, $12, $20);
     $11 = i64toi32_i32$HIGH_BITS;
     $17 = $11;
     $11 = ($1 | 0) != 0 | ($11 | 0) != 0;
     $14 = $10 - $11 | 0;
     $24 = $9 - ($10 >>> 0 < $11 >>> 0) | 0;
     $19 = 0 - $1 | 0;
     $16 = 0 - ((0 < $1 >>> 0) + $17 | 0) | 0;
     $17 = 0;
     $26 = __wasm_i64_mul($8, $17, $12, $20);
     $1 = i64toi32_i32$HIGH_BITS;
     $30 = $1;
     $22 = 0;
     $10 = __wasm_i64_mul($7, $18, $6, $22);
     $9 = $10 + $26 | 0;
     $11 = i64toi32_i32$HIGH_BITS + $1 | 0;
     $11 = $9 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
     $1 = $9;
     $10 = $9;
     $15 = 0;
     $9 = $15;
     $25 = $10;
     $9 = ($10 | 0) == ($16 | 0) & $19 >>> 0 < $9 >>> 0 | $16 >>> 0 < $10 >>> 0;
     $23 = $14 - $9 | 0;
     $14 = $24 - ($14 >>> 0 < $9 >>> 0) | 0;
     $9 = __wasm_i64_mul($3, 0, $12, $20);
     $10 = i64toi32_i32$HIGH_BITS;
     $2 = $9;
     $9 = __wasm_i64_mul($7, $18, $28, 0);
     $2 = $2 + $9 | 0;
     $12 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $12 = $2 >>> 0 < $9 >>> 0 ? $12 + 1 | 0 : $12;
     $9 = __wasm_i64_mul($6, $22, $8, $17);
     $2 = $9 + $2 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $12 | 0;
     $10 = $2 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
     $9 = $2;
     $2 = $10;
     $10 = ($11 | 0) == ($30 | 0) & $1 >>> 0 < $26 >>> 0 | $11 >>> 0 < $30 >>> 0;
     $1 = $11 + $9 | 0;
     $9 = $2 + $10 | 0;
     $10 = $1;
     $1 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
     $2 = __wasm_i64_mul($7, $8, $35, 0);
     $9 = i64toi32_i32$HIGH_BITS;
     $11 = $10;
     $10 = __wasm_i64_mul($5, $6, $4, 0);
     $2 = $10 + $2 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $9 = $2 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
     $12 = __wasm_i64_mul($3, $4, $6, $22);
     $2 = $12 + $2 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $12 = __wasm_i64_mul($8, $17, $28, $31);
     $2 = $12 + $2 | 0;
     $9 = $2;
     $10 = 0;
     $2 = $11 + $10 | 0;
     $9 = $1 + $9 | 0;
     $1 = $2;
     $28 = $23 - $1 | 0;
     $31 = $14 - (($23 >>> 0 < $1 >>> 0) + ($1 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9) | 0) | 0;
     $32 = $32 + -1 | 0;
     $2 = $16 - (($19 >>> 0 < $15 >>> 0) + $25 | 0) | 0;
     $9 = $19 - $15 | 0;
     break label$12;
    }
    $16 = $8 >>> 1;
    $11 = 0;
    $17 = 0;
    $14 = $1 << 16;
    $10 = $3 << 31;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | $10;
    $26 = 0;
    $2 = $5;
    $12 = 0;
    $1 = __wasm_i64_mul($7, $26, $2, $12);
    $9 = i64toi32_i32$HIGH_BITS;
    $10 = $9;
    $9 = ($1 | 0) != 0 | ($9 | 0) != 0;
    $15 = $17 - $9 | 0;
    $24 = $14 - ($17 >>> 0 < $9 >>> 0) | 0;
    $25 = 0 - $1 | 0;
    $21 = $25;
    $23 = 0 - ((0 < $1 >>> 0) + $10 | 0) | 0;
    $17 = $23;
    $14 = 0;
    $19 = __wasm_i64_mul($7, $26, $6, $14);
    $1 = i64toi32_i32$HIGH_BITS;
    $27 = $1;
    $9 = $4 << 31 | $3 >>> 1;
    $16 = $16 | $3 << 31;
    $36 = $9 | $11;
    $11 = $16;
    $18 = __wasm_i64_mul($11, 0, $2, $12);
    $10 = $18 + $19 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $1 | 0;
    $9 = $10 >>> 0 < $18 >>> 0 ? $9 + 1 | 0 : $9;
    $1 = $9;
    $9 = $10;
    $20 = $9;
    $18 = 0;
    $9 = ($9 | 0) == ($17 | 0) & $21 >>> 0 < $18 >>> 0 | $17 >>> 0 < $9 >>> 0;
    $21 = $15 - $9 | 0;
    $15 = $24 - ($15 >>> 0 < $9 >>> 0) | 0;
    $24 = __wasm_i64_mul($6, $14, $11, $38);
    $38 = i64toi32_i32$HIGH_BITS;
    $9 = $2;
    $11 = $12;
    $2 = $4 >>> 1;
    $17 = ($4 & 1) << 31 | $3 >>> 1;
    $11 = __wasm_i64_mul($9, $11, $17, 0);
    $12 = $11 + $24 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $38 | 0;
    $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
    $11 = __wasm_i64_mul($7, $26, $28, 0);
    $12 = $11 + $12 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $9 = $12 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
    $11 = $12;
    $12 = $9;
    $9 = ($1 | 0) == ($27 | 0) & $10 >>> 0 < $19 >>> 0 | $1 >>> 0 < $27 >>> 0;
    $22 = $1;
    $1 = $1 + $11 | 0;
    $11 = $9 + $12 | 0;
    $12 = $1;
    $1 = $12 >>> 0 < $22 >>> 0 ? $11 + 1 | 0 : $11;
    $9 = __wasm_i64_mul($7, $8, $35, 0);
    $10 = i64toi32_i32$HIGH_BITS;
    $4 = __wasm_i64_mul($5, $6, $4 >>> 1, 0);
    $3 = $4 + $9 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
    $4 = __wasm_i64_mul($17, $2, $6, $14);
    $3 = $4 + $3 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $4 = __wasm_i64_mul($16, $36, $28, $31);
    $3 = $4 + $3 | 0;
    $9 = $3;
    $4 = 0;
    $3 = $4 + $12 | 0;
    $10 = $1 + $9 | 0;
    $28 = $21 - $3 | 0;
    $31 = $15 - (($21 >>> 0 < $3 >>> 0) + ($3 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10) | 0) | 0;
    $3 = $17;
    $4 = $2;
    $2 = $23 - (($25 >>> 0 < $18 >>> 0) + $20 | 0) | 0;
    $9 = $25 - $18 | 0;
   }
   $1 = $2;
   $10 = $32 + 16383 | 0;
   if (($10 | 0) >= 32767) {
    $29 = $29 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   if (($10 | 0) <= 0) {
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $11 = $8;
   $4 = $4 & 65535;
   $12 = $1 << 1 | $9 >>> 31;
   $17 = $9 << 1;
   $6 = ($6 | 0) == ($12 | 0) & $17 >>> 0 >= $5 >>> 0 | $12 >>> 0 > $6 >>> 0;
   $5 = $28;
   $12 = $31 << 1 | $5 >>> 31;
   $2 = $5 << 1 | $1 >>> 31;
   $1 = ($2 | 0) == ($40 | 0) & ($12 | 0) == ($35 | 0) ? $6 : ($35 | 0) == ($12 | 0) & $2 >>> 0 >= $40 >>> 0 | $12 >>> 0 > $35 >>> 0;
   $2 = $1 + $7 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $1 = $2;
   $2 = $11;
   $5 = $3;
   $3 = (($8 | 0) == ($11 | 0) & $1 >>> 0 < $7 >>> 0 | $11 >>> 0 < $8 >>> 0) + $3 | 0;
   $9 = $10 << 16 | $4;
   $34 = $3 | $34;
   $29 = $29 | ($3 >>> 0 < $5 >>> 0 ? $9 + 1 | 0 : $9);
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $34;
  HEAP32[$0 + 12 >> 2] = $29;
  global$0 = $13 + 192 | 0;
  return;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $1 = ($3 | $5) != 0 | ($4 | $6) != 0;
 HEAP32[$0 + 8 >> 2] = $1 ? $34 : 0;
 HEAP32[$0 + 12 >> 2] = $1 ? $29 : 2147450880;
 global$0 = $13 + 192 | 0;
}
function printf_core($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 76 >> 2] = $1;
 $19 = $5 + 55 | 0;
 $16 = $5 + 56 | 0;
 $1 = 0;
 label$1 : {
  label$2 : {
   label$3 : while (1) {
    label$4 : {
     if (($14 | 0) < 0) {
      break label$4;
     }
     if (($1 | 0) > (2147483647 - $14 | 0)) {
      HEAP32[8356] = 61;
      $14 = -1;
      break label$4;
     }
     $14 = $1 + $14 | 0;
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $9 = HEAP32[$5 + 76 >> 2];
                 $1 = $9;
                 $8 = HEAPU8[$1 | 0];
                 if ($8) {
                  while (1) {
                   label$21 : {
                    label$22 : {
                     $6 = $8 & 255;
                     label$23 : {
                      if (!$6) {
                       $8 = $1;
                       break label$23;
                      }
                      if (($6 | 0) != 37) {
                       break label$22;
                      }
                      $8 = $1;
                      while (1) {
                       if (HEAPU8[$1 + 1 | 0] != 37) {
                        break label$23;
                       }
                       $6 = $1 + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $8 + 1 | 0;
                       $7 = HEAPU8[$1 + 2 | 0];
                       $1 = $6;
                       if (($7 | 0) == 37) {
                        continue;
                       }
                       break;
                      }
                     }
                     $1 = $8 - $9 | 0;
                     if ($0) {
                      out($0, $9, $1);
                     }
                     if ($1) {
                      continue label$3;
                     }
                     $6 = isdigit(HEAP8[HEAP32[$5 + 76 >> 2] + 1 | 0]);
                     $15 = -1;
                     $8 = 1;
                     $10 = $5;
                     $1 = HEAP32[$5 + 76 >> 2];
                     if (!(!$6 | HEAPU8[$1 + 2 | 0] != 36)) {
                      $15 = HEAP8[$1 + 1 | 0] + -48 | 0;
                      $17 = 1;
                      $8 = 3;
                     }
                     $1 = $8 + $1 | 0;
                     HEAP32[$10 + 76 >> 2] = $1;
                     $8 = 0;
                     $12 = HEAP8[$1 | 0];
                     $7 = $12 + -32 | 0;
                     label$28 : {
                      if ($7 >>> 0 > 31) {
                       $6 = $1;
                       break label$28;
                      }
                      $6 = $1;
                      $7 = 1 << $7;
                      if (!($7 & 75913)) {
                       break label$28;
                      }
                      while (1) {
                       $6 = $1 + 1 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $7 | $8;
                       $12 = HEAP8[$1 + 1 | 0];
                       $7 = $12 + -32 | 0;
                       if ($7 >>> 0 > 31) {
                        break label$28;
                       }
                       $1 = $6;
                       $7 = 1 << $7;
                       if ($7 & 75913) {
                        continue;
                       }
                       break;
                      }
                     }
                     label$31 : {
                      if (($12 | 0) == 42) {
                       $10 = $5;
                       label$33 : {
                        label$34 : {
                         if (!isdigit(HEAP8[$6 + 1 | 0])) {
                          break label$34;
                         }
                         $1 = HEAP32[$5 + 76 >> 2];
                         if (HEAPU8[$1 + 2 | 0] != 36) {
                          break label$34;
                         }
                         HEAP32[((HEAP8[$1 + 1 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                         $13 = HEAP32[((HEAP8[$1 + 1 | 0] << 3) + $3 | 0) + -384 >> 2];
                         $17 = 1;
                         $1 = $1 + 3 | 0;
                         break label$33;
                        }
                        if ($17) {
                         break label$2;
                        }
                        $17 = 0;
                        $13 = 0;
                        if ($0) {
                         $1 = HEAP32[$2 >> 2];
                         HEAP32[$2 >> 2] = $1 + 4;
                         $13 = HEAP32[$1 >> 2];
                        }
                        $1 = HEAP32[$5 + 76 >> 2] + 1 | 0;
                       }
                       HEAP32[$10 + 76 >> 2] = $1;
                       if (($13 | 0) > -1) {
                        break label$31;
                       }
                       $13 = 0 - $13 | 0;
                       $8 = $8 | 8192;
                       break label$31;
                      }
                      $13 = getint($5 + 76 | 0);
                      if (($13 | 0) < 0) {
                       break label$2;
                      }
                      $1 = HEAP32[$5 + 76 >> 2];
                     }
                     $7 = -1;
                     label$36 : {
                      if (HEAPU8[$1 | 0] != 46) {
                       break label$36;
                      }
                      if (HEAPU8[$1 + 1 | 0] == 42) {
                       label$38 : {
                        if (!isdigit(HEAP8[$1 + 2 | 0])) {
                         break label$38;
                        }
                        $1 = HEAP32[$5 + 76 >> 2];
                        if (HEAPU8[$1 + 3 | 0] != 36) {
                         break label$38;
                        }
                        HEAP32[((HEAP8[$1 + 2 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                        $7 = HEAP32[((HEAP8[$1 + 2 | 0] << 3) + $3 | 0) + -384 >> 2];
                        $1 = $1 + 4 | 0;
                        HEAP32[$5 + 76 >> 2] = $1;
                        break label$36;
                       }
                       if ($17) {
                        break label$2;
                       }
                       if ($0) {
                        $1 = HEAP32[$2 >> 2];
                        HEAP32[$2 >> 2] = $1 + 4;
                        $7 = HEAP32[$1 >> 2];
                       } else {
                        $7 = 0;
                       }
                       $1 = HEAP32[$5 + 76 >> 2] + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $1;
                       break label$36;
                      }
                      HEAP32[$5 + 76 >> 2] = $1 + 1;
                      $7 = getint($5 + 76 | 0);
                      $1 = HEAP32[$5 + 76 >> 2];
                     }
                     $6 = 0;
                     while (1) {
                      $18 = $6;
                      $11 = -1;
                      if (HEAP8[$1 | 0] + -65 >>> 0 > 57) {
                       break label$1;
                      }
                      $12 = $1 + 1 | 0;
                      HEAP32[$5 + 76 >> 2] = $12;
                      $6 = HEAP8[$1 | 0];
                      $1 = $12;
                      $6 = HEAPU8[($6 + Math_imul($18, 58) | 0) + 12767 | 0];
                      if ($6 + -1 >>> 0 < 8) {
                       continue;
                      }
                      break;
                     }
                     if (!$6) {
                      break label$1;
                     }
                     label$42 : {
                      label$43 : {
                       label$44 : {
                        if (($6 | 0) == 19) {
                         if (($15 | 0) <= -1) {
                          break label$44;
                         }
                         break label$1;
                        }
                        if (($15 | 0) < 0) {
                         break label$43;
                        }
                        HEAP32[($15 << 2) + $4 >> 2] = $6;
                        $1 = ($15 << 3) + $3 | 0;
                        $6 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$5 + 64 >> 2] = HEAP32[$1 >> 2];
                        HEAP32[$5 + 68 >> 2] = $6;
                       }
                       $1 = 0;
                       if (!$0) {
                        continue label$3;
                       }
                       break label$42;
                      }
                      if (!$0) {
                       break label$6;
                      }
                      pop_arg($5 - -64 | 0, $6, $2);
                      $12 = HEAP32[$5 + 76 >> 2];
                     }
                     $10 = $8 & -65537;
                     $8 = $8 & 8192 ? $10 : $8;
                     $11 = 0;
                     $15 = 12808;
                     $6 = $16;
                     $1 = HEAP8[$12 + -1 | 0];
                     $1 = $18 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
                     $12 = $1 + -88 | 0;
                     if ($12 >>> 0 <= 32) {
                      break label$21;
                     }
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         $10 = $1 + -65 | 0;
                         if ($10 >>> 0 > 6) {
                          if (($1 | 0) != 83) {
                           break label$7;
                          }
                          if (!$7) {
                           break label$49;
                          }
                          $6 = HEAP32[$5 + 64 >> 2];
                          break label$47;
                         }
                         switch ($10 - 1 | 0) {
                         case 1:
                          break label$48;
                         case 0:
                         case 2:
                          break label$7;
                         default:
                          break label$18;
                         }
                        }
                        $1 = 0;
                        pad($0, 32, $13, 0, $8);
                        break label$46;
                       }
                       HEAP32[$5 + 12 >> 2] = 0;
                       HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 64 >> 2];
                       HEAP32[$5 + 64 >> 2] = $5 + 8;
                       $7 = -1;
                       $6 = $5 + 8 | 0;
                      }
                      $1 = 0;
                      label$51 : {
                       while (1) {
                        $9 = HEAP32[$6 >> 2];
                        if (!$9) {
                         break label$51;
                        }
                        $9 = wctomb($5 + 4 | 0, $9);
                        $10 = ($9 | 0) < 0;
                        if (!($10 | $9 >>> 0 > $7 - $1 >>> 0)) {
                         $6 = $6 + 4 | 0;
                         $1 = $1 + $9 | 0;
                         if ($7 >>> 0 > $1 >>> 0) {
                          continue;
                         }
                         break label$51;
                        }
                        break;
                       }
                       $11 = -1;
                       if ($10) {
                        break label$1;
                       }
                      }
                      pad($0, 32, $13, $1, $8);
                      if (!$1) {
                       $1 = 0;
                       break label$46;
                      }
                      $7 = 0;
                      $6 = HEAP32[$5 + 64 >> 2];
                      while (1) {
                       $9 = HEAP32[$6 >> 2];
                       if (!$9) {
                        break label$46;
                       }
                       $9 = wctomb($5 + 4 | 0, $9);
                       $7 = $9 + $7 | 0;
                       if (($7 | 0) > ($1 | 0)) {
                        break label$46;
                       }
                       out($0, $5 + 4 | 0, $9);
                       $6 = $6 + 4 | 0;
                       if ($7 >>> 0 < $1 >>> 0) {
                        continue;
                       }
                       break;
                      }
                     }
                     pad($0, 32, $13, $1, $8 ^ 8192);
                     $1 = ($13 | 0) > ($1 | 0) ? $13 : $1;
                     continue label$3;
                    }
                    $6 = $1 + 1 | 0;
                    HEAP32[$5 + 76 >> 2] = $6;
                    $8 = HEAPU8[$1 + 1 | 0];
                    $1 = $6;
                    continue;
                   }
                   break;
                  }
                  switch ($12 - 1 | 0) {
                  case 28:
                   break label$10;
                  case 21:
                   break label$11;
                  case 23:
                   break label$13;
                  case 22:
                   break label$14;
                  case 11:
                  case 16:
                   break label$15;
                  case 10:
                   break label$16;
                  case 26:
                   break label$17;
                  case 8:
                  case 12:
                  case 13:
                  case 14:
                   break label$18;
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                  case 15:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 24:
                  case 25:
                  case 27:
                  case 29:
                  case 30:
                   break label$7;
                  default:
                   break label$12;
                  }
                 }
                 $11 = $14;
                 if ($0) {
                  break label$1;
                 }
                 if (!$17) {
                  break label$6;
                 }
                 $1 = 1;
                 while (1) {
                  $0 = HEAP32[($1 << 2) + $4 >> 2];
                  if ($0) {
                   pop_arg(($1 << 3) + $3 | 0, $0, $2);
                   $11 = 1;
                   $1 = $1 + 1 | 0;
                   if (($1 | 0) != 10) {
                    continue;
                   }
                   break label$1;
                  }
                  break;
                 }
                 $11 = 1;
                 if ($1 >>> 0 > 9) {
                  break label$1;
                 }
                 $11 = -1;
                 if (HEAP32[($1 << 2) + $4 >> 2]) {
                  break label$1;
                 }
                 while (1) {
                  $1 = $1 + 1 | 0;
                  if (HEAP32[($1 << 2) + $4 >> 2] ? 0 : ($1 | 0) != 10) {
                   continue;
                  }
                  break;
                 }
                 $11 = $1 >>> 0 < 10 ? -1 : 1;
                 break label$1;
                }
                $1 = FUNCTION_TABLE[64]($0, HEAPF64[$5 + 64 >> 3], $13, $7, $8, $1) | 0;
                continue;
               }
               $1 = HEAP32[$5 + 64 >> 2];
               $9 = $1 ? $1 : 12818;
               $1 = memchr($9, 0, $7);
               $6 = $1 ? $1 : $7 + $9 | 0;
               $8 = $10;
               $7 = $1 ? $1 - $9 | 0 : $7;
               break label$7;
              }
              HEAP8[$5 + 55 | 0] = HEAP32[$5 + 64 >> 2];
              $7 = 1;
              $9 = $19;
              $8 = $10;
              break label$7;
             }
             $10 = HEAP32[$5 + 68 >> 2];
             $1 = $10;
             $9 = HEAP32[$5 + 64 >> 2];
             if (($1 | 0) < -1 ? 1 : ($1 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
              $1 = 0 - ($1 + (0 < $9 >>> 0) | 0) | 0;
              $9 = 0 - $9 | 0;
              HEAP32[$5 + 64 >> 2] = $9;
              HEAP32[$5 + 68 >> 2] = $1;
              $11 = 1;
              $15 = 12808;
              break label$9;
             }
             if ($8 & 2048) {
              $11 = 1;
              $15 = 12809;
              break label$9;
             }
             $11 = $8 & 1;
             $15 = $11 ? 12810 : 12808;
             break label$9;
            }
            $9 = fmt_o(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16);
            if (!($8 & 8)) {
             break label$8;
            }
            $1 = $16 - $9 | 0;
            $7 = ($7 | 0) > ($1 | 0) ? $7 : $1 + 1 | 0;
            break label$8;
           }
           $7 = $7 >>> 0 > 8 ? $7 : 8;
           $8 = $8 | 8;
           $1 = 120;
          }
          $9 = fmt_x(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16, $1 & 32);
          if (!($8 & 8) | !(HEAP32[$5 + 64 >> 2] | HEAP32[$5 + 68 >> 2])) {
           break label$8;
          }
          $15 = ($1 >>> 4) + 12808 | 0;
          $11 = 2;
          break label$8;
         }
         $1 = 0;
         $6 = $18 & 255;
         if ($6 >>> 0 > 7) {
          continue;
         }
         label$62 : {
          switch ($6 - 1 | 0) {
          default:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 0:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 1:
           $6 = HEAP32[$5 + 64 >> 2];
           HEAP32[$6 >> 2] = $14;
           HEAP32[$6 + 4 >> 2] = $14 >> 31;
           continue;
          case 2:
           HEAP16[HEAP32[$5 + 64 >> 2] >> 1] = $14;
           continue;
          case 3:
           HEAP8[HEAP32[$5 + 64 >> 2]] = $14;
           continue;
          case 5:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 4:
           continue;
          case 6:
           break label$62;
          }
         }
         $6 = HEAP32[$5 + 64 >> 2];
         HEAP32[$6 >> 2] = $14;
         HEAP32[$6 + 4 >> 2] = $14 >> 31;
         continue;
        }
        $9 = HEAP32[$5 + 64 >> 2];
        $1 = HEAP32[$5 + 68 >> 2];
        $15 = 12808;
       }
       $9 = fmt_u($9, $1, $16);
      }
      $8 = ($7 | 0) > -1 ? $8 & -65537 : $8;
      $1 = HEAP32[$5 + 68 >> 2];
      $10 = $1;
      $12 = HEAP32[$5 + 64 >> 2];
      label$69 : {
       if (!(!!($1 | $12) | $7)) {
        $9 = $16;
        $7 = 0;
        break label$69;
       }
       $1 = !($10 | $12) + ($16 - $9 | 0) | 0;
       $7 = ($7 | 0) > ($1 | 0) ? $7 : $1;
      }
     }
     $10 = $6 - $9 | 0;
     $7 = ($7 | 0) < ($10 | 0) ? $10 : $7;
     $6 = $7 + $11 | 0;
     $1 = ($13 | 0) < ($6 | 0) ? $6 : $13;
     pad($0, 32, $1, $6, $8);
     out($0, $15, $11);
     pad($0, 48, $1, $6, $8 ^ 65536);
     pad($0, 48, $7, $10, 0);
     out($0, $9, $10);
     pad($0, 32, $1, $6, $8 ^ 8192);
     continue;
    }
    break;
   }
   $11 = 0;
   break label$1;
  }
  $11 = -1;
 }
 global$0 = $5 + 80 | 0;
 return $11;
}
function decfloat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $6 = global$0 - 8960 | 0;
 global$0 = $6;
 $21 = $3 + $4 | 0;
 $26 = 0 - $21 | 0;
 label$1 : {
  label$2 : {
   while (1) {
    label$4 : {
     if (($2 | 0) != 48) {
      if (($2 | 0) != 46) {
       break label$1;
      }
      $2 = HEAP32[$1 + 4 >> 2];
      if ($2 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$4;
      }
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$2;
     }
     $2 = HEAP32[$1 + 4 >> 2];
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $14 = 1;
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      continue;
     }
     $2 = __shgetc($1);
     $14 = 1;
     continue;
    }
    break;
   }
   $2 = __shgetc($1);
  }
  $11 = 1;
  if (($2 | 0) != 48) {
   break label$1;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   label$8 : {
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$8;
    }
    $2 = __shgetc($1);
   }
   $8 = $8 + -1 | 0;
   $7 = $7 + -1 | 0;
   if ($7 >>> 0 < 4294967295) {
    $8 = $8 + 1 | 0;
   }
   if (($2 | 0) == 48) {
    continue;
   }
   break;
  }
  $14 = 1;
 }
 HEAP32[$6 + 768 >> 2] = 0;
 label$10 : {
  label$11 : {
   $9 = ($2 | 0) == 46;
   $15 = $2 + -48 | 0;
   label$12 : {
    label$13 : {
     label$14 : {
      if ($9 | $15 >>> 0 <= 9) {
       while (1) {
        label$17 : {
         if ($9 & 1) {
          if (!$11) {
           $7 = $10;
           $8 = $12;
           $11 = 1;
           break label$17;
          }
          $14 = ($14 | 0) != 0;
          break label$14;
         }
         $9 = $10 + 1 | 0;
         if ($9 >>> 0 < 1) {
          $12 = $12 + 1 | 0;
         }
         $10 = $9;
         if (($13 | 0) <= 2044) {
          $19 = ($2 | 0) != 48 ? $10 : $19;
          $9 = ($6 + 768 | 0) + ($13 << 2) | 0;
          $14 = $9;
          if ($16) {
           $15 = (Math_imul(HEAP32[$9 >> 2], 10) + $2 | 0) + -48 | 0;
          }
          HEAP32[$14 >> 2] = $15;
          $14 = 1;
          $9 = $16 + 1 | 0;
          $2 = ($9 | 0) == 9;
          $16 = $2 ? 0 : $9;
          $13 = $2 + $13 | 0;
          break label$17;
         }
         if (($2 | 0) == 48) {
          break label$17;
         }
         HEAP32[$6 + 8944 >> 2] = HEAP32[$6 + 8944 >> 2] | 1;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        label$23 : {
         if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$1 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$23;
         }
         $2 = __shgetc($1);
        }
        $9 = ($2 | 0) == 46;
        $15 = $2 + -48 | 0;
        if ($9 | $15 >>> 0 < 10) {
         continue;
        }
        break;
       }
      }
      $7 = $11 ? $7 : $10;
      $8 = $11 ? $8 : $12;
      if (!(!$14 | ($2 | 32) != 101)) {
       $2 = scanexp($1);
       $9 = i64toi32_i32$HIGH_BITS;
       $11 = $9;
       if (!$2 & ($9 | 0) == -2147483648) {
        break label$12;
       }
       $8 = $8 + $11 | 0;
       $1 = $2 + $7 | 0;
       if ($1 >>> 0 < $2 >>> 0) {
        $8 = $8 + 1 | 0;
       }
       $7 = $1;
       break label$11;
      }
      $14 = ($14 | 0) != 0;
      if (($2 | 0) < 0) {
       break label$13;
      }
     }
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$13;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
    }
    if ($14) {
     break label$11;
    }
    HEAP32[8356] = 28;
   }
   $10 = 0;
   $12 = 0;
   __shlim($1, 0, 0);
   $2 = 0;
   $1 = 0;
   break label$10;
  }
  $1 = HEAP32[$6 + 768 >> 2];
  if (!$1) {
   __extenddftf2($6, +($5 | 0) * 0);
   $10 = HEAP32[$6 >> 2];
   $12 = HEAP32[$6 + 4 >> 2];
   $2 = HEAP32[$6 + 12 >> 2];
   $1 = HEAP32[$6 + 8 >> 2];
   break label$10;
  }
  if (!(($7 | 0) != ($10 | 0) | ($8 | 0) != ($12 | 0) | (($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $10 >>> 0 <= 9 ? 0 : 1 : 0) | ($1 >>> $3 ? ($3 | 0) <= 30 : 0))) {
   __floatunsitf($6 + 32 | 0, $1);
   __floatsitf($6 + 48 | 0, $5);
   __multf3($6 + 16 | 0, HEAP32[$6 + 48 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 44 >> 2]);
   $10 = HEAP32[$6 + 16 >> 2];
   $12 = HEAP32[$6 + 20 >> 2];
   $2 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 24 >> 2];
   break label$10;
  }
  $1 = ($4 | 0) / -2 | 0;
  $2 = $7 >>> 0 <= $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) > ($1 | 0) ? 1 : ($8 | 0) >= ($1 | 0) ? $2 : 0) {
   __floatsitf($6 + 96 | 0, $5);
   __multf3($6 + 80 | 0, HEAP32[$6 + 96 >> 2], HEAP32[$6 + 100 >> 2], HEAP32[$6 + 104 >> 2], HEAP32[$6 + 108 >> 2], -1, -1, -1, 2147418111);
   __multf3($6 - -64 | 0, HEAP32[$6 + 80 >> 2], HEAP32[$6 + 84 >> 2], HEAP32[$6 + 88 >> 2], HEAP32[$6 + 92 >> 2], -1, -1, -1, 2147418111);
   HEAP32[8356] = 68;
   $10 = HEAP32[$6 + 64 >> 2];
   $12 = HEAP32[$6 + 68 >> 2];
   $2 = HEAP32[$6 + 76 >> 2];
   $1 = HEAP32[$6 + 72 >> 2];
   break label$10;
  }
  $1 = $4 + -226 | 0;
  $2 = $7 >>> 0 >= $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) < ($1 | 0) ? 1 : ($8 | 0) <= ($1 | 0) ? $2 : 0) {
   __floatsitf($6 + 144 | 0, $5);
   __multf3($6 + 128 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 148 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 156 >> 2], 0, 0, 0, 65536);
   __multf3($6 + 112 | 0, HEAP32[$6 + 128 >> 2], HEAP32[$6 + 132 >> 2], HEAP32[$6 + 136 >> 2], HEAP32[$6 + 140 >> 2], 0, 0, 0, 65536);
   HEAP32[8356] = 68;
   $10 = HEAP32[$6 + 112 >> 2];
   $12 = HEAP32[$6 + 116 >> 2];
   $2 = HEAP32[$6 + 124 >> 2];
   $1 = HEAP32[$6 + 120 >> 2];
   break label$10;
  }
  if ($16) {
   if (($16 | 0) <= 8) {
    $2 = ($6 + 768 | 0) + ($13 << 2) | 0;
    $1 = HEAP32[$2 >> 2];
    while (1) {
     $1 = Math_imul($1, 10);
     $16 = $16 + 1 | 0;
     if (($16 | 0) != 9) {
      continue;
     }
     break;
    }
    HEAP32[$2 >> 2] = $1;
   }
   $13 = $13 + 1 | 0;
  }
  label$33 : {
   $11 = $7;
   if (($19 | 0) > 8 | ($19 | 0) > ($7 | 0) | ($7 | 0) > 17) {
    break label$33;
   }
   if (($11 | 0) == 9) {
    __floatunsitf($6 + 176 | 0, HEAP32[$6 + 768 >> 2]);
    __floatsitf($6 + 192 | 0, $5);
    __multf3($6 + 160 | 0, HEAP32[$6 + 192 >> 2], HEAP32[$6 + 196 >> 2], HEAP32[$6 + 200 >> 2], HEAP32[$6 + 204 >> 2], HEAP32[$6 + 176 >> 2], HEAP32[$6 + 180 >> 2], HEAP32[$6 + 184 >> 2], HEAP32[$6 + 188 >> 2]);
    $10 = HEAP32[$6 + 160 >> 2];
    $12 = HEAP32[$6 + 164 >> 2];
    $2 = HEAP32[$6 + 172 >> 2];
    $1 = HEAP32[$6 + 168 >> 2];
    break label$10;
   }
   if (($11 | 0) <= 8) {
    __floatunsitf($6 + 256 | 0, HEAP32[$6 + 768 >> 2]);
    __floatsitf($6 + 272 | 0, $5);
    __multf3($6 + 240 | 0, HEAP32[$6 + 272 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 256 >> 2], HEAP32[$6 + 260 >> 2], HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2]);
    __floatsitf($6 + 224 | 0, HEAP32[(0 - $11 << 2) + 15808 >> 2]);
    __divtf3($6 + 208 | 0, HEAP32[$6 + 240 >> 2], HEAP32[$6 + 244 >> 2], HEAP32[$6 + 248 >> 2], HEAP32[$6 + 252 >> 2], HEAP32[$6 + 224 >> 2], HEAP32[$6 + 228 >> 2], HEAP32[$6 + 232 >> 2], HEAP32[$6 + 236 >> 2]);
    $10 = HEAP32[$6 + 208 >> 2];
    $12 = HEAP32[$6 + 212 >> 2];
    $2 = HEAP32[$6 + 220 >> 2];
    $1 = HEAP32[$6 + 216 >> 2];
    break label$10;
   }
   $1 = (Math_imul($11, -3) + $3 | 0) + 27 | 0;
   $2 = HEAP32[$6 + 768 >> 2];
   if ($2 >>> $1 ? ($1 | 0) <= 30 : 0) {
    break label$33;
   }
   __floatunsitf($6 + 336 | 0, $2);
   __floatsitf($6 + 352 | 0, $5);
   __multf3($6 + 320 | 0, HEAP32[$6 + 352 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2], HEAP32[$6 + 364 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 340 >> 2], HEAP32[$6 + 344 >> 2], HEAP32[$6 + 348 >> 2]);
   __floatsitf($6 + 304 | 0, HEAP32[($11 << 2) + 15736 >> 2]);
   __multf3($6 + 288 | 0, HEAP32[$6 + 320 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 304 >> 2], HEAP32[$6 + 308 >> 2], HEAP32[$6 + 312 >> 2], HEAP32[$6 + 316 >> 2]);
   $10 = HEAP32[$6 + 288 >> 2];
   $12 = HEAP32[$6 + 292 >> 2];
   $2 = HEAP32[$6 + 300 >> 2];
   $1 = HEAP32[$6 + 296 >> 2];
   break label$10;
  }
  $16 = 0;
  $1 = ($11 | 0) % 9 | 0;
  label$36 : {
   if (!$1) {
    $2 = 0;
    break label$36;
   }
   $8 = ($11 | 0) > -1 ? $1 : $1 + 9 | 0;
   label$38 : {
    if (!$13) {
     $2 = 0;
     $13 = 0;
     break label$38;
    }
    $7 = HEAP32[(0 - $8 << 2) + 15808 >> 2];
    $12 = 1e9 / ($7 | 0) | 0;
    $14 = 0;
    $1 = 0;
    $2 = 0;
    while (1) {
     $9 = $14;
     $10 = ($6 + 768 | 0) + ($1 << 2) | 0;
     $14 = HEAP32[$10 >> 2];
     $15 = ($14 >>> 0) / ($7 >>> 0) | 0;
     $9 = $9 + $15 | 0;
     HEAP32[$10 >> 2] = $9;
     $9 = !$9 & ($1 | 0) == ($2 | 0);
     $2 = $9 ? $2 + 1 & 2047 : $2;
     $11 = $9 ? $11 + -9 | 0 : $11;
     $14 = Math_imul($12, $14 - Math_imul($7, $15) | 0);
     $1 = $1 + 1 | 0;
     if (($13 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    if (!$14) {
     break label$38;
    }
    HEAP32[($6 + 768 | 0) + ($13 << 2) >> 2] = $14;
    $13 = $13 + 1 | 0;
   }
   $11 = ($11 - $8 | 0) + 9 | 0;
  }
  while (1) {
   $19 = ($6 + 768 | 0) + ($2 << 2) | 0;
   label$42 : {
    while (1) {
     if (($11 | 0) != 36 | HEAPU32[$19 >> 2] >= 10384593 ? ($11 | 0) >= 36 : 0) {
      break label$42;
     }
     $15 = $13 + 2047 | 0;
     $14 = 0;
     $9 = $13;
     while (1) {
      $13 = $9;
      $10 = $15 & 2047;
      $15 = ($6 + 768 | 0) + ($10 << 2) | 0;
      $1 = HEAP32[$15 >> 2];
      $8 = $1 >>> 3;
      $7 = $1 << 29;
      $1 = $7 + $14 | 0;
      if ($1 >>> 0 < $7 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $7 = $1;
      $9 = 0;
      label$46 : {
       if (!$8 & $1 >>> 0 < 1000000001 | $8 >>> 0 < 0) {
        break label$46;
       }
       $9 = __wasm_i64_udiv($1, $8, 1e9);
       $7 = $7 - __wasm_i64_mul($9, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
      }
      $14 = $9;
      HEAP32[$15 >> 2] = $7;
      $9 = ($10 | 0) != ($13 + -1 & 2047) ? $13 : ($2 | 0) == ($10 | 0) ? $13 : $7 ? $13 : $10;
      $15 = $10 + -1 | 0;
      if (($2 | 0) != ($10 | 0)) {
       continue;
      }
      break;
     }
     $16 = $16 + -29 | 0;
     if (!$14) {
      continue;
     }
     break;
    }
    $2 = $2 + -1 & 2047;
    if (($9 | 0) == ($2 | 0)) {
     $1 = ($6 + 768 | 0) + (($9 + 2046 & 2047) << 2) | 0;
     $13 = $9 + -1 & 2047;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[($6 + 768 | 0) + ($13 << 2) >> 2];
    }
    $11 = $11 + 9 | 0;
    HEAP32[($6 + 768 | 0) + ($2 << 2) >> 2] = $14;
    continue;
   }
   break;
  }
  label$48 : {
   label$49 : while (1) {
    $8 = $13 + 1 & 2047;
    $12 = ($6 + 768 | 0) + (($13 + -1 & 2047) << 2) | 0;
    while (1) {
     $7 = ($11 | 0) > 45 ? 9 : 1;
     label$51 : {
      while (1) {
       $9 = $2;
       $1 = 0;
       label$53 : {
        while (1) {
         $2 = $1 + $9 & 2047;
         label$55 : {
          if (($2 | 0) == ($13 | 0)) {
           break label$55;
          }
          $2 = HEAP32[($6 + 768 | 0) + ($2 << 2) >> 2];
          $10 = HEAP32[($1 << 2) + 15760 >> 2];
          if ($2 >>> 0 < $10 >>> 0) {
           break label$55;
          }
          if ($2 >>> 0 > $10 >>> 0) {
           break label$53;
          }
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue;
          }
         }
         break;
        }
        if (($11 | 0) != 36) {
         break label$53;
        }
        $7 = 0;
        $8 = 0;
        $1 = 0;
        $10 = 0;
        $12 = 0;
        while (1) {
         $2 = $1 + $9 & 2047;
         if (($2 | 0) == ($13 | 0)) {
          $13 = $13 + 1 & 2047;
          HEAP32[(($13 << 2) + $6 | 0) + 764 >> 2] = 0;
         }
         __multf3($6 + 752 | 0, $7, $8, $10, $12, 0, 0, 1342177280, 1075633366);
         __floatunsitf($6 + 736 | 0, HEAP32[($6 + 768 | 0) + ($2 << 2) >> 2]);
         __addtf3($6 + 720 | 0, HEAP32[$6 + 752 >> 2], HEAP32[$6 + 756 >> 2], HEAP32[$6 + 760 >> 2], HEAP32[$6 + 764 >> 2], HEAP32[$6 + 736 >> 2], HEAP32[$6 + 740 >> 2], HEAP32[$6 + 744 >> 2], HEAP32[$6 + 748 >> 2]);
         $10 = HEAP32[$6 + 728 >> 2];
         $12 = HEAP32[$6 + 732 >> 2];
         $7 = HEAP32[$6 + 720 >> 2];
         $8 = HEAP32[$6 + 724 >> 2];
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 4) {
          continue;
         }
         break;
        }
        __floatsitf($6 + 704 | 0, $5);
        __multf3($6 + 688 | 0, $7, $8, $10, $12, HEAP32[$6 + 704 >> 2], HEAP32[$6 + 708 >> 2], HEAP32[$6 + 712 >> 2], HEAP32[$6 + 716 >> 2]);
        $10 = HEAP32[$6 + 696 >> 2];
        $12 = HEAP32[$6 + 700 >> 2];
        $7 = 0;
        $8 = 0;
        $2 = HEAP32[$6 + 688 >> 2];
        $11 = HEAP32[$6 + 692 >> 2];
        $15 = $16 + 113 | 0;
        $4 = $15 - $4 | 0;
        $14 = ($4 | 0) < ($3 | 0);
        $3 = $14 ? ($4 | 0) > 0 ? $4 : 0 : $3;
        if (($3 | 0) <= 112) {
         break label$51;
        }
        break label$48;
       }
       $16 = $7 + $16 | 0;
       $2 = $13;
       if (($9 | 0) == ($2 | 0)) {
        continue;
       }
       break;
      }
      $10 = 1e9 >>> $7;
      $14 = -1 << $7 ^ -1;
      $1 = 0;
      $2 = $9;
      while (1) {
       $15 = ($6 + 768 | 0) + ($9 << 2) | 0;
       $19 = HEAP32[$15 >> 2];
       $1 = ($19 >>> $7) + $1 | 0;
       HEAP32[$15 >> 2] = $1;
       $1 = !$1 & ($2 | 0) == ($9 | 0);
       $2 = $1 ? $2 + 1 & 2047 : $2;
       $11 = $1 ? $11 + -9 | 0 : $11;
       $1 = Math_imul($10, $14 & $19);
       $9 = $9 + 1 & 2047;
       if (($9 | 0) != ($13 | 0)) {
        continue;
       }
       break;
      }
      if (!$1) {
       continue;
      }
      if (($2 | 0) != ($8 | 0)) {
       HEAP32[($6 + 768 | 0) + ($13 << 2) >> 2] = $1;
       $13 = $8;
       continue label$49;
      }
      HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 1;
      $2 = $8;
      continue;
     }
     break;
    }
    break;
   }
   __extenddftf2($6 + 640 | 0, scalbn(1, 225 - $3 | 0));
   copysignl($6 + 672 | 0, HEAP32[$6 + 640 >> 2], HEAP32[$6 + 644 >> 2], HEAP32[$6 + 648 >> 2], HEAP32[$6 + 652 >> 2], $2, $11, $10, $12);
   $22 = HEAP32[$6 + 680 >> 2];
   $23 = HEAP32[$6 + 684 >> 2];
   $24 = HEAP32[$6 + 672 >> 2];
   $25 = HEAP32[$6 + 676 >> 2];
   __extenddftf2($6 + 624 | 0, scalbn(1, 113 - $3 | 0));
   fmodl($6 + 656 | 0, $2, $11, $10, $12, HEAP32[$6 + 624 >> 2], HEAP32[$6 + 628 >> 2], HEAP32[$6 + 632 >> 2], HEAP32[$6 + 636 >> 2]);
   $7 = HEAP32[$6 + 656 >> 2];
   $8 = HEAP32[$6 + 660 >> 2];
   $17 = HEAP32[$6 + 664 >> 2];
   $18 = HEAP32[$6 + 668 >> 2];
   __subtf3($6 + 608 | 0, $2, $11, $10, $12, $7, $8, $17, $18);
   __addtf3($6 + 592 | 0, $24, $25, $22, $23, HEAP32[$6 + 608 >> 2], HEAP32[$6 + 612 >> 2], HEAP32[$6 + 616 >> 2], HEAP32[$6 + 620 >> 2]);
   $10 = HEAP32[$6 + 600 >> 2];
   $12 = HEAP32[$6 + 604 >> 2];
   $2 = HEAP32[$6 + 592 >> 2];
   $11 = HEAP32[$6 + 596 >> 2];
  }
  $1 = $9 + 4 & 2047;
  label$60 : {
   if (($1 | 0) == ($13 | 0)) {
    break label$60;
   }
   $1 = HEAP32[($6 + 768 | 0) + ($1 << 2) >> 2];
   label$61 : {
    if ($1 >>> 0 <= 499999999) {
     if (($9 + 5 & 2047) == ($13 | 0) ? !$1 : 0) {
      break label$61;
     }
     __extenddftf2($6 + 480 | 0, +($5 | 0) * .25);
     __addtf3($6 + 464 | 0, $7, $8, $17, $18, HEAP32[$6 + 480 >> 2], HEAP32[$6 + 484 >> 2], HEAP32[$6 + 488 >> 2], HEAP32[$6 + 492 >> 2]);
     $17 = HEAP32[$6 + 472 >> 2];
     $18 = HEAP32[$6 + 476 >> 2];
     $7 = HEAP32[$6 + 464 >> 2];
     $8 = HEAP32[$6 + 468 >> 2];
     break label$61;
    }
    if (($1 | 0) != 5e8) {
     __extenddftf2($6 + 576 | 0, +($5 | 0) * .75);
     __addtf3($6 + 560 | 0, $7, $8, $17, $18, HEAP32[$6 + 576 >> 2], HEAP32[$6 + 580 >> 2], HEAP32[$6 + 584 >> 2], HEAP32[$6 + 588 >> 2]);
     $17 = HEAP32[$6 + 568 >> 2];
     $18 = HEAP32[$6 + 572 >> 2];
     $7 = HEAP32[$6 + 560 >> 2];
     $8 = HEAP32[$6 + 564 >> 2];
     break label$61;
    }
    $20 = +($5 | 0);
    if (($9 + 5 & 2047) == ($13 | 0)) {
     __extenddftf2($6 + 512 | 0, $20 * .5);
     __addtf3($6 + 496 | 0, $7, $8, $17, $18, HEAP32[$6 + 512 >> 2], HEAP32[$6 + 516 >> 2], HEAP32[$6 + 520 >> 2], HEAP32[$6 + 524 >> 2]);
     $17 = HEAP32[$6 + 504 >> 2];
     $18 = HEAP32[$6 + 508 >> 2];
     $7 = HEAP32[$6 + 496 >> 2];
     $8 = HEAP32[$6 + 500 >> 2];
     break label$61;
    }
    __extenddftf2($6 + 544 | 0, $20 * .75);
    __addtf3($6 + 528 | 0, $7, $8, $17, $18, HEAP32[$6 + 544 >> 2], HEAP32[$6 + 548 >> 2], HEAP32[$6 + 552 >> 2], HEAP32[$6 + 556 >> 2]);
    $17 = HEAP32[$6 + 536 >> 2];
    $18 = HEAP32[$6 + 540 >> 2];
    $7 = HEAP32[$6 + 528 >> 2];
    $8 = HEAP32[$6 + 532 >> 2];
   }
   if (($3 | 0) > 111) {
    break label$60;
   }
   fmodl($6 + 448 | 0, $7, $8, $17, $18, 0, 0, 0, 1073676288);
   if (__letf2(HEAP32[$6 + 448 >> 2], HEAP32[$6 + 452 >> 2], HEAP32[$6 + 456 >> 2], HEAP32[$6 + 460 >> 2], 0, 0, 0, 0)) {
    break label$60;
   }
   __addtf3($6 + 432 | 0, $7, $8, $17, $18, 0, 0, 0, 1073676288);
   $17 = HEAP32[$6 + 440 >> 2];
   $18 = HEAP32[$6 + 444 >> 2];
   $7 = HEAP32[$6 + 432 >> 2];
   $8 = HEAP32[$6 + 436 >> 2];
  }
  __addtf3($6 + 416 | 0, $2, $11, $10, $12, $7, $8, $17, $18);
  __subtf3($6 + 400 | 0, HEAP32[$6 + 416 >> 2], HEAP32[$6 + 420 >> 2], HEAP32[$6 + 424 >> 2], HEAP32[$6 + 428 >> 2], $24, $25, $22, $23);
  $10 = HEAP32[$6 + 408 >> 2];
  $12 = HEAP32[$6 + 412 >> 2];
  $2 = HEAP32[$6 + 400 >> 2];
  $11 = HEAP32[$6 + 404 >> 2];
  label$65 : {
   if (($15 & 2147483647) <= (-2 - $21 | 0)) {
    break label$65;
   }
   __multf3($6 + 384 | 0, $2, $11, $10, $12, 0, 0, 0, 1073610752);
   $5 = __letf2($7, $8, $17, $18, 0, 0, 0, 0);
   $20 = Math_abs(__trunctfdf2($2, $11, $10, $12));
   $1 = $20 >= 1.0384593717069655e+34;
   $10 = $1 ? HEAP32[$6 + 392 >> 2] : $10;
   $12 = $1 ? HEAP32[$6 + 396 >> 2] : $12;
   $2 = $1 ? HEAP32[$6 + 384 >> 2] : $2;
   $11 = $1 ? HEAP32[$6 + 388 >> 2] : $11;
   $16 = $1 + $16 | 0;
   if (($16 + 110 | 0) <= ($26 | 0) ? !($14 & ($1 ^ 1 | ($3 | 0) != ($4 | 0)) & ($5 | 0) != 0) : 0) {
    break label$65;
   }
   HEAP32[8356] = 68;
  }
  scalbnl($6 + 368 | 0, $2, $11, $10, $12, $16);
  $10 = HEAP32[$6 + 368 >> 2];
  $12 = HEAP32[$6 + 372 >> 2];
  $2 = HEAP32[$6 + 380 >> 2];
  $1 = HEAP32[$6 + 376 >> 2];
 }
 HEAP32[$0 >> 2] = $10;
 HEAP32[$0 + 4 >> 2] = $12;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 global$0 = $6 + 8960 | 0;
}
function vfscanf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0;
 $7 = global$0 - 304 | 0;
 global$0 = $7;
 $4 = HEAPU8[$1 | 0];
 label$3 : {
  if (!$4) {
   break label$3;
  }
  label$4 : {
   while (1) {
    label$6 : {
     label$7 : {
      if (isspace($4 & 255)) {
       while (1) {
        $4 = $1;
        $1 = $1 + 1 | 0;
        if (isspace(HEAPU8[$4 + 1 | 0])) {
         continue;
        }
        break;
       }
       __shlim($0, 0, 0);
       while (1) {
        $1 = HEAP32[$0 + 4 >> 2];
        label$11 : {
         if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $1 + 1;
          $1 = HEAPU8[$1 | 0];
          break label$11;
         }
         $1 = __shgetc($0);
        }
        if (isspace($1)) {
         continue;
        }
        break;
       }
       label$13 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $1 = HEAP32[$0 + 4 >> 2];
         break label$13;
        }
        $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $1;
       }
       $3 = $1 - HEAP32[$0 + 8 >> 2] | 0;
       $1 = $3;
       $3 = $3 >> 31;
       $5 = $1;
       $9 = $8 + HEAP32[$0 + 124 >> 2] | 0;
       $1 = $12 + HEAP32[$0 + 120 >> 2] | 0;
       if ($1 >>> 0 < $12 >>> 0) {
        $9 = $9 + 1 | 0;
       }
       $8 = $5 + $1 | 0;
       $3 = $3 + $9 | 0;
       $12 = $8;
       $8 = $8 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
       break label$7;
      }
      label$15 : {
       label$16 : {
        label$17 : {
         $4 = HEAPU8[$1 | 0];
         if (($4 | 0) == 37) {
          $3 = HEAPU8[$1 + 1 | 0];
          if (($3 | 0) == 42) {
           break label$17;
          }
          if (($3 | 0) != 37) {
           break label$16;
          }
         }
         __shlim($0, 0, 0);
         $4 = (($4 | 0) == 37) + $1 | 0;
         $1 = HEAP32[$0 + 4 >> 2];
         label$19 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1 + 1;
           $1 = HEAPU8[$1 | 0];
           break label$19;
          }
          $1 = __shgetc($0);
         }
         if (($1 | 0) != HEAPU8[$4 | 0]) {
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
          }
          $16 = 0;
          if (($1 | 0) >= 0) {
           break label$3;
          }
          break label$6;
         }
         $1 = $12 + 1 | 0;
         if ($1 >>> 0 < 1) {
          $8 = $8 + 1 | 0;
         }
         $12 = $1;
         break label$7;
        }
        $4 = $1 + 2 | 0;
        $9 = 0;
        break label$15;
       }
       if (!(!isdigit($3) | HEAPU8[$1 + 2 | 0] != 36)) {
        $4 = $1 + 3 | 0;
        $9 = arg_n($2, HEAPU8[$1 + 1 | 0] + -48 | 0);
        break label$15;
       }
       $4 = $1 + 1 | 0;
       $9 = HEAP32[$2 >> 2];
       $2 = $2 + 4 | 0;
      }
      $16 = 0;
      $1 = 0;
      if (isdigit(HEAPU8[$4 | 0])) {
       while (1) {
        $1 = (HEAPU8[$4 | 0] + Math_imul($1, 10) | 0) + -48 | 0;
        $3 = HEAPU8[$4 + 1 | 0];
        $4 = $4 + 1 | 0;
        if (isdigit($3)) {
         continue;
        }
        break;
       }
      }
      $3 = $4;
      $6 = HEAPU8[$3 | 0];
      label$26 : {
       if (($6 | 0) != 109) {
        break label$26;
       }
       $13 = 0;
       $16 = ($9 | 0) != 0;
       $6 = HEAPU8[$4 + 1 | 0];
       $14 = 0;
       $3 = $4 + 1 | 0;
      }
      $10 = ($6 & 255) + -65 | 0;
      if ($10 >>> 0 > 57) {
       break label$6;
      }
      $4 = $3 + 1 | 0;
      $6 = 3;
      label$27 : {
       label$28 : {
        switch ($10 - 1 | 0) {
        case 38:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 104;
         $4 = $3 ? $5 : $4;
         $6 = $3 ? -2 : -1;
         break label$27;
        case 42:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 108;
         $4 = $3 ? $5 : $4;
         $6 = $3 ? 3 : 1;
         break label$27;
        case 50:
        case 56:
         $6 = 1;
         break label$27;
        case 10:
         $6 = 2;
         break label$27;
        case 40:
         break label$27;
        case 0:
        case 2:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 41:
        case 43:
        case 47:
        case 48:
        case 52:
        case 53:
        case 55:
         break label$6;
        default:
         break label$28;
        }
       }
       $6 = 0;
       $4 = $3;
      }
      $10 = HEAPU8[$4 | 0];
      $3 = ($10 & 47) == 3;
      $17 = $3 ? 1 : $6;
      $15 = $3 ? $10 | 32 : $10;
      label$33 : {
       if (($15 | 0) == 91) {
        break label$33;
       }
       label$34 : {
        if (($15 | 0) != 110) {
         if (($15 | 0) != 99) {
          break label$34;
         }
         $1 = ($1 | 0) > 1 ? $1 : 1;
         break label$33;
        }
        store_int($9, $17, $12, $8);
        break label$7;
       }
       __shlim($0, 0, 0);
       while (1) {
        $3 = HEAP32[$0 + 4 >> 2];
        label$37 : {
         if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $3 + 1;
          $3 = HEAPU8[$3 | 0];
          break label$37;
         }
         $3 = __shgetc($0);
        }
        if (isspace($3)) {
         continue;
        }
        break;
       }
       label$39 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $3 = HEAP32[$0 + 4 >> 2];
         break label$39;
        }
        $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $3;
       }
       $10 = $3 - HEAP32[$0 + 8 >> 2] | 0;
       $3 = $10;
       $10 = $3 >> 31;
       $11 = $3;
       $5 = $8 + HEAP32[$0 + 124 >> 2] | 0;
       $8 = $12 + HEAP32[$0 + 120 >> 2] | 0;
       if ($8 >>> 0 < $12 >>> 0) {
        $5 = $5 + 1 | 0;
       }
       $3 = $8;
       $12 = $11 + $3 | 0;
       $8 = $5 + $10 | 0;
       $8 = $12 >>> 0 < $3 >>> 0 ? $8 + 1 | 0 : $8;
      }
      $3 = $1 >> 31;
      $19 = $3;
      $10 = $1;
      __shlim($0, $1, $3);
      $5 = HEAP32[$0 + 4 >> 2];
      $3 = HEAP32[$0 + 104 >> 2];
      label$41 : {
       if ($5 >>> 0 < $3 >>> 0) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        break label$41;
       }
       if ((__shgetc($0) | 0) < 0) {
        break label$6;
       }
       $3 = HEAP32[$0 + 104 >> 2];
      }
      if ($3) {
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
      }
      label$44 : {
       label$45 : {
        $3 = $15 + -88 | 0;
        if ($3 >>> 0 > 32) {
         $1 = $15 + -65 | 0;
         if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
          break label$44;
         }
         break label$45;
        }
        $6 = 16;
        label$47 : {
         label$48 : {
          label$49 : {
           switch ($3 - 1 | 0) {
           case 16:
            $6 = 0;
            break label$48;
           case 11:
           case 28:
            $6 = 10;
            break label$48;
           case 0:
           case 1:
           case 3:
           case 4:
           case 5:
           case 6:
           case 7:
           case 9:
           case 15:
           case 17:
           case 18:
           case 19:
           case 20:
           case 21:
           case 24:
           case 25:
           case 27:
           case 29:
           case 30:
            break label$44;
           case 8:
           case 12:
           case 13:
           case 14:
            break label$45;
           case 2:
           case 10:
           case 26:
            break label$47;
           case 22:
            break label$49;
           default:
            break label$48;
           }
          }
          $6 = 8;
         }
         $5 = __intscan($0, $6);
         $10 = i64toi32_i32$HIGH_BITS;
         $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
         if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
          break label$4;
         }
         if (!(!$9 | ($15 | 0) != 112)) {
          HEAP32[$9 >> 2] = $5;
          break label$44;
         }
         store_int($9, $17, $5, $10);
         break label$44;
        }
        label$53 : {
         if (($15 | 16) == 115) {
          memset($7 + 32 | 0, -1, 257);
          HEAP8[$7 + 32 | 0] = 0;
          if (($15 | 0) != 115) {
           break label$53;
          }
          HEAP8[$7 + 65 | 0] = 0;
          HEAP8[$7 + 46 | 0] = 0;
          HEAP16[$7 + 42 >> 1] = 0;
          HEAP16[$7 + 44 >> 1] = 0;
          break label$53;
         }
         $11 = HEAPU8[$4 + 1 | 0];
         $5 = ($11 | 0) == 94;
         memset($7 + 32 | 0, $5, 257);
         HEAP8[$7 + 32 | 0] = 0;
         $3 = $5 ? $4 + 2 | 0 : $4 + 1 | 0;
         label$55 : {
          label$56 : {
           label$57 : {
            $4 = HEAPU8[($5 ? 2 : 1) + $4 | 0];
            if (($4 | 0) != 45) {
             if (($4 | 0) == 93) {
              break label$57;
             }
             $6 = ($11 | 0) != 94;
             break label$55;
            }
            $6 = ($11 | 0) != 94;
            HEAP8[$7 + 78 | 0] = $6;
            break label$56;
           }
           $6 = ($11 | 0) != 94;
           HEAP8[$7 + 126 | 0] = $6;
          }
          $3 = $3 + 1 | 0;
         }
         $4 = $3;
         while (1) {
          $3 = HEAPU8[$4 | 0];
          label$60 : {
           if (($3 | 0) != 45) {
            if (!$3) {
             break label$6;
            }
            if (($3 | 0) != 93) {
             break label$60;
            }
            break label$53;
           }
           $3 = 45;
           $11 = HEAPU8[$4 + 1 | 0];
           if (!$11 | ($11 | 0) == 93) {
            break label$60;
           }
           $5 = $4 + 1 | 0;
           $4 = HEAPU8[$4 + -1 | 0];
           label$62 : {
            if ($4 >>> 0 >= $11 >>> 0) {
             $3 = $11;
             break label$62;
            }
            while (1) {
             $4 = $4 + 1 | 0;
             HEAP8[$4 + ($7 + 32 | 0) | 0] = $6;
             $3 = HEAPU8[$5 | 0];
             if ($4 >>> 0 < $3 >>> 0) {
              continue;
             }
             break;
            }
           }
           $4 = $5;
          }
          HEAP8[($3 + $7 | 0) + 33 | 0] = $6;
          $4 = $4 + 1 | 0;
          continue;
         }
        }
        $15 = ($15 | 0) == 99;
        $6 = $15 ? $1 + 1 | 0 : 31;
        label$65 : {
         label$66 : {
          if (($17 | 0) == 1) {
           $3 = $9;
           if ($16) {
            $3 = dlmalloc($6 << 2);
            if (!$3) {
             break label$65;
            }
           }
           HEAP32[$7 + 296 >> 2] = 0;
           HEAP32[$7 + 300 >> 2] = 0;
           $1 = 0;
           while (1) {
            $14 = $3;
            label$70 : {
             while (1) {
              $3 = HEAP32[$0 + 4 >> 2];
              label$72 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$0 + 4 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$72;
               }
               $3 = __shgetc($0);
              }
              if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
               break label$70;
              }
              HEAP8[$7 + 27 | 0] = $3;
              $3 = mbrtowc($7 + 28 | 0, $7 + 27 | 0, $7 + 296 | 0);
              if (($3 | 0) == -2) {
               continue;
              }
              $13 = 0;
              if (($3 | 0) == -1) {
               break label$6;
              }
              if ($14) {
               HEAP32[($1 << 2) + $14 >> 2] = HEAP32[$7 + 28 >> 2];
               $1 = $1 + 1 | 0;
              }
              if (!$16 | ($1 | 0) != ($6 | 0)) {
               continue;
              }
              break;
             }
             $6 = $6 << 1 | 1;
             $3 = dlrealloc($14, $6 << 2);
             if (!$3) {
              break label$6;
             }
             continue;
            }
            break;
           }
           $13 = 0;
           $3 = $7 + 296 | 0;
           $5 = 1;
           label$75 : {
            if (!$3) {
             break label$75;
            }
            $5 = !HEAP32[$3 >> 2];
           }
           if (!$5) {
            break label$6;
           }
           break label$66;
          }
          if ($16) {
           $1 = 0;
           $3 = dlmalloc($6);
           if (!$3) {
            break label$65;
           }
           while (1) {
            $13 = $3;
            while (1) {
             $3 = HEAP32[$0 + 4 >> 2];
             label$79 : {
              if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$0 + 4 >> 2] = $3 + 1;
               $3 = HEAPU8[$3 | 0];
               break label$79;
              }
              $3 = __shgetc($0);
             }
             if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
              $14 = 0;
              break label$66;
             }
             HEAP8[$1 + $13 | 0] = $3;
             $1 = $1 + 1 | 0;
             if (($6 | 0) != ($1 | 0)) {
              continue;
             }
             break;
            }
            $14 = 0;
            $6 = $6 << 1 | 1;
            $3 = dlrealloc($13, $6);
            if ($3) {
             continue;
            }
            break;
           }
           break label$6;
          }
          $1 = 0;
          if ($9) {
           while (1) {
            $3 = HEAP32[$0 + 4 >> 2];
            label$84 : {
             if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $3 + 1;
              $3 = HEAPU8[$3 | 0];
              break label$84;
             }
             $3 = __shgetc($0);
            }
            if (HEAPU8[($3 + $7 | 0) + 33 | 0]) {
             HEAP8[$1 + $9 | 0] = $3;
             $1 = $1 + 1 | 0;
             continue;
            } else {
             $14 = 0;
             $13 = $9;
             break label$66;
            }
           }
          }
          while (1) {
           $1 = HEAP32[$0 + 4 >> 2];
           label$89 : {
            if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $1 + 1;
             $1 = HEAPU8[$1 | 0];
             break label$89;
            }
            $1 = __shgetc($0);
           }
           if (HEAPU8[($1 + $7 | 0) + 33 | 0]) {
            continue;
           }
           break;
          }
          $13 = 0;
          $14 = 0;
          $1 = 0;
         }
         label$91 : {
          if (!HEAP32[$0 + 104 >> 2]) {
           $3 = HEAP32[$0 + 4 >> 2];
           break label$91;
          }
          $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
          HEAP32[$0 + 4 >> 2] = $3;
         }
         $3 = $3 - HEAP32[$0 + 8 >> 2] | 0;
         $5 = $3;
         $11 = $3 + HEAP32[$0 + 120 >> 2] | 0;
         $3 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
         $3 = $11 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
         $5 = $11;
         if (!($3 | $5) | ($15 ? ($5 | 0) != ($10 | 0) | ($3 | 0) != ($19 | 0) : 0)) {
          break label$4;
         }
         if ($16) {
          HEAP32[$9 >> 2] = ($17 | 0) == 1 ? $14 : $13;
         }
         if ($15) {
          break label$44;
         }
         if ($14) {
          HEAP32[($1 << 2) + $14 >> 2] = 0;
         }
         if (!$13) {
          $13 = 0;
          break label$44;
         }
         HEAP8[$1 + $13 | 0] = 0;
         break label$44;
        }
        $13 = 0;
        $14 = 0;
        break label$6;
       }
       __floatscan($7, $0, $17);
       $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
       if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
        break label$4;
       }
       if (!$9 | $17 >>> 0 > 2) {
        break label$44;
       }
       $5 = HEAP32[$7 + 8 >> 2];
       $10 = HEAP32[$7 + 12 >> 2];
       $3 = HEAP32[$7 >> 2];
       $1 = HEAP32[$7 + 4 >> 2];
       label$96 : {
        switch ($17 - 1 | 0) {
        default:
         wasm2js_i32$0 = $9, wasm2js_f32$0 = __trunctfsf2($3, $1, $5, $10), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
         break label$44;
        case 0:
         wasm2js_i32$0 = $9, wasm2js_f64$0 = __trunctfdf2($3, $1, $5, $10), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
         break label$44;
        case 1:
         break label$96;
        }
       }
       HEAP32[$9 >> 2] = $3;
       HEAP32[$9 + 4 >> 2] = $1;
       HEAP32[$9 + 8 >> 2] = $5;
       HEAP32[$9 + 12 >> 2] = $10;
      }
      $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
      $1 = $3;
      $3 = $3 >> 31;
      $5 = $1;
      $8 = $8 + HEAP32[$0 + 124 >> 2] | 0;
      $1 = $12 + HEAP32[$0 + 120 >> 2] | 0;
      if ($1 >>> 0 < $12 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $12 = $5 + $1 | 0;
      $8 = $3 + $8 | 0;
      $8 = $12 >>> 0 < $1 >>> 0 ? $8 + 1 | 0 : $8;
      $18 = (($9 | 0) != 0) + $18 | 0;
     }
     $1 = $4 + 1 | 0;
     $4 = HEAPU8[$4 + 1 | 0];
     if ($4) {
      continue;
     }
     break label$3;
    }
    break;
   }
   $18 = $18 ? $18 : -1;
  }
  if (!$16) {
   break label$3;
  }
  dlfree($13);
  dlfree($14);
 }
 global$0 = $7 + 304 | 0;
 return $18;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
          if (($3 | 0) != 71) {
           if (($3 | 0) != 84) {
            break label$1;
           }
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
           $4 = $3 + -83 | 0;
           if ($4 >>> 0 <= 4) {
            break label$9;
           }
           $4 = $3 + -67 | 0;
           if ($4 >>> 0 > 6) {
            if (($3 | 0) != 99) {
             break label$8;
            }
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
             break label$1;
            }
            if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
             break label$1;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
            HEAP32[$2 >> 2] = $1;
            if (!$1) {
             break label$3;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19429, $2);
            break label$1;
           }
           label$12 : {
            switch ($4 - 1 | 0) {
            case 5:
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
             $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$2 >> 2] = $1;
             if (!$1) {
              break label$3;
             }
             $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19396, $2);
             break label$1;
            default:
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$2 + 12 >> 2] = $3;
             if (!$3) {
              break label$1;
             }
             $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2, $0, 1);
             if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($2)) {
              break label$1;
             }
             if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
              break label$1;
             }
             $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
             HEAP32[$2 >> 2] = $1;
             if (!$1) {
              break label$3;
             }
             $1 = $2 + 12 | 0;
             $1 = $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$2 >> 2], HEAP32[$1 >> 2]);
             break label$1;
            case 4:
             break label$12;
            case 0:
            case 1:
            case 2:
            case 3:
             break label$8;
            }
           }
           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
           HEAP32[$2 >> 2] = $3;
           if (!$3) {
            break label$1;
           }
           $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19490, $2);
           break label$1;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) + -82 | 0;
          if ($3 >>> 0 > 4) {
           break label$1;
          }
          label$15 : {
           switch ($3 - 1 | 0) {
           case 3:
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
            HEAP32[$2 >> 2] = $3;
            if (!$3) {
             break label$1;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19571, $2);
            break label$1;
           case 0:
           case 1:
           case 2:
            break label$1;
           default:
            break label$15;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
          HEAP32[$2 >> 2] = $3;
          if (!$3) {
           break label$1;
          }
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $2 + 12 | 0);
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
          if (!$1) {
           $1 = 0;
           if (!$3) {
            break label$1;
           }
          }
          $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19591, $2);
          break label$1;
         }
         switch ($4 - 1 | 0) {
         case 2:
          break label$4;
         case 0:
          break label$5;
         case 3:
          break label$7;
         case 1:
          break label$8;
         default:
          break label$6;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
        if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
         break label$1;
        }
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
        HEAP32[$2 >> 2] = $1;
        if (!$1) {
         break label$3;
        }
        if (($3 | 0) == 118) {
         $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19531, $2);
         break label$1;
        }
        $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19549, $2);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
       HEAP32[$2 >> 2] = $3;
       if (!$3) {
        break label$1;
       }
       $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 19456, $2);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$2 >> 2] = $1;
      if (!$1) {
       break label$3;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19410, $2);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
     HEAP32[$2 >> 2] = $1;
     if (!$1) {
      break label$3;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19387, $2);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$2 >> 2] = $1;
    if ($1) {
     break label$2;
    }
   }
   $1 = 0;
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, 19375, $2);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function arGetTransMatMultiSquare2($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $12 = global$0 - 192 | 0;
 global$0 = $12;
 $8 = HEAP32[$3 + 4 >> 2];
 while (1) {
  label$2 : {
   if (($9 | 0) >= ($8 | 0)) {
    $11 = 0;
    $2 = 0;
    while (1) {
     label$5 : {
      label$6 : {
       if (($2 | 0) < ($8 | 0)) {
        $5 = Math_imul($2, 320);
        $7 = $5 + HEAP32[$3 >> 2] | 0;
        $6 = HEAP32[$7 + 304 >> 2];
        if (($6 | 0) < 0) {
         break label$5;
        }
        $6 = ($6 << 8) + $1 | 0;
        if (!!(arGetTransMatSquare($0, $6, HEAPF64[$7 + 8 >> 3], $12) > 4)) {
         HEAP32[($5 + HEAP32[$3 >> 2] | 0) + 304 >> 2] = -1;
         if (HEAP32[$6 + 236 >> 2]) {
          break label$5;
         }
         HEAP32[$6 + 236 >> 2] = 7;
         break label$5;
        }
        $7 = 0;
        $6 = HEAP32[$6 >> 2];
        if (($9 | 0) >= ($6 | 0) ? $11 : 0) {
         break label$6;
        }
        while (1) {
         $5 = 0;
         if (($7 | 0) == 3) {
          $13 = $2;
          $9 = $6;
          break label$6;
         } else {
          while (1) {
           if (($5 | 0) != 4) {
            $13 = $5 << 3;
            $9 = $7 << 5;
            $8 = $13 + ($9 + ($12 + 96 | 0) | 0) | 0;
            $9 = $13 + ($9 + $12 | 0) | 0;
            $13 = HEAP32[$9 + 4 >> 2];
            HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
            HEAP32[$8 + 4 >> 2] = $13;
            $5 = $5 + 1 | 0;
            continue;
           }
           break;
          }
          $7 = $7 + 1 | 0;
          continue;
         }
        }
       }
       label$14 : {
        if (!(($11 | 0) >= HEAP32[$3 + 128 >> 2] ? $11 : 0)) {
         HEAP32[$3 + 104 >> 2] = 0;
         break label$14;
        }
        arUtilMatMul($12 + 96 | 0, (HEAP32[$3 >> 2] + Math_imul($13, 320) | 0) + 112 | 0, $12);
        label$17 : {
         label$18 : {
          $9 = dlmalloc($11 << 6);
          if ($9) {
           $13 = dlmalloc(Math_imul($11, 96));
           if (!$13) {
            break label$2;
           }
           $11 = $11 << 2;
           $19 = HEAP32[$3 + 4 >> 2];
           $6 = 0;
           $7 = 0;
           while (1) {
            if (($6 | 0) < ($19 | 0)) {
             $2 = HEAP32[$3 >> 2] + Math_imul($6, 320) | 0;
             $5 = HEAP32[$2 + 304 >> 2];
             if (($5 | 0) >= 0) {
              $15 = ($5 << 8) + $1 | 0;
              $8 = $15 + 168 | 0;
              $15 = HEAP32[$15 + 16 >> 2];
              $14 = $8 + ((4 - $15 | 0) % 4 << 4) | 0;
              $18 = HEAP32[$14 + 4 >> 2];
              $5 = $7 << 6;
              $16 = $5 + $9 | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $18 = HEAP32[$14 + 12 >> 2];
              $16 = $9 + ($5 | 8) | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 + 8 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $14 = $8 + ((5 - $15 | 0) % 4 << 4) | 0;
              $18 = HEAP32[$14 + 4 >> 2];
              $16 = $9 + ($5 | 16) | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $18 = HEAP32[$14 + 12 >> 2];
              $16 = $9 + ($5 | 24) | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 + 8 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $14 = $8 + ((6 - $15 | 0) % 4 << 4) | 0;
              $18 = HEAP32[$14 + 4 >> 2];
              $16 = $9 + ($5 | 32) | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $18 = HEAP32[$14 + 12 >> 2];
              $16 = $9 + ($5 | 40) | 0;
              HEAP32[$16 >> 2] = HEAP32[$14 + 8 >> 2];
              HEAP32[$16 + 4 >> 2] = $18;
              $8 = $8 + ((7 - $15 | 0) % 4 << 4) | 0;
              $15 = HEAP32[$8 + 4 >> 2];
              $14 = $9 + ($5 | 48) | 0;
              HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
              HEAP32[$14 + 4 >> 2] = $15;
              $15 = HEAP32[$8 + 12 >> 2];
              $5 = $9 + ($5 | 56) | 0;
              HEAP32[$5 >> 2] = HEAP32[$8 + 8 >> 2];
              HEAP32[$5 + 4 >> 2] = $15;
              $14 = HEAP32[$2 + 212 >> 2];
              $8 = Math_imul($7, 96);
              $5 = $8 + $13 | 0;
              HEAP32[$5 >> 2] = HEAP32[$2 + 208 >> 2];
              HEAP32[$5 + 4 >> 2] = $14;
              $14 = HEAP32[$2 + 220 >> 2];
              $15 = $13 + ($8 | 8) | 0;
              HEAP32[$15 >> 2] = HEAP32[$2 + 216 >> 2];
              HEAP32[$15 + 4 >> 2] = $14;
              $14 = HEAP32[$2 + 228 >> 2];
              $15 = $13 + ($8 | 16) | 0;
              HEAP32[$15 >> 2] = HEAP32[$2 + 224 >> 2];
              HEAP32[$15 + 4 >> 2] = $14;
              $15 = HEAP32[$2 + 236 >> 2];
              $8 = $13 + ($8 | 24) | 0;
              HEAP32[$8 >> 2] = HEAP32[$2 + 232 >> 2];
              HEAP32[$8 + 4 >> 2] = $15;
              $8 = HEAP32[$2 + 244 >> 2];
              HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 240 >> 2];
              HEAP32[$5 + 36 >> 2] = $8;
              $8 = HEAP32[$2 + 252 >> 2];
              HEAP32[$5 + 40 >> 2] = HEAP32[$2 + 248 >> 2];
              HEAP32[$5 + 44 >> 2] = $8;
              $8 = HEAP32[$2 + 260 >> 2];
              HEAP32[$5 + 48 >> 2] = HEAP32[$2 + 256 >> 2];
              HEAP32[$5 + 52 >> 2] = $8;
              $8 = HEAP32[$2 + 268 >> 2];
              HEAP32[$5 + 56 >> 2] = HEAP32[$2 + 264 >> 2];
              HEAP32[$5 + 60 >> 2] = $8;
              $15 = HEAP32[$2 + 276 >> 2];
              $8 = $5 - -64 | 0;
              HEAP32[$8 >> 2] = HEAP32[$2 + 272 >> 2];
              HEAP32[$8 + 4 >> 2] = $15;
              $8 = HEAP32[$2 + 284 >> 2];
              HEAP32[$5 + 72 >> 2] = HEAP32[$2 + 280 >> 2];
              HEAP32[$5 + 76 >> 2] = $8;
              $8 = HEAP32[$2 + 292 >> 2];
              HEAP32[$5 + 80 >> 2] = HEAP32[$2 + 288 >> 2];
              HEAP32[$5 + 84 >> 2] = $8;
              $8 = HEAP32[$2 + 300 >> 2];
              HEAP32[$5 + 88 >> 2] = HEAP32[$2 + 296 >> 2];
              HEAP32[$5 + 92 >> 2] = $8;
              $7 = $7 + 1 | 0;
             }
             $6 = $6 + 1 | 0;
             continue;
            }
            break;
           }
           if (!HEAP32[$3 + 104 >> 2]) {
            $4 = !$4;
            $2 = $3 + 8 | 0;
            $10 = arGetTransMat($0, $12, $9, $13, $11, $2);
            if ($4 | $10 >= 20 ^ 1) {
             break label$17;
            }
            icpSetInlierProbability(HEAP32[$0 >> 2], .8);
            $10 = arGetTransMatRobust($0, $12, $9, $13, $11, $2);
            if (!($10 >= 20)) {
             break label$17;
            }
            icpSetInlierProbability(HEAP32[$0 >> 2], .6);
            $10 = arGetTransMatRobust($0, $12, $9, $13, $11, $2);
            if (!($10 >= 20)) {
             break label$17;
            }
            icpSetInlierProbability(HEAP32[$0 >> 2], .4);
            $10 = arGetTransMatRobust($0, $12, $9, $13, $11, $2);
            if (!($10 >= 20)) {
             break label$17;
            }
            icpSetInlierProbability(HEAP32[$0 >> 2], 0);
            $10 = arGetTransMatRobust($0, $12, $9, $13, $11, $2);
            break label$17;
           }
           $17 = arGetTransMat($0, $12, $9, $13, $11, $12 + 96 | 0);
           $2 = $3 + 8 | 0;
           $10 = arGetTransMat($0, $2, $9, $13, $11, $2);
           if ($4) {
            if (!($17 < $10)) {
             break label$18;
            }
            $7 = 0;
            while (1) {
             $5 = 0;
             if (($7 | 0) == 3) {
              $10 = $17;
              break label$18;
             } else {
              while (1) {
               if (($5 | 0) != 4) {
                $6 = $5 << 3;
                $4 = $7 << 5;
                $8 = $6 + ($4 + $3 | 0) | 0;
                $4 = $6 + ($4 + ($12 + 96 | 0) | 0) | 0;
                $6 = HEAP32[$4 + 4 >> 2];
                HEAP32[$8 + 8 >> 2] = HEAP32[$4 >> 2];
                HEAP32[$8 + 12 >> 2] = $6;
                $5 = $5 + 1 | 0;
                continue;
               }
               break;
              }
              $7 = $7 + 1 | 0;
              continue;
             }
            }
           }
           if (!($17 < $10)) {
            break label$17;
           }
           $7 = 0;
           while (1) {
            $5 = 0;
            if (($7 | 0) == 3) {
             $10 = $17;
             break label$17;
            } else {
             while (1) {
              if (($5 | 0) != 4) {
               $2 = $5 << 3;
               $0 = $7 << 5;
               $4 = $2 + ($0 + $3 | 0) | 0;
               $0 = $2 + ($0 + ($12 + 96 | 0) | 0) | 0;
               $2 = HEAP32[$0 + 4 >> 2];
               HEAP32[$4 + 8 >> 2] = HEAP32[$0 >> 2];
               HEAP32[$4 + 12 >> 2] = $2;
               $5 = $5 + 1 | 0;
               continue;
              }
              break;
             }
             $7 = $7 + 1 | 0;
             continue;
            }
           }
          }
          break label$2;
         }
         if (!($10 >= 20)) {
          break label$17;
         }
         icpSetInlierProbability(HEAP32[$0 >> 2], .8);
         $17 = arGetTransMatRobust($0, $12, $9, $13, $11, $12 + 96 | 0);
         $10 = arGetTransMatRobust($0, $2, $9, $13, $11, $2);
         if (!!($17 < $10)) {
          $7 = 0;
          while (1) {
           $5 = 0;
           if (($7 | 0) == 3) {
            $10 = $17;
           } else {
            while (1) {
             if (($5 | 0) != 4) {
              $6 = $5 << 3;
              $4 = $7 << 5;
              $8 = $6 + ($4 + $3 | 0) | 0;
              $4 = $6 + ($4 + ($12 + 96 | 0) | 0) | 0;
              $6 = HEAP32[$4 + 4 >> 2];
              HEAP32[$8 + 8 >> 2] = HEAP32[$4 >> 2];
              HEAP32[$8 + 12 >> 2] = $6;
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            }
            $7 = $7 + 1 | 0;
            continue;
           }
           break;
          }
         }
         if (!($10 >= 20)) {
          break label$17;
         }
         icpSetInlierProbability(HEAP32[$0 >> 2], .6);
         $17 = arGetTransMatRobust($0, $12, $9, $13, $11, $12 + 96 | 0);
         $10 = arGetTransMatRobust($0, $2, $9, $13, $11, $2);
         if (!!($17 < $10)) {
          $7 = 0;
          while (1) {
           $5 = 0;
           if (($7 | 0) == 3) {
            $10 = $17;
           } else {
            while (1) {
             if (($5 | 0) != 4) {
              $6 = $5 << 3;
              $4 = $7 << 5;
              $8 = $6 + ($4 + $3 | 0) | 0;
              $4 = $6 + ($4 + ($12 + 96 | 0) | 0) | 0;
              $6 = HEAP32[$4 + 4 >> 2];
              HEAP32[$8 + 8 >> 2] = HEAP32[$4 >> 2];
              HEAP32[$8 + 12 >> 2] = $6;
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            }
            $7 = $7 + 1 | 0;
            continue;
           }
           break;
          }
         }
         if (!($10 >= 20)) {
          break label$17;
         }
         icpSetInlierProbability(HEAP32[$0 >> 2], .4);
         $17 = arGetTransMatRobust($0, $12, $9, $13, $11, $12 + 96 | 0);
         $10 = arGetTransMatRobust($0, $2, $9, $13, $11, $2);
         if (!!($17 < $10)) {
          $7 = 0;
          while (1) {
           $5 = 0;
           if (($7 | 0) == 3) {
            $10 = $17;
           } else {
            while (1) {
             if (($5 | 0) != 4) {
              $6 = $5 << 3;
              $4 = $7 << 5;
              $8 = $6 + ($4 + $3 | 0) | 0;
              $4 = $6 + ($4 + ($12 + 96 | 0) | 0) | 0;
              $6 = HEAP32[$4 + 4 >> 2];
              HEAP32[$8 + 8 >> 2] = HEAP32[$4 >> 2];
              HEAP32[$8 + 12 >> 2] = $6;
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            }
            $7 = $7 + 1 | 0;
            continue;
           }
           break;
          }
         }
         if (!($10 >= 20)) {
          break label$17;
         }
         icpSetInlierProbability(HEAP32[$0 >> 2], 0);
         $17 = arGetTransMatRobust($0, $12, $9, $13, $11, $12 + 96 | 0);
         $10 = arGetTransMatRobust($0, $2, $9, $13, $11, $2);
         if (!($17 < $10)) {
          break label$17;
         }
         $7 = 0;
         while (1) {
          $5 = 0;
          if (($7 | 0) == 3) {
           $10 = $17;
          } else {
           while (1) {
            if (($5 | 0) != 4) {
             $2 = $5 << 3;
             $0 = $7 << 5;
             $4 = $2 + ($0 + $3 | 0) | 0;
             $0 = $2 + ($0 + ($12 + 96 | 0) | 0) | 0;
             $2 = HEAP32[$0 + 4 >> 2];
             HEAP32[$4 + 8 >> 2] = HEAP32[$0 >> 2];
             HEAP32[$4 + 12 >> 2] = $2;
             $5 = $5 + 1 | 0;
             continue;
            }
            break;
           }
           $7 = $7 + 1 | 0;
           continue;
          }
          break;
         }
        }
        dlfree($13);
        dlfree($9);
        if (!!($10 < 20)) {
         HEAP32[$3 + 104 >> 2] = 1;
         break label$14;
        }
        HEAP32[$3 + 104 >> 2] = 0;
        $0 = HEAP32[$3 + 4 >> 2];
        $5 = 0;
        while (1) {
         if (($5 | 0) >= ($0 | 0)) {
          break label$14;
         }
         $2 = HEAP32[(HEAP32[$3 >> 2] + Math_imul($5, 320) | 0) + 304 >> 2];
         label$60 : {
          if (($2 | 0) < 0) {
           break label$60;
          }
          $2 = ($2 << 8) + $1 | 0;
          if (HEAP32[$2 + 236 >> 2]) {
           break label$60;
          }
          HEAP32[$2 + 236 >> 2] = 8;
         }
         $5 = $5 + 1 | 0;
         continue;
        }
       }
       global$0 = $12 + 192 | 0;
       return;
      }
      $11 = $11 + 1 | 0;
     }
     $2 = $2 + 1 | 0;
     $8 = HEAP32[$3 + 4 >> 2];
     continue;
    }
   }
   label$61 : {
    $11 = HEAP32[$3 >> 2] + Math_imul($9, 320) | 0;
    if (HEAP32[$11 + 4 >> 2]) {
     $6 = -1;
     $5 = 0;
     while (1) {
      $7 = $6;
      label$64 : {
       label$65 : {
        if (($5 | 0) < ($2 | 0)) {
         label$67 : {
          label$68 : {
           $6 = ($5 << 8) + $1 | 0;
           $15 = HEAP32[$6 + 12 >> 2];
           if ($15) {
            break label$68;
           }
           $14 = HEAP32[$6 + 248 >> 2];
           $19 = HEAP32[$6 + 252 >> 2];
           if (!($14 | $19)) {
            break label$68;
           }
           if (($14 | 0) == HEAP32[$11 + 312 >> 2] & HEAP32[$11 + 316 >> 2] == ($19 | 0)) {
            break label$67;
           }
           break label$65;
          }
          if (($15 | 0) != HEAP32[$11 >> 2]) {
           break label$65;
          }
         }
         $10 = HEAPF64[$6 + 48 >> 3];
         if ($10 < HEAPF64[$3 + 120 >> 3]) {
          break label$65;
         }
         $6 = $5;
         if (($7 | 0) == -1) {
          break label$64;
         }
         $6 = $7;
         if (!(HEAPF64[(($7 << 8) + $1 | 0) + 48 >> 3] < $10)) {
          break label$64;
         }
         $6 = $5;
         break label$64;
        }
        HEAP32[$11 + 304 >> 2] = $7;
        if (($7 | 0) < 0) {
         break label$61;
        }
        $6 = ($7 << 8) + $1 | 0;
        HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 24 >> 2];
        break label$61;
       }
       $6 = $7;
      }
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $6 = -1;
    $5 = 0;
    while (1) {
     $7 = $6;
     label$70 : {
      label$71 : {
       if (($5 | 0) < ($2 | 0)) {
        $6 = ($5 << 8) + $1 | 0;
        if (HEAP32[$6 + 8 >> 2] != HEAP32[$11 >> 2]) {
         break label$71;
        }
        $10 = HEAPF64[$6 + 40 >> 3];
        if ($10 < HEAPF64[$3 + 112 >> 3]) {
         break label$71;
        }
        $6 = $5;
        if (($7 | 0) == -1) {
         break label$70;
        }
        $6 = $7;
        if (!(HEAPF64[(($7 << 8) + $1 | 0) + 40 >> 3] < $10)) {
         break label$70;
        }
        $6 = $5;
        break label$70;
       }
       HEAP32[$11 + 304 >> 2] = $7;
       if (($7 | 0) < 0) {
        break label$61;
       }
       $6 = ($7 << 8) + $1 | 0;
       HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
       break label$61;
      }
      $6 = $7;
     }
     $5 = $5 + 1 | 0;
     continue;
    }
   }
   $9 = $9 + 1 | 0;
   continue;
  }
  break;
 }
 arLog(3, 1808, 0);
 exit(1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 288 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76)) {
   break label$1;
  }
  label$2 : {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -84 | 0;
   if ($3 >>> 0 > 37) {
    break label$2;
   }
   label$3 : {
    switch ($3 - 1 | 0) {
    case 34:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 280 | 0, 20527);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1);
     break label$1;
    case 13:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 272 | 0, 20535);
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 16 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 20 >> 2] = $4;
     if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
      HEAP32[$1 + 136 >> 2] = 0;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 136 | 0);
      break label$1;
     }
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 264 | 0, 20539);
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1 + 12 >> 2] = $4;
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
      break label$1;
     }
     HEAP32[$1 + 136 >> 2] = 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 136 | 0);
     break label$1;
    case 14:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 256 | 0, 20543);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 28 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0);
     break label$1;
    case 12:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 248 | 0, 20548);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 36 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0);
     break label$1;
    case 19:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 240 | 0, 20560);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 44 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0);
     break label$1;
    case 30:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 232 | 0, 20574);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 52 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0);
     break label$1;
    case 31:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 224 | 0, 20580);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 60 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 56 | 0);
     break label$1;
    case 20:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 216 | 0, 20595);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 64 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 68 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 - -64 | 0);
     break label$1;
    case 21:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 208 | 0, 20596);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 72 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 76 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 72 | 0);
     break label$1;
    case 23:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 200 | 0, 20598);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 80 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 84 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 80 | 0);
     break label$1;
    case 24:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 192 | 0, 20600);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 88 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 92 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 88 | 0);
     break label$1;
    case 35:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 184 | 0, 20603);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 96 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 100 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 96 | 0);
     break label$1;
    case 36:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 176 | 0, 20606);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 104 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 108 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 104 | 0);
     break label$1;
    case 25:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 168 | 0, 20610);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 112 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 116 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 112 | 0);
     break label$1;
    case 26:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 160 | 0, 20619);
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 120 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 124 >> 2] = $3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1 + 120 | 0);
     break label$1;
    case 17:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($0);
     break label$1;
    case 15:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($0);
     break label$1;
    case 16:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($0);
     break label$1;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 18:
    case 22:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
     break label$2;
    case 10:
     break label$3;
    default:
     break label$1;
    }
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 152 | 0, 19305);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 128 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 132 >> 2] = $3;
   label$23 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 128 | 0)) {
     break label$23;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
    if (!$2) {
     break label$23;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     break label$1;
    }
   }
   $2 = 0;
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 148 >> 2] = $3;
  if (!$3) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 136 | 0, $0, 0);
  $5 = $28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 136 | 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69);
  if (!$5) {
   if (!$4) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 148 | 0, $1 + 136 | 0);
   break label$1;
  }
  $2 = $4 ? $3 : 0;
 }
 global$0 = $1 + 288 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 78)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  if ($1) {
   HEAP32[$1 + 4 >> 2] = $3;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 79)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 2;
    break label$3;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 82)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 1;
    break label$3;
   }
   if (!$1) {
    break label$3;
   }
   HEAP8[$1 + 8 | 0] = 0;
  }
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = $2 + 44;
  HEAP32[$2 + 24 >> 2] = $2 + 40;
  HEAP32[$2 + 28 >> 2] = $0;
  $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 19958);
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2)) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 19961), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
  }
  $1 = $0 + 148 | 0;
  while (1) {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
        $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
        if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
         if (HEAP32[$2 + 40 >> 2]) {
          continue;
         }
         break label$8;
        }
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) & 255;
        $4 = $3 + -67 | 0;
        if ($4 >>> 0 <= 6) {
         break label$11;
        }
        $3 = $3 + -83 | 0;
        if ($3 >>> 0 > 1) {
         break label$10;
        }
        if (!($3 - 1)) {
         if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0))) {
          break label$8;
         }
         $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 40 | 0);
         continue;
        }
        if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 116) {
         break label$10;
        }
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
        HEAP32[$2 + 12 >> 2] = $3;
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $3)) {
         break label$8;
        }
        if (($3 | 0) == HEAP32[$2 + 40 >> 2]) {
         continue;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 12 | 0);
        continue;
       }
       $3 = 0;
       if (!HEAP32[$2 + 40 >> 2]) {
        break label$1;
       }
       if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1)) {
        break label$1;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -4;
       $3 = HEAP32[$2 + 40 >> 2];
       break label$1;
      }
      label$15 : {
       label$16 : {
        switch ($4 - 1 | 0) {
        case 1:
        case 2:
        case 3:
        case 4:
         break label$10;
        case 0:
         break label$16;
        case 5:
         break label$9;
        default:
         break label$15;
        }
       }
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
       if (($3 | 0) == 67) {
        break label$10;
       }
       $3 = $3 & 255;
       if (($3 | 0) != 84 ? ($3 | 0) != 116 : 0) {
        break label$15;
       }
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0))) {
        break label$8;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 40 | 0);
       continue;
      }
      $3 = 0;
      if (!HEAP32[$2 + 40 >> 2]) {
       break label$1;
      }
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $2 + 40 | 0, HEAP32[$2 + 44 >> 2]))) {
       break label$1;
      }
      $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, HEAP32[$2 + 40 >> 2]);
      HEAP32[$2 + 40 >> 2] = $4;
      if (!$4) {
       break label$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 40 | 0);
      continue;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, HEAP32[$2 + 44 >> 2]))) {
      break label$8;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 40 | 0);
     continue;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, HEAP32[$2 + 44 >> 2] != 0);
    HEAP32[$2 + 12 >> 2] = $3;
    if (!$3 | !HEAP32[$2 + 40 >> 2]) {
     break label$8;
    }
    wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 40 | 0, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
    $3 = HEAP32[$2 + 44 >> 2];
    if ($3) {
     HEAP8[$3 + 1 | 0] = 1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 40 | 0);
    continue;
   }
   break;
  }
  $3 = 0;
 }
 global$0 = $2 + 48 | 0;
 return $3;
}
function arDetectMarker($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 $3 = -1;
 label$1 : {
  if (!$0 | !$1) {
   break label$1;
  }
  HEAP32[$0 + 44 >> 2] = 0;
  $12 = $0 + 44 | 0;
  label$2 : {
   label$3 : {
    $5 = HEAP32[$0 + 7062388 >> 2];
    label$4 : {
     if (($5 | 0) == 4) {
      $2 = HEAP32[$0 + 7062396 >> 2];
      label$6 : {
       if (($2 | 0) >= 1) {
        HEAP32[$0 + 7062396 >> 2] = $2 + -1;
        break label$6;
       }
       $7 = HEAP32[$0 + 16 >> 2];
       $2 = $7 + HEAP32[$0 + 7062400 >> 2] | 0;
       $11 = ($2 | 0) < 255 ? $2 : 255;
       HEAP32[$6 + 68 >> 2] = $11;
       $2 = HEAP32[$0 + 7062404 >> 2];
       HEAP32[$6 + 76 >> 2] = $7;
       $2 = $7 - $2 | 0;
       $13 = ($2 | 0) > 0 ? $2 : 0;
       HEAP32[$6 + 72 >> 2] = $13;
       $14 = $0 + 48 | 0;
       $10 = $0 + 15408 | 0;
       $15 = $0 + 15416 | 0;
       $8 = $0 + 4834144 | 0;
       $5 = 0;
       while (1) {
        if (($5 | 0) != 3) {
         $2 = $5 << 2;
         if ((arLabeling(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$2 + ($6 + 68 | 0) >> 2], HEAP32[$0 + 20 >> 2], $8, 0) | 0) < 0) {
          break label$1;
         }
         if ((arDetectMarker2(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $8, HEAP32[$0 + 20 >> 2], $15, $10) | 0) < 0) {
          break label$1;
         }
         if ((arGetMarkerInfo(HEAP32[$1 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 + 4 >> 2], $15, HEAP32[$0 + 15408 >> 2], HEAP32[$0 + 7062384 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 32 >> 2] + 184 | 0, HEAPF64[$0 + 7062416 >> 3], $14, $12, HEAP32[$0 + 7062424 >> 2]) | 0) < 0) {
          break label$1;
         }
         HEAP32[$2 + ($6 + 56 | 0) >> 2] = HEAP32[$12 >> 2];
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       }
       label$10 : {
        if (HEAP32[$0 >> 2] != 1) {
         $5 = HEAP32[$6 + 64 >> 2];
         $8 = HEAP32[$6 + 56 >> 2];
         break label$10;
        }
        HEAP32[$6 + 48 >> 2] = $11;
        $8 = HEAP32[$6 + 56 >> 2];
        HEAP32[$6 + 52 >> 2] = $8;
        HEAP32[$6 + 32 >> 2] = $13;
        HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 60 >> 2];
        HEAP32[$6 + 40 >> 2] = $7;
        $5 = HEAP32[$6 + 64 >> 2];
        HEAP32[$6 + 44 >> 2] = $5;
        arLog(3, 4654, $6 + 32 | 0);
       }
       $2 = HEAP32[$6 + 60 >> 2];
       if (!(($8 | 0) > ($5 | 0) | ($2 | 0) > ($5 | 0))) {
        $2 = $0;
        $1 = HEAP32[$0 + 7062400 >> 2];
        $3 = HEAP32[$0 + 7062404 >> 2];
        label$13 : {
         label$14 : {
          if (($1 | 0) < ($3 | 0)) {
           $1 = $1 + 1 | 0;
           break label$14;
          }
          if (($1 | 0) > ($3 | 0)) {
           HEAP32[$0 + 7062404 >> 2] = $3 + 1;
           break label$13;
          }
          HEAP32[$0 + 7062404 >> 2] = $3 + 1;
          $1 = $1 + 1 | 0;
         }
         HEAP32[$2 + 7062400 >> 2] = $1;
        }
        $2 = $7;
        if (($2 + $1 | 0) >= 255) {
         HEAP32[$0 + 7062400 >> 2] = 1;
         $1 = 1;
        }
        if (($2 | 0) <= ($1 | 0)) {
         HEAP32[$0 + 7062404 >> 2] = 1;
        }
        HEAP32[$0 + 7062396 >> 2] = HEAP32[$0 + 7062392 >> 2];
        break label$4;
       }
       $3 = ($8 | 0) < ($2 | 0) ? $13 : $11;
       HEAP32[$0 + 16 >> 2] = $3;
       $8 = 1;
       $2 = $3 - $7 | 0;
       label$20 : {
        if (($2 | 0) >= 1) {
         HEAP32[$0 + 7062400 >> 2] = $2;
         break label$20;
        }
        HEAP32[$0 + 7062400 >> 2] = 1;
        $8 = 0 - $2 | 0;
       }
       HEAP32[$0 + 7062404 >> 2] = $8;
       if (HEAP32[$0 >> 2] == 1) {
        HEAP32[$6 + 16 >> 2] = $3;
        arLog(3, 5018, $6 + 16 | 0);
        HEAP32[$0 + 7062396 >> 2] = HEAP32[$0 + 7062392 >> 2];
        break label$6;
       }
       HEAP32[$0 + 7062396 >> 2] = HEAP32[$0 + 7062392 >> 2];
      }
      $5 = HEAP32[$0 + 7062388 >> 2];
     }
     $3 = -1;
     $2 = $5 + -1 | 0;
     label$23 : {
      label$24 : {
       if ($2 >>> 0 > 2) {
        break label$24;
       }
       if (!($2 - 2)) {
        $3 = arImageProcLumaHistAndBoxFilterWithBias(HEAP32[$0 + 7062408 >> 2], HEAP32[$1 + 12 >> 2]);
        if (($3 | 0) < 0) {
         break label$1;
        }
        $2 = HEAP32[$0 + 7062408 >> 2];
        $3 = arLabeling(HEAP32[$1 + 12 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 12 >> 2], 0, 0, $0 + 4834144 | 0, HEAP32[$2 >> 2]);
        if (($3 | 0) >= 0) {
         break label$23;
        }
        break label$1;
       }
       $2 = HEAP32[$0 + 7062396 >> 2];
       if (($2 | 0) >= 1) {
        HEAP32[$0 + 7062396 >> 2] = $2 + -1;
        break label$24;
       }
       $7 = HEAP32[$1 + 12 >> 2];
       $2 = HEAP32[$0 + 7062408 >> 2];
       label$27 : {
        if (($5 | 0) == 1) {
         $2 = arImageProcLumaHistAndCDFAndPercentile($2, $7, $6 + 68 | 0);
         break label$27;
        }
        $2 = arImageProcLumaHistAndOtsu($2, $7, $6 + 68 | 0);
       }
       if (($2 | 0) < 0) {
        break label$3;
       }
       label$29 : {
        if (HEAP32[$0 >> 2] != 1) {
         break label$29;
        }
        $7 = HEAPU8[$6 + 68 | 0];
        if (($7 | 0) == HEAP32[$0 + 16 >> 2]) {
         break label$29;
        }
        $2 = HEAP32[$0 + 7062388 >> 2];
        HEAP32[$6 + 4 >> 2] = $7;
        HEAP32[$6 >> 2] = ($2 | 0) == 1 ? 5473 : 5587;
        arLog(3, 5195, $6);
       }
       HEAP32[$0 + 16 >> 2] = HEAPU8[$6 + 68 | 0];
       HEAP32[$0 + 7062396 >> 2] = HEAP32[$0 + 7062392 >> 2];
      }
      if ((arLabeling(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $0 + 4834144 | 0, 0) | 0) < 0) {
       break label$1;
      }
     }
     $3 = -1;
     $2 = $0 + 15416 | 0;
     if ((arDetectMarker2(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $0 + 4834144 | 0, HEAP32[$0 + 20 >> 2], $2, $0 + 15408 | 0) | 0) < 0) {
      break label$1;
     }
     if ((arGetMarkerInfo(HEAP32[$1 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], HEAP32[$0 + 4 >> 2], $2, HEAP32[$0 + 15408 >> 2], HEAP32[$0 + 7062384 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 32 >> 2] + 184 | 0, HEAPF64[$0 + 7062416 >> 3], $0 + 48 | 0, $12, HEAP32[$0 + 7062424 >> 2]) | 0) < 0) {
      break label$1;
     }
    }
    if (HEAP32[$0 + 28 >> 2] == 1) {
     break label$2;
    }
    $8 = HEAP32[$0 + 4818296 >> 2];
    $12 = 0;
    while (1) {
     if (($12 | 0) < ($8 | 0)) {
      $5 = Math_imul($12, 264) + $0 | 0;
      $14 = $5 + 4818368 | 0;
      $10 = $5 + 4818360 | 0;
      $7 = $5 + 4818304 | 0;
      $2 = HEAP32[$0 + 44 >> 2];
      $1 = 0;
      $3 = -1;
      $9 = .5;
      while (1) {
       if (($1 | 0) < ($2 | 0)) {
        $15 = ($1 << 8) + $0 | 0;
        $16 = +HEAP32[$15 + 48 >> 2];
        $4 = +HEAP32[$7 >> 2] / $16;
        label$34 : {
         if ($4 < .7 | $4 > 1.43) {
          break label$34;
         }
         $4 = HEAPF64[$15 + 104 >> 3] - HEAPF64[$10 >> 3];
         $17 = $4 * $4;
         $4 = HEAPF64[$15 + 112 >> 3] - HEAPF64[$14 >> 3];
         $4 = ($17 + $4 * $4) / $16;
         if (!($4 < $9)) {
          break label$34;
         }
         $9 = $4;
         $3 = $1;
        }
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      }
      label$35 : {
       if (($3 | 0) < 0) {
        break label$35;
       }
       $15 = HEAP32[$0 + 24 >> 2];
       if ($15 >>> 0 > 4) {
        $3 = -1;
        break label$1;
       }
       label$37 : {
        switch ($15 - 3 | 0) {
        default:
         $11 = ($3 << 8) + $0 | 0;
         $1 = $11;
         $16 = HEAPF64[$5 + 4818336 >> 3];
         if (!(HEAPF64[$1 + 80 >> 3] < $16)) {
          break label$35;
         }
         HEAPF64[$1 + 80 >> 3] = $16;
         $14 = HEAP32[$5 + 4818308 >> 2];
         HEAP32[$11 + 52 >> 2] = $14;
         $10 = $5 + 4818320 | 0;
         $3 = 0;
         $13 = -1;
         $9 = 1e8;
         while (1) {
          $4 = 0;
          $1 = 0;
          if (($3 | 0) != 4) {
           while (1) {
            if (($1 | 0) != 4) {
             $17 = $4;
             $7 = $5 + ($1 << 4) | 0;
             $2 = $11 + (($1 + $3 & 3) << 4) | 0;
             $4 = HEAPF64[$7 + 4818472 >> 3] - HEAPF64[$2 + 216 >> 3];
             $18 = $4 * $4;
             $4 = HEAPF64[$7 + 4818480 >> 3] - HEAPF64[$2 + 224 >> 3];
             $4 = $17 + ($18 + $4 * $4);
             $1 = $1 + 1 | 0;
             continue;
            }
            break;
           }
           if (!!($4 < $9)) {
            $13 = ((HEAP32[$10 >> 2] - $3 | 0) + 4 | 0) % 4 | 0;
            $9 = $4;
           }
           $3 = $3 + 1 | 0;
           continue;
          }
          break;
         }
         HEAP32[$11 - -64 >> 2] = $13;
         if ($15 >>> 0 <= 1) {
          HEAPF64[$11 + 88 >> 3] = $16;
          HEAP32[$11 + 56 >> 2] = $14;
          HEAP32[$11 + 68 >> 2] = $13;
          break label$35;
         }
         HEAPF64[$11 + 96 >> 3] = $16;
         HEAP32[$11 + 60 >> 2] = $14;
         HEAP32[$11 + 72 >> 2] = $13;
         break label$35;
        case 0:
        case 1:
         break label$37;
        }
       }
       $10 = ($3 << 8) + $0 | 0;
       $2 = $10;
       $4 = HEAPF64[$5 + 4818344 >> 3];
       label$45 : {
        if (!!(HEAPF64[$2 + 88 >> 3] < $4)) {
         $1 = $5 + 4818352 | 0;
         $3 = HEAP32[$1 >> 2];
         $1 = HEAP32[$1 + 4 >> 2];
         break label$45;
        }
        $9 = HEAPF64[$5 + 4818352 >> 3];
        if (!(HEAPF64[$10 + 96 >> 3] < $9)) {
         break label$35;
        }
        wasm2js_scratch_store_f64(+$9);
        $1 = wasm2js_scratch_load_i32(1) | 0;
        $3 = wasm2js_scratch_load_i32(0) | 0;
       }
       HEAPF64[$2 + 88 >> 3] = $4;
       $2 = HEAP32[$5 + 4818312 >> 2];
       HEAP32[$10 + 96 >> 2] = $3;
       HEAP32[$10 + 100 >> 2] = $1;
       HEAP32[$10 + 56 >> 2] = $2;
       HEAP32[$10 + 60 >> 2] = HEAP32[$5 + 4818316 >> 2];
       $3 = 0;
       $13 = -1;
       $9 = 1e8;
       while (1) {
        $4 = 0;
        $1 = 0;
        if (($3 | 0) != 4) {
         while (1) {
          if (($1 | 0) != 4) {
           $17 = $4;
           $7 = $5 + ($1 << 4) | 0;
           $2 = $10 + (($1 + $3 & 3) << 4) | 0;
           $4 = HEAPF64[$7 + 4818472 >> 3] - HEAPF64[$2 + 216 >> 3];
           $16 = $4 * $4;
           $4 = HEAPF64[$7 + 4818480 >> 3] - HEAPF64[$2 + 224 >> 3];
           $4 = $17 + ($16 + $4 * $4);
           $1 = $1 + 1 | 0;
           continue;
          }
          break;
         }
         $1 = $4 < $9;
         $13 = $1 ? $3 : $13;
         $9 = $1 ? $4 : $9;
         $3 = $3 + 1 | 0;
         continue;
        }
        break;
       }
       $1 = 4 - $13 | 0;
       HEAP32[$10 + 68 >> 2] = ($1 + HEAP32[$5 + 4818324 >> 2] | 0) % 4;
       HEAP32[$10 + 72 >> 2] = ($1 + HEAP32[$5 + 4818328 >> 2] | 0) % 4;
      }
      $12 = $12 + 1 | 0;
      continue;
     }
     break;
    }
    confidenceCutoff($0);
    $1 = 0;
    $8 = 0;
    while (1) {
     if (($1 | 0) < HEAP32[$0 + 4818296 >> 2]) {
      $3 = Math_imul($1, 264) + $0 | 0;
      $2 = $3 + 4818560 | 0;
      $7 = HEAP32[$2 >> 2] + 1 | 0;
      HEAP32[$2 >> 2] = $7;
      if (($7 | 0) <= 3) {
       if (($1 | 0) != ($8 | 0)) {
        memcpy((Math_imul($8, 264) + $0 | 0) + 4818304 | 0, $3 + 4818304 | 0, 264);
       }
       $8 = $8 + 1 | 0;
      }
      $1 = $1 + 1 | 0;
      continue;
     }
     break;
    }
    HEAP32[$0 + 4818296 >> 2] = $8;
    $5 = HEAP32[$0 + 44 >> 2];
    $3 = 0;
    while (1) {
     label$56 : {
      if (($3 | 0) >= ($5 | 0)) {
       break label$56;
      }
      $1 = 0;
      $7 = ($3 << 8) + $0 | 0;
      $2 = HEAP32[$7 + 52 >> 2];
      if (($2 | 0) >= 0) {
       while (1) {
        if (!(($2 | 0) == HEAP32[(Math_imul($1, 264) + $0 | 0) + 4818308 >> 2] | ($1 | 0) >= ($8 | 0))) {
         $1 = $1 + 1 | 0;
         continue;
        }
        break;
       }
       if (($1 | 0) == ($8 | 0)) {
        if (($8 | 0) == 60) {
         break label$56;
        }
        $8 = $8 + 1 | 0;
        HEAP32[$0 + 4818296 >> 2] = $8;
       }
       $1 = Math_imul($1, 264) + $0 | 0;
       memcpy($1 + 4818304 | 0, $7 + 48 | 0, 256);
       HEAP32[$1 + 4818560 >> 2] = 1;
      }
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    }
    $3 = 0;
    if (HEAP32[$0 + 28 >> 2] == 2) {
     break label$1;
    }
    $12 = 0;
    while (1) {
     if (($12 | 0) >= ($8 | 0)) {
      break label$1;
     }
     $1 = Math_imul($12, 264) + $0 | 0;
     $7 = $1 + 4818368 | 0;
     $2 = $1 + 4818360 | 0;
     $14 = $1 + 4818304 | 0;
     $1 = 0;
     while (1) {
      label$63 : {
       if (($1 | 0) >= ($5 | 0)) {
        break label$63;
       }
       $10 = ($1 << 8) + $0 | 0;
       $4 = +HEAP32[$10 + 48 >> 2];
       $9 = +HEAP32[$14 >> 2] / $4;
       if (!($9 < .7 | $9 > 1.43)) {
        $9 = HEAPF64[$10 + 104 >> 3] - HEAPF64[$2 >> 3];
        $17 = $9 * $9;
        $9 = HEAPF64[$10 + 112 >> 3] - HEAPF64[$7 >> 3];
        if (($17 + $9 * $9) / $4 < .5) {
         break label$63;
        }
       }
       $1 = $1 + 1 | 0;
       continue;
      }
      break;
     }
     if (($1 | 0) == ($5 | 0)) {
      memcpy((($5 << 8) + $0 | 0) + 48 | 0, $14, 256);
      $5 = $5 + 1 | 0;
      HEAP32[$0 + 44 >> 2] = $5;
      $8 = HEAP32[$0 + 4818296 >> 2];
     }
     $12 = $12 + 1 | 0;
     continue;
    }
   }
   $3 = $2;
   break label$1;
  }
  confidenceCutoff($0);
  $3 = 0;
 }
 global$0 = $6 + 80 | 0;
 return $3;
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $11 = global$0 - 560 | 0;
 global$0 = $11;
 HEAP32[$11 + 44 >> 2] = 0;
 wasm2js_scratch_store_f64(+$1);
 $6 = wasm2js_scratch_load_i32(1) | 0;
 label$1 : {
  if (wasm2js_i32$0 = 1, wasm2js_i32$1 = (wasm2js_i32$3 = wasm2js_scratch_load_i32(0) >>> 0 > 4294967295 ? 0 : 1, wasm2js_i32$4 = 0, wasm2js_i32$5 = ($6 | 0) <= -1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$2 = ($6 | 0) < -1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
   $1 = -$1;
   wasm2js_scratch_store_f64(+$1);
   $6 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $21 = 1;
   $22 = 13312;
   break label$1;
  }
  if ($4 & 2048) {
   $21 = 1;
   $22 = 13315;
   break label$1;
  }
  $21 = $4 & 1;
  $22 = $21 ? 13318 : 13313;
 }
 label$4 : {
  if (($6 & 2146435072) == 2146435072) {
   $10 = $21 + 3 | 0;
   pad($0, 32, $2, $10, $4 & -65537);
   out($0, $22, $21);
   $3 = $5 >>> 5 & 1;
   out($0, $1 != $1 ? $3 ? 13339 : 13343 : $3 ? 13331 : 13335, 3);
   break label$4;
  }
  $1 = frexp($1, $11 + 44 | 0);
  $1 = $1 + $1;
  if ($1 != 0) {
   HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + -1;
  }
  $17 = $11 + 16 | 0;
  $23 = $5 | 32;
  if (($23 | 0) == 97) {
   $16 = $5 & 32;
   $15 = $16 ? $22 + 9 | 0 : $22;
   label$8 : {
    if ($3 >>> 0 > 11) {
     break label$8;
    }
    $6 = 12 - $3 | 0;
    if (!$6) {
     break label$8;
    }
    $18 = 8;
    while (1) {
     $18 = $18 * 16;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
    if (HEAPU8[$15 | 0] == 45) {
     $1 = -($18 + (-$1 - $18));
     break label$8;
    }
    $1 = $1 + $18 - $18;
   }
   $6 = HEAP32[$11 + 44 >> 2];
   $8 = $6 >> 31;
   $6 = fmt_u($8 ^ $6 + $8, 0, $17);
   if (($17 | 0) == ($6 | 0)) {
    HEAP8[$11 + 15 | 0] = 48;
    $6 = $11 + 15 | 0;
   }
   $12 = $21 | 2;
   $8 = HEAP32[$11 + 44 >> 2];
   $14 = $6 + -2 | 0;
   HEAP8[$14 | 0] = $5 + 15;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $4 & 8;
   $7 = $11 + 16 | 0;
   while (1) {
    $5 = $7;
    $10 = $16;
    if (Math_abs($1) < 2147483648) {
     $8 = ~~$1;
    } else {
     $8 = -2147483648;
    }
    HEAP8[$7 | 0] = $10 | HEAPU8[$8 + 13296 | 0];
    $7 = $5 + 1 | 0;
    $1 = ($1 - +($8 | 0)) * 16;
    if (!(($7 - ($11 + 16 | 0) | 0) != 1 | ($1 == 0 ? !($6 | ($3 | 0) > 0) : 0))) {
     HEAP8[$5 + 1 | 0] = 46;
     $7 = $5 + 2 | 0;
    }
    if ($1 != 0) {
     continue;
    }
    break;
   }
   $5 = !$3 | (($7 - $11 | 0) + -18 | 0) >= ($3 | 0) ? (($17 - ($11 + 16 | 0) | 0) - $14 | 0) + $7 | 0 : (($3 + $17 | 0) - $14 | 0) + 2 | 0;
   $10 = $5 + $12 | 0;
   pad($0, 32, $2, $10, $4);
   out($0, $15, $12);
   pad($0, 48, $2, $10, $4 ^ 65536);
   $3 = $7 - ($11 + 16 | 0) | 0;
   out($0, $11 + 16 | 0, $3);
   $6 = $3;
   $3 = $17 - $14 | 0;
   pad($0, 48, $5 - ($6 + $3 | 0) | 0, 0, 0);
   out($0, $14, $3);
   break label$4;
  }
  $6 = ($3 | 0) < 0;
  label$16 : {
   if ($1 == 0) {
    $9 = HEAP32[$11 + 44 >> 2];
    break label$16;
   }
   $9 = HEAP32[$11 + 44 >> 2] + -28 | 0;
   HEAP32[$11 + 44 >> 2] = $9;
   $1 = $1 * 268435456;
  }
  $13 = $6 ? 6 : $3;
  $16 = ($9 | 0) < 0 ? $11 + 48 | 0 : $11 + 336 | 0;
  $8 = $16;
  while (1) {
   $3 = $8;
   if ($1 < 4294967296 & $1 >= 0) {
    $6 = ~~$1 >>> 0;
   } else {
    $6 = 0;
   }
   HEAP32[$3 >> 2] = $6;
   $8 = $8 + 4 | 0;
   $1 = ($1 - +($6 >>> 0)) * 1e9;
   if ($1 != 0) {
    continue;
   }
   break;
  }
  label$21 : {
   if (($9 | 0) < 1) {
    $6 = $8;
    $7 = $16;
    break label$21;
   }
   $7 = $16;
   while (1) {
    $19 = ($9 | 0) < 29 ? $9 : 29;
    $6 = $8 + -4 | 0;
    label$24 : {
     if ($6 >>> 0 < $7 >>> 0) {
      break label$24;
     }
     $3 = $19;
     $10 = 0;
     while (1) {
      $15 = 0;
      $14 = $10;
      $10 = HEAP32[$6 >> 2];
      $12 = $3 & 31;
      if (32 <= ($3 & 63) >>> 0) {
       $9 = $10 << $12;
       $12 = 0;
      } else {
       $9 = (1 << $12) - 1 & $10 >>> 32 - $12;
       $12 = $10 << $12;
      }
      $10 = $14 + $12 | 0;
      $9 = $9 + $15 | 0;
      $9 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $15 = $10;
      $10 = __wasm_i64_udiv($10, $9, 1e9);
      $12 = __wasm_i64_mul($10, i64toi32_i32$HIGH_BITS, 1e9, 0);
      HEAP32[$6 >> 2] = $15 - $12;
      $6 = $6 + -4 | 0;
      if ($6 >>> 0 >= $7 >>> 0) {
       continue;
      }
      break;
     }
     $3 = $10;
     if (!$3) {
      break label$24;
     }
     $7 = $7 + -4 | 0;
     HEAP32[$7 >> 2] = $3;
    }
    while (1) {
     $6 = $8;
     if ($6 >>> 0 > $7 >>> 0) {
      $8 = $6 + -4 | 0;
      if (!HEAP32[$8 >> 2]) {
       continue;
      }
     }
     break;
    }
    $9 = HEAP32[$11 + 44 >> 2] - $19 | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $8 = $6;
    if (($9 | 0) > 0) {
     continue;
    }
    break;
   }
  }
  if (($9 | 0) <= -1) {
   $20 = (($13 + 25 | 0) / 9 | 0) + 1 | 0;
   $14 = ($23 | 0) == 102;
   while (1) {
    $19 = ($9 | 0) < -9 ? 9 : 0 - $9 | 0;
    label$30 : {
     if ($7 >>> 0 >= $6 >>> 0) {
      $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
      break label$30;
     }
     $15 = 1e9 >>> $19;
     $12 = -1 << $19 ^ -1;
     $9 = 0;
     $8 = $7;
     while (1) {
      $3 = HEAP32[$8 >> 2];
      HEAP32[$8 >> 2] = ($3 >>> $19) + $9;
      $9 = Math_imul($15, $3 & $12);
      $8 = $8 + 4 | 0;
      if ($8 >>> 0 < $6 >>> 0) {
       continue;
      }
      break;
     }
     $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
     if (!$9) {
      break label$30;
     }
     HEAP32[$6 >> 2] = $9;
     $6 = $6 + 4 | 0;
    }
    $9 = $19 + HEAP32[$11 + 44 >> 2] | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $3 = $14 ? $16 : $7;
    $6 = $6 - $3 >> 2 > ($20 | 0) ? $3 + ($20 << 2) | 0 : $6;
    if (($9 | 0) < 0) {
     continue;
    }
    break;
   }
  }
  $8 = 0;
  label$33 : {
   if ($7 >>> 0 >= $6 >>> 0) {
    break label$33;
   }
   $8 = Math_imul($16 - $7 >> 2, 9);
   $9 = 10;
   $3 = HEAP32[$7 >> 2];
   if ($3 >>> 0 < 10) {
    break label$33;
   }
   while (1) {
    $8 = $8 + 1 | 0;
    $9 = Math_imul($9, 10);
    if ($3 >>> 0 >= $9 >>> 0) {
     continue;
    }
    break;
   }
  }
  $3 = ($13 - (($23 | 0) == 102 ? 0 : $8) | 0) - (($23 | 0) == 103 & ($13 | 0) != 0) | 0;
  if (($3 | 0) < (Math_imul($6 - $16 >> 2, 9) + -9 | 0)) {
   $12 = $3 + 9216 | 0;
   $3 = ($12 | 0) / 9 | 0;
   $10 = ($16 + ($3 << 2) | 0) + -4092 | 0;
   $9 = 10;
   $3 = ($12 - Math_imul($3, 9) | 0) + 1 | 0;
   if (($3 | 0) <= 8) {
    while (1) {
     $9 = Math_imul($9, 10);
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 9) {
      continue;
     }
     break;
    }
   }
   $15 = HEAP32[$10 >> 2];
   $12 = ($15 >>> 0) / ($9 >>> 0) | 0;
   $20 = $10 + 4 | 0;
   $14 = $15 - Math_imul($9, $12) | 0;
   label$38 : {
    if ($14 ? 0 : ($20 | 0) == ($6 | 0)) {
     break label$38;
    }
    $3 = $9 >>> 1;
    $18 = $14 >>> 0 < $3 >>> 0 ? .5 : ($6 | 0) == ($20 | 0) ? ($3 | 0) == ($14 | 0) ? 1 : 1.5 : 1.5;
    $1 = $12 & 1 ? 9007199254740994 : 9007199254740992;
    if (!(!$21 | HEAPU8[$22 | 0] != 45)) {
     $18 = -$18;
     $1 = -$1;
    }
    $3 = $15 - $14 | 0;
    HEAP32[$10 >> 2] = $3;
    if ($1 + $18 == $1) {
     break label$38;
    }
    $3 = $3 + $9 | 0;
    HEAP32[$10 >> 2] = $3;
    if ($3 >>> 0 >= 1e9) {
     while (1) {
      HEAP32[$10 >> 2] = 0;
      $10 = $10 + -4 | 0;
      if ($10 >>> 0 < $7 >>> 0) {
       $7 = $7 + -4 | 0;
       HEAP32[$7 >> 2] = 0;
      }
      $3 = HEAP32[$10 >> 2] + 1 | 0;
      HEAP32[$10 >> 2] = $3;
      if ($3 >>> 0 > 999999999) {
       continue;
      }
      break;
     }
    }
    $8 = Math_imul($16 - $7 >> 2, 9);
    $9 = 10;
    $3 = HEAP32[$7 >> 2];
    if ($3 >>> 0 < 10) {
     break label$38;
    }
    while (1) {
     $8 = $8 + 1 | 0;
     $9 = Math_imul($9, 10);
     if ($3 >>> 0 >= $9 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = $10 + 4 | 0;
   $6 = $6 >>> 0 > $3 >>> 0 ? $3 : $6;
  }
  label$44 : {
   while (1) {
    $14 = $6;
    $15 = 0;
    if ($6 >>> 0 <= $7 >>> 0) {
     break label$44;
    }
    $6 = $14 + -4 | 0;
    if (!HEAP32[$6 >> 2]) {
     continue;
    }
    break;
   }
   $15 = 1;
  }
  label$46 : {
   if (($23 | 0) != 103) {
    $12 = $4 & 8;
    break label$46;
   }
   $6 = $13 ? $13 : 1;
   $3 = ($6 | 0) > ($8 | 0) & ($8 | 0) > -5;
   $13 = ($3 ? $8 ^ -1 : -1) + $6 | 0;
   $5 = ($3 ? -1 : -2) + $5 | 0;
   $12 = $4 & 8;
   if ($12) {
    break label$46;
   }
   $6 = 9;
   label$48 : {
    if (!$15) {
     break label$48;
    }
    $12 = HEAP32[$14 + -4 >> 2];
    if (!$12) {
     break label$48;
    }
    $3 = 10;
    $6 = 0;
    if (($12 >>> 0) % 10) {
     break label$48;
    }
    while (1) {
     $6 = $6 + 1 | 0;
     $3 = Math_imul($3, 10);
     if (!(($12 >>> 0) % ($3 >>> 0))) {
      continue;
     }
     break;
    }
   }
   $3 = Math_imul($14 - $16 >> 2, 9) + -9 | 0;
   if (($5 | 32) == 102) {
    $12 = 0;
    $3 = $3 - $6 | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
    break label$46;
   }
   $12 = 0;
   $3 = ($3 + $8 | 0) - $6 | 0;
   $3 = ($3 | 0) > 0 ? $3 : 0;
   $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
  }
  $9 = $12 | $13;
  $10 = ($9 | 0) != 0;
  $3 = $0;
  $23 = $2;
  $19 = $5 | 32;
  $6 = ($8 | 0) > 0 ? $8 : 0;
  label$51 : {
   if (($19 | 0) == 102) {
    break label$51;
   }
   $6 = $8 >> 31;
   $6 = fmt_u($6 + $8 ^ $6, 0, $17);
   if (($17 - $6 | 0) <= 1) {
    while (1) {
     $6 = $6 + -1 | 0;
     HEAP8[$6 | 0] = 48;
     if (($17 - $6 | 0) < 2) {
      continue;
     }
     break;
    }
   }
   $20 = $6 + -2 | 0;
   HEAP8[$20 | 0] = $5;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $17 - $20 | 0;
  }
  $10 = ($6 + ($10 + ($13 + $21 | 0) | 0) | 0) + 1 | 0;
  pad($3, 32, $23, $10, $4);
  out($0, $22, $21);
  pad($0, 48, $2, $10, $4 ^ 65536);
  label$54 : {
   if (($19 | 0) == 102) {
    $3 = $11 + 16 | 8;
    $8 = $11 + 16 | 9;
    $5 = $7 >>> 0 > $16 >>> 0 ? $16 : $7;
    $7 = $5;
    while (1) {
     $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
     label$57 : {
      if (($5 | 0) != ($7 | 0)) {
       if ($6 >>> 0 <= $11 + 16 >>> 0) {
        break label$57;
       }
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
       break label$57;
      }
      if (($6 | 0) != ($8 | 0)) {
       break label$57;
      }
      HEAP8[$11 + 24 | 0] = 48;
      $6 = $3;
     }
     out($0, $6, $8 - $6 | 0);
     $7 = $7 + 4 | 0;
     if ($7 >>> 0 <= $16 >>> 0) {
      continue;
     }
     break;
    }
    if ($9) {
     out($0, 13347, 1);
    }
    label$61 : {
     if (($13 | 0) < 1 | $7 >>> 0 >= $14 >>> 0) {
      break label$61;
     }
     while (1) {
      $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
      if ($6 >>> 0 > $11 + 16 >>> 0) {
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
      }
      out($0, $6, ($13 | 0) < 9 ? $13 : 9);
      $13 = $13 + -9 | 0;
      $7 = $7 + 4 | 0;
      if ($7 >>> 0 >= $14 >>> 0) {
       break label$61;
      }
      if (($13 | 0) > 0) {
       continue;
      }
      break;
     }
    }
    pad($0, 48, $13 + 9 | 0, 9, 0);
    break label$54;
   }
   label$65 : {
    if (($13 | 0) < 0) {
     break label$65;
    }
    $5 = $15 ? $14 : $7 + 4 | 0;
    $3 = $11 + 16 | 8;
    $16 = $11 + 16 | 9;
    $8 = $7;
    while (1) {
     $6 = fmt_u(HEAP32[$8 >> 2], 0, $16);
     if (($16 | 0) == ($6 | 0)) {
      HEAP8[$11 + 24 | 0] = 48;
      $6 = $3;
     }
     label$68 : {
      if (($7 | 0) != ($8 | 0)) {
       if ($6 >>> 0 <= $11 + 16 >>> 0) {
        break label$68;
       }
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
       break label$68;
      }
      out($0, $6, 1);
      $6 = $6 + 1 | 0;
      if (($13 | 0) < 1 ? !$12 : 0) {
       break label$68;
      }
      out($0, 13347, 1);
     }
     $15 = $6;
     $6 = $16 - $6 | 0;
     out($0, $15, ($13 | 0) > ($6 | 0) ? $6 : $13);
     $13 = $13 - $6 | 0;
     $8 = $8 + 4 | 0;
     if ($8 >>> 0 >= $5 >>> 0) {
      break label$65;
     }
     if (($13 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   pad($0, 48, $13 + 18 | 0, 18, 0);
   out($0, $20, $17 - $20 | 0);
  }
 }
 pad($0, 32, $2, $10, $4 ^ 8192);
 global$0 = $11 + 560 | 0;
 return (($10 | 0) < ($2 | 0) ? $2 : $10) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = 0;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 22423);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $4;
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
    HEAP32[$1 + 60 >> 2] = $2;
    if (!$2) {
     break label$1;
    }
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 73) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
     HEAP32[$1 + 44 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
    }
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
      HEAP32[$1 + 44 >> 2] = $2;
      if (!$2) {
       break label$2;
      }
      wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
      continue;
     }
     break;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0);
    HEAP32[$1 + 44 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 20312);
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 12 >> 2] = $4;
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0);
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 22427);
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0);
    HEAP32[$1 + 60 >> 2] = $3;
    if (!$3 | $4 ^ 1) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0);
    HEAP32[$1 + 60 >> 2] = $3;
    break label$1;
   }
   label$8 : {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 >>> 0 <= 9) {
     $2 = $0;
     while (1) {
      $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($2);
      HEAP32[$1 + 44 >> 2] = $5;
      if (!$5) {
       break label$1;
      }
      label$11 : {
       if (HEAP32[$1 + 60 >> 2]) {
        wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
        break label$11;
       }
       if ($4) {
        wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
        break label$11;
       }
       HEAP32[$1 + 60 >> 2] = $5;
      }
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       continue;
      }
      break;
     }
     break label$8;
    }
    $2 = $0;
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
    HEAP32[$1 + 60 >> 2] = $4;
    if (!$4) {
     break label$1;
    }
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
     break label$8;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($2, 0);
    HEAP32[$1 + 44 >> 2] = $3;
    if (!$3) {
     break label$2;
    }
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($2);
   HEAP32[$1 + 44 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
   break label$1;
  }
  $3 = 0;
 }
 global$0 = $1 - -64 | 0;
 return $3;
}
function std____2____next_prime_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 label$1 : {
  if ($0 >>> 0 <= 211) {
   $0 = HEAP32[unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(18688, 18880, $4 + 12 | 0) >> 2];
   break label$1;
  }
  $5 = ($0 >>> 0) / 210 | 0;
  $3 = Math_imul($5, 210);
  HEAP32[$4 + 8 >> 2] = $0 - $3;
  $6 = unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(18880, 19072, $4 + 8 | 0) - 18880 >> 2;
  label$3 : {
   while (1) {
    $0 = HEAP32[($6 << 2) + 18880 >> 2] + $3 | 0;
    $3 = 5;
    label$5 : {
     label$6 : {
      label$7 : {
       while (1) {
        if (($3 | 0) == 47) {
         break label$7;
        }
        $1 = HEAP32[($3 << 2) + 18688 >> 2];
        $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
        $7 = $2 >>> 0 < $1 >>> 0;
        $8 = $7 ? $0 : $8;
        $3 = $3 + 1 | 0;
        $1 = $7 ? 1 : (Math_imul($1, $2) | 0) == ($0 | 0) ? 7 : 0;
        if (!$1) {
         continue;
        }
        break;
       }
       $3 = $1 + -4 | 0;
       if ($3 >>> 0 > 3) {
        break label$3;
       }
       switch ($3 - 1 | 0) {
       case 0:
       case 1:
        break label$3;
       case 2:
        break label$6;
       default:
        break label$7;
       }
      }
      $3 = 211;
      while (1) {
       $1 = ($0 >>> 0) / ($3 >>> 0) | 0;
       if ($1 >>> 0 < $3 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $3) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 10 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 12 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 16 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 18 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 22 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 28 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 30 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 36 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 40 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 42 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 46 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 52 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 58 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 60 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 66 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 70 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 72 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 78 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 82 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 88 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 96 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 100 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 102 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 106 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 108 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 112 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 120 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 126 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 130 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 136 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 138 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 142 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 148 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 150 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 156 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 162 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 166 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 168 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 172 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 178 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 180 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 186 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 190 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 192 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 196 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 198 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
        break label$6;
       }
       $1 = $3 + 208 | 0;
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       if ($2 >>> 0 < $1 >>> 0) {
        break label$5;
       }
       $3 = $3 + 210 | 0;
       if ((Math_imul($1, $2) | 0) != ($0 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = $6 + 1 | 0;
     $0 = ($3 | 0) == 48;
     $6 = $0 ? 0 : $3;
     $5 = $0 + $5 | 0;
     $3 = Math_imul($5, 210);
     continue;
    }
    break;
   }
   HEAP32[$4 + 12 >> 2] = $0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = $0;
  $0 = $8;
 }
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31964);
 $7 = HEAP32[$1 >> 2];
 $4 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const(31964);
 HEAP8[$3 + 31 | 0] = 0;
 label$1 : {
  label$2 : {
   if (!$4) {
    break label$2;
   }
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($7, $4);
   $5 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31964, $6) >> 2];
   if (!$5) {
    break label$2;
   }
   while (1) {
    $5 = HEAP32[$5 >> 2];
    if (!$5) {
     break label$2;
    }
    if (HEAP32[$5 + 4 >> 2] != ($7 | 0)) {
     if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$5 + 4 >> 2], $4) | 0) != ($6 | 0)) {
      break label$2;
     }
    }
    if (!std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arController__20const__2c_20int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31964), $5 + 8 | 0, $1)) {
     continue;
    }
    break;
   }
   break label$1;
  }
  std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($3 + 16 | 0, $7, $2);
  $1 = HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31964) >> 2];
  if (!(Math_fround(HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31964) >> 2] * Math_fround($4 >>> 0)) < Math_fround($1 + 1 >>> 0) ^ 1 ? $4 : 0)) {
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____is_hash_power2_28unsigned_20long_29($4) ^ 1 | $4 << 1, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   $1 = $3;
   $8 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31964) >> 2] + 1 >>> 0) / HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31964) >> 2])));
   label$7 : {
    if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
     $2 = ~~$8 >>> 0;
     break label$7;
    }
    $2 = 0;
   }
   HEAP32[$1 + 8 >> 2] = $2;
   std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___rehash_28unsigned_20long_29(31964, HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 12 | 0, $3 + 8 | 0) >> 2]);
   $4 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const(31964);
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($7, $4);
  }
  $1 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31964, $6) >> 2];
  label$9 : {
   if (!$1) {
    HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[7993];
    HEAP32[7993] = HEAP32[$3 + 16 >> 2];
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31964, $6), wasm2js_i32$1 = 31972, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (!HEAP32[HEAP32[$3 + 16 >> 2] >> 2]) {
     break label$9;
    }
    $1 = HEAP32[$3 + 16 >> 2];
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31964, std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[HEAP32[HEAP32[$3 + 16 >> 2] >> 2] + 4 >> 2], $4)), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$9;
   }
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$3 + 16 >> 2];
  }
  $5 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___release_28_29($3 + 16 | 0);
  $1 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31964);
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  HEAP8[$3 + 31 | 0] = 1;
  $2 = $3 + 16 | 0;
  $1 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = 0;
  if ($1) {
   HEAPU8[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($2) + 4 | 0];
   if ($1) {
    dlfree($1);
   }
  }
 }
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool___pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool__2c_20false__28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20bool__29($0, std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($3 + 16 | 0, $5), $3 + 31 | 0);
 global$0 = $3 + 32 | 0;
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31944);
 $7 = HEAP32[$1 >> 2];
 $4 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const(31944);
 HEAP8[$3 + 31 | 0] = 0;
 label$1 : {
  label$2 : {
   if (!$4) {
    break label$2;
   }
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($7, $4);
   $5 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $6) >> 2];
   if (!$5) {
    break label$2;
   }
   while (1) {
    $5 = HEAP32[$5 >> 2];
    if (!$5) {
     break label$2;
    }
    if (HEAP32[$5 + 4 >> 2] != ($7 | 0)) {
     if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$5 + 4 >> 2], $4) | 0) != ($6 | 0)) {
      break label$2;
     }
    }
    if (!std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arController__20const__2c_20int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31944), $5 + 8 | 0, $1)) {
     continue;
    }
    break;
   }
   break label$1;
  }
  std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($3 + 16 | 0, $7, $2);
  $1 = HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31944) >> 2];
  if (!(Math_fround(HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31944) >> 2] * Math_fround($4 >>> 0)) < Math_fround($1 + 1 >>> 0) ^ 1 ? $4 : 0)) {
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2____is_hash_power2_28unsigned_20long_29($4) ^ 1 | $4 << 1, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   $1 = $3;
   $8 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31944) >> 2] + 1 >>> 0) / HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29(31944) >> 2])));
   label$7 : {
    if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
     $2 = ~~$8 >>> 0;
     break label$7;
    }
    $2 = 0;
   }
   HEAP32[$1 + 8 >> 2] = $2;
   std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___rehash_28unsigned_20long_29(31944, HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 12 | 0, $3 + 8 | 0) >> 2]);
   $4 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const(31944);
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($7, $4);
  }
  $1 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $6) >> 2];
  label$9 : {
   if (!$1) {
    HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[7988];
    HEAP32[7988] = HEAP32[$3 + 16 >> 2];
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $6), wasm2js_i32$1 = 31952, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (!HEAP32[HEAP32[$3 + 16 >> 2] >> 2]) {
     break label$9;
    }
    $1 = HEAP32[$3 + 16 >> 2];
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[HEAP32[HEAP32[$3 + 16 >> 2] >> 2] + 4 >> 2], $4)), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$9;
   }
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$3 + 16 >> 2];
  }
  $5 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___release_28_29($3 + 16 | 0);
  $1 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31944);
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  HEAP8[$3 + 31 | 0] = 1;
  std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___reset_28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____29($3 + 16 | 0);
 }
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool___pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool__2c_20false__28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20bool__29($0, std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($3 + 16 | 0, $5), $3 + 31 | 0);
 global$0 = $3 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 128 | 0;
 global$0 = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
 HEAP32[$1 + 120 >> 2] = 0;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 112 | 0, 27416);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 52 >> 2] = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 48 | 0)) {
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 27419), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 104 | 0, 27428);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 40 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 44 >> 2] = $3;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 40 | 0)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 88 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      break label$2;
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 88 | 0), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 96 | 0, 27431);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 32 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 36 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0)) {
     break label$3;
    }
    $2 = $0 + 8 | 0;
    $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$1 + 88 >> 2] = $4;
      if (!$4) {
       break label$2;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 88 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $3);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $1 + 88 | 0), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 80 | 0, 27434);
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 28 >> 2] = $3;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0);
   $2 = 0;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 70)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 89);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 76 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   HEAP8[$1 + 75 | 0] = 0;
   $2 = $0 + 8 | 0;
   $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
   while (1) {
    label$9 : {
     label$10 : {
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       break label$10;
      }
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
       continue;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 - -64 | 0, 27437);
      $5 = HEAP32[$4 + 4 >> 2];
      HEAP32[$1 + 16 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 20 >> 2] = $5;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
       HEAP8[$1 + 75 | 0] = 1;
       break label$10;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 56 | 0, 27440);
      $5 = HEAP32[$4 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$1 + 12 >> 2] = $5;
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
       break label$9;
      }
      HEAP8[$1 + 75 | 0] = 2;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $3);
     $2 = $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 76 | 0, $1 + 88 | 0, $1 + 124 | 0, $1 + 75 | 0, $1 + 120 | 0);
     break label$1;
    }
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 88 >> 2] = $4;
    if (!$4) {
     break label$2;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 88 | 0);
    continue;
   }
  }
  $2 = 0;
 }
 global$0 = $1 + 128 | 0;
 return $2;
}
function EmscriptenBindingInitializer_constant_bindings__EmscriptenBindingInitializer_constant_bindings_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29(10017, 4);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10023, 5);
 void_20emscripten__function_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29(10032, 6);
 void_20emscripten__function_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29(10043, 7);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10059, 8);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10077, 9);
 void_20emscripten__function_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29();
 void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29(10109, 11);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10126, 12);
 void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29(10146, 13);
 void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29(10164, 14);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10186, 15);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10209, 16);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10238, 17);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10251, 18);
 void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29(10264, 19);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10283, 20);
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(10293, 21);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10306, 22);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10319, 23);
 void_20emscripten__function_void_2c_20int__28char_20const__2c_20void_20_28__29_28int_29_29();
 void_20emscripten__function_int__28char_20const__2c_20int_20_28__29_28_29_29();
 void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29(10362, 26);
 void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29(10385, 27);
 void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29(10408, 28);
 void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29(10430, 29);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10452, 30);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10469, 31);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10486, 32);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10499, 33);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10512, 34);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10536, 35);
 void_20emscripten__function_void_2c_20int_2c_20float__28char_20const__2c_20void_20_28__29_28int_2c_20float_29_29();
 void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29(10573, 37);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10586, 38);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10604, 39);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10622, 40);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10638, 41);
 void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29(10654, 42);
 void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29(10671, 43);
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10688, 31356);
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10717, 31364);
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10745, 31360);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10778, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10795, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10811, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10833, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10858, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10883, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 100;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10908, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10935, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10961, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(10987, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11014, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11041, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11067, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 3;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11092, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 4;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11130, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11167, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11201, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11225, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11251, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11278, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 5;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11312, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 1071644672;
 _embind_register_constant(11330, 29712, +HEAPF64[$0 + 8 >> 3]);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11351, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11370, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11388, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 3;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11406, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 4;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11425, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 3;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11447, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 515;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11466, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 259;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11495, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 4;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11523, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 772;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11542, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1028;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11572, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11602, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11633, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11669, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 3;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11703, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11741, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 1;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11774, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 2;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11821, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 3;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11863, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 4;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11906, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 5;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(11958, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 6;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(12009, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 7;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(12054, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 8;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(12093, $0 + 8 | 0);
 HEAP32[$0 + 8 >> 2] = 9;
 void_20emscripten__constant_int__28char_20const__2c_20int_20const__29(12138, $0 + 8 | 0);
 global$0 = $0 + 16 | 0;
}
function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 $13 = global$0 - 96 | 0;
 global$0 = $13;
 $10 = $6;
 $24 = ($10 & 131071) << 15 | $5 >>> 17;
 $18 = $2;
 $9 = $8 & 65535;
 $14 = $9;
 $15 = $7;
 $10 = $7;
 $25 = $10 << 15 | $6 >>> 17;
 $16 = ($4 ^ $8) & -2147483648;
 $26 = ($9 & 131071) << 15 | $7 >>> 17;
 $10 = $4 & 65535;
 $11 = $10;
 $19 = $3;
 $22 = $10;
 $37 = $8 >>> 16 & 32767;
 $38 = $4 >>> 16 & 32767;
 label$1 : {
  label$2 : {
   if ($38 + -1 >>> 0 <= 32765) {
    $9 = 0;
    if ($37 + -1 >>> 0 < 32766) {
     break label$2;
    }
   }
   $12 = $4 & 2147483647;
   $9 = $12;
   $10 = $3;
   if (!(!$3 & ($9 | 0) == 2147418112 ? !($1 | $2) : ($9 | 0) == 2147418112 & $3 >>> 0 < 0 | $9 >>> 0 < 2147418112)) {
    $21 = $3;
    $16 = $4 | 32768;
    break label$1;
   }
   $12 = $8 & 2147483647;
   $4 = $12;
   $3 = $7;
   if (!(!$3 & ($4 | 0) == 2147418112 ? !($5 | $6) : ($4 | 0) == 2147418112 & $3 >>> 0 < 0 | $4 >>> 0 < 2147418112)) {
    $21 = $7;
    $16 = $8 | 32768;
    $1 = $5;
    $2 = $6;
    break label$1;
   }
   if (!($1 | $10 | ($9 ^ 2147418112 | $2))) {
    if (!($3 | $5 | ($4 | $6))) {
     $16 = 2147450880;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $16 = $16 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
    $3 = $1 | $10;
    $4 = $2 | $9;
    $1 = 0;
    $2 = 0;
    if (!($3 | $4)) {
     $16 = 2147450880;
     break label$1;
    }
    $16 = $16 | 2147418112;
    break label$1;
   }
   if (!($1 | $10 | ($2 | $9))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!($3 | $5 | ($4 | $6))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (($9 | 0) == 65535 & $10 >>> 0 <= 4294967295 | $9 >>> 0 < 65535) {
    $9 = $1;
    $7 = !($11 | $19);
    $8 = $7 << 6;
    $10 = Math_clz32($7 ? $1 : $19) + 32 | 0;
    $1 = Math_clz32($7 ? $2 : $11);
    $1 = $8 + (($1 | 0) == 32 ? $10 : $1) | 0;
    __ashlti3($13 + 80 | 0, $9, $2, $19, $11, $1 + -15 | 0);
    $18 = HEAP32[$13 + 84 >> 2];
    $19 = HEAP32[$13 + 88 >> 2];
    $22 = HEAP32[$13 + 92 >> 2];
    $17 = 16 - $1 | 0;
    $1 = HEAP32[$13 + 80 >> 2];
   }
   $9 = $17;
   if (($4 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4 >>> 0 > 65535) {
    break label$2;
   }
   $2 = !($14 | $15);
   $3 = $2 << 6;
   $4 = Math_clz32($2 ? $5 : $15) + 32 | 0;
   $2 = Math_clz32($2 ? $6 : $14);
   $2 = $3 + (($2 | 0) == 32 ? $4 : $2) | 0;
   $7 = $2;
   __ashlti3($13 - -64 | 0, $5, $6, $15, $14, $2 + -15 | 0);
   $5 = HEAP32[$13 + 76 >> 2];
   $2 = $5;
   $8 = HEAP32[$13 + 68 >> 2];
   $6 = $8;
   $4 = HEAP32[$13 + 72 >> 2];
   $3 = $4;
   $25 = $3 << 15 | $6 >>> 17;
   $3 = $6;
   $5 = HEAP32[$13 + 64 >> 2];
   $24 = ($3 & 131071) << 15 | $5 >>> 17;
   $26 = ($2 & 131071) << 15 | $4 >>> 17;
   $9 = ($17 - $7 | 0) + 16 | 0;
  }
  $17 = $9;
  $14 = $24;
  $7 = __wasm_i64_mul($14, 0, $1, 0);
  $2 = i64toi32_i32$HIGH_BITS;
  $8 = $2;
  $3 = $5;
  $20 = $3 << 15 & -32768;
  $15 = $18;
  $4 = __wasm_i64_mul($20, 0, $15, 0);
  $3 = $4 + $7 | 0;
  $12 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
  $2 = $3;
  $4 = 0;
  $6 = __wasm_i64_mul($1, $28, $20, $29);
  $5 = $6 + $4 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $3 | 0;
  $18 = $5;
  $9 = $5 >>> 0 < $6 >>> 0 ? $9 + 1 | 0 : $9;
  $5 = $9;
  $46 = ($3 | 0) == ($9 | 0) & $18 >>> 0 < $4 >>> 0 | $9 >>> 0 < $3 >>> 0;
  $40 = __wasm_i64_mul($14, $23, $15, $39);
  $31 = i64toi32_i32$HIGH_BITS;
  $24 = $19;
  $4 = __wasm_i64_mul($20, $29, $19, 0);
  $3 = $4 + $40 | 0;
  $11 = i64toi32_i32$HIGH_BITS + $31 | 0;
  $32 = $3;
  $11 = $3 >>> 0 < $4 >>> 0 ? $11 + 1 | 0 : $11;
  $3 = $11;
  $6 = __wasm_i64_mul($25, 0, $1, $28);
  $4 = $6 + $32 | 0;
  $11 = i64toi32_i32$HIGH_BITS + $3 | 0;
  $33 = $4;
  $11 = $4 >>> 0 < $6 >>> 0 ? $11 + 1 | 0 : $11;
  $19 = $11;
  $6 = $11;
  $11 = ($8 | 0) == ($12 | 0) & $2 >>> 0 < $7 >>> 0 | $12 >>> 0 < $8 >>> 0;
  $4 = $12;
  $2 = $4 + $33 | 0;
  $9 = $6 + $11 | 0;
  $34 = $2;
  $9 = $2 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
  $4 = $9;
  $42 = __wasm_i64_mul($14, $23, $24, $41);
  $35 = i64toi32_i32$HIGH_BITS;
  $2 = $20;
  $22 = $22 | 65536;
  $20 = $27;
  $6 = __wasm_i64_mul($2, $29, $22, $20);
  $2 = $6 + $42 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $35 | 0;
  $43 = $2;
  $9 = $2 >>> 0 < $6 >>> 0 ? $9 + 1 | 0 : $9;
  $6 = $9;
  $10 = __wasm_i64_mul($15, $39, $25, $44);
  $2 = $10 + $2 | 0;
  $11 = i64toi32_i32$HIGH_BITS + $9 | 0;
  $36 = $2;
  $11 = $2 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
  $27 = $11;
  $30 = $26 & 2147483647 | -2147483648;
  $2 = __wasm_i64_mul($1, $28, $30, 0);
  $1 = $2 + $36 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $11 | 0;
  $28 = $1;
  $2 = $1 >>> 0 < $2 >>> 0 ? $10 + 1 | 0 : $10;
  $9 = $4 + $1 | 0;
  $7 = 0;
  $1 = $34 + $7 | 0;
  if ($1 >>> 0 < $7 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $29 = $1;
  $26 = $9;
  $11 = $9;
  $7 = $1 + $46 | 0;
  if ($7 >>> 0 < $1 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $8 = $11;
  $17 = ($17 + ($37 + $38 | 0) | 0) + -16383 | 0;
  $10 = __wasm_i64_mul($24, $41, $25, $44);
  $1 = i64toi32_i32$HIGH_BITS;
  $12 = __wasm_i64_mul($14, $23, $22, $20);
  $11 = $12 + $10 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $1 | 0;
  $14 = $11;
  $9 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
  $23 = ($1 | 0) == ($9 | 0) & $14 >>> 0 < $10 >>> 0 | $9 >>> 0 < $1 >>> 0;
  $12 = __wasm_i64_mul($30, $45, $15, $39);
  $1 = $12 + $14 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
  $10 = $1 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $15 = $1;
  $12 = 0;
  $1 = $10;
  $10 = ($9 | 0) == ($1 | 0) & $15 >>> 0 < $14 >>> 0 | $1 >>> 0 < $9 >>> 0;
  $9 = $10 + $23 | 0;
  if ($9 >>> 0 < $10 >>> 0) {
   $12 = 1;
  }
  $10 = $1;
  $11 = $12;
  $14 = $9;
  $9 = 0;
  $12 = ($3 | 0) == ($31 | 0) & $32 >>> 0 < $40 >>> 0 | $3 >>> 0 < $31 >>> 0;
  $3 = ($3 | 0) == ($19 | 0) & $33 >>> 0 < $32 >>> 0 | $19 >>> 0 < $3 >>> 0;
  $12 = $12 + $3 | 0;
  if ($12 >>> 0 < $3 >>> 0) {
   $9 = 1;
  }
  $3 = $12 + $15 | 0;
  $10 = $9 + $10 | 0;
  $23 = $3;
  $9 = $3;
  $10 = $3 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $3 = $10;
  $1 = ($1 | 0) == ($3 | 0) & $9 >>> 0 < $15 >>> 0 | $3 >>> 0 < $1 >>> 0;
  $10 = $14 + $1 | 0;
  if ($10 >>> 0 < $1 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $1 = $10;
  $10 = __wasm_i64_mul($30, $45, $22, $20);
  $1 = $1 + $10 | 0;
  $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
  $9 = $1 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
  $15 = $1;
  $12 = __wasm_i64_mul($30, $45, $24, $41);
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = __wasm_i64_mul($25, $44, $22, $20);
  $1 = $14 + $12 | 0;
  $10 = i64toi32_i32$HIGH_BITS + $11 | 0;
  $10 = $1 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
  $14 = $1;
  $1 = $10;
  $10 = ($11 | 0) == ($1 | 0) & $14 >>> 0 < $12 >>> 0 | $1 >>> 0 < $11 >>> 0;
  $15 = $1 + $15 | 0;
  $12 = $9 + $10 | 0;
  $11 = $15;
  $10 = $11 >>> 0 < $1 >>> 0 ? $12 + 1 | 0 : $12;
  $15 = $11;
  $9 = $3 + $14 | 0;
  $12 = 0;
  $1 = $12 + $23 | 0;
  if ($1 >>> 0 < $12 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $14 = $1;
  $11 = $1;
  $1 = $9;
  $3 = ($3 | 0) == ($1 | 0) & $11 >>> 0 < $23 >>> 0 | $1 >>> 0 < $3 >>> 0;
  $9 = $15 + $3 | 0;
  if ($9 >>> 0 < $3 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $15 = $9;
  $12 = $1;
  $9 = 0;
  $3 = ($6 | 0) == ($35 | 0) & $43 >>> 0 < $42 >>> 0 | $6 >>> 0 < $35 >>> 0;
  $6 = ($6 | 0) == ($27 | 0) & $36 >>> 0 < $43 >>> 0 | $27 >>> 0 < $6 >>> 0;
  $11 = $3 + $6 | 0;
  if ($11 >>> 0 < $6 >>> 0) {
   $9 = 1;
  }
  $6 = $11 + (($2 | 0) == ($27 | 0) & $28 >>> 0 < $36 >>> 0 | $2 >>> 0 < $27 >>> 0) | 0;
  $3 = $2;
  $2 = $3 + $14 | 0;
  $12 = $6 + $12 | 0;
  $12 = $2 >>> 0 < $3 >>> 0 ? $12 + 1 | 0 : $12;
  $6 = $2;
  $3 = $2;
  $2 = $12;
  $1 = ($1 | 0) == ($2 | 0) & $3 >>> 0 < $14 >>> 0 | $2 >>> 0 < $1 >>> 0;
  $3 = $1 + $15 | 0;
  if ($3 >>> 0 < $1 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $1 = $2;
  $9 = $10;
  $10 = $3;
  $11 = 0;
  $3 = ($4 | 0) == ($26 | 0) & $29 >>> 0 < $34 >>> 0 | $26 >>> 0 < $4 >>> 0;
  $4 = $3 + (($4 | 0) == ($19 | 0) & $34 >>> 0 < $33 >>> 0 | $4 >>> 0 < $19 >>> 0) | 0;
  if ($4 >>> 0 < $3 >>> 0) {
   $11 = 1;
  }
  $3 = $4 + $6 | 0;
  $12 = $1 + $11 | 0;
  $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
  $1 = $3;
  $4 = $12;
  $1 = ($2 | 0) == ($4 | 0) & $1 >>> 0 < $6 >>> 0 | $4 >>> 0 < $2 >>> 0;
  $2 = $10 + $1 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $1 = $2;
  $2 = $9;
  label$13 : {
   if ($9 & 65536) {
    $17 = $17 + 1 | 0;
    break label$13;
   }
   $6 = $5;
   $12 = $6 >>> 31;
   $9 = $2 << 1 | $1 >>> 31;
   $1 = $1 << 1 | $4 >>> 31;
   $2 = $9;
   $9 = $4 << 1 | $3 >>> 31;
   $3 = $3 << 1 | $8 >>> 31;
   $4 = $9;
   $5 = $6 << 1;
   $6 = $18;
   $9 = $5 | $6 >>> 31;
   $18 = $6 << 1;
   $5 = $9;
   $6 = $7;
   $10 = $8 << 1 | $6 >>> 31;
   $7 = $6 << 1 | $12;
   $8 = $10;
  }
  if (($17 | 0) >= 32767) {
   $16 = $16 | 2147418112;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  label$16 : {
   if (($17 | 0) <= 0) {
    $6 = 1 - $17 | 0;
    if ($6 >>> 0 <= 127) {
     __lshrti3($13 + 16 | 0, $18, $5, $7, $8, $6);
     $10 = $17 + 127 | 0;
     __ashlti3($13 + 32 | 0, $3, $4, $1, $2, $10);
     __ashlti3($13 + 48 | 0, $18, $5, $7, $8, $10);
     __lshrti3($13, $3, $4, $1, $2, $6);
     $18 = (HEAP32[$13 + 48 >> 2] | HEAP32[$13 + 56 >> 2]) != 0 | (HEAP32[$13 + 52 >> 2] | HEAP32[$13 + 60 >> 2]) != 0 | (HEAP32[$13 + 32 >> 2] | HEAP32[$13 + 16 >> 2]);
     $5 = HEAP32[$13 + 36 >> 2] | HEAP32[$13 + 20 >> 2];
     $7 = HEAP32[$13 + 40 >> 2] | HEAP32[$13 + 24 >> 2];
     $8 = HEAP32[$13 + 44 >> 2] | HEAP32[$13 + 28 >> 2];
     $3 = HEAP32[$13 >> 2];
     $4 = HEAP32[$13 + 4 >> 2];
     $2 = HEAP32[$13 + 12 >> 2];
     $1 = HEAP32[$13 + 8 >> 2];
     break label$16;
    }
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $2 = $2 & 65535 | $17 << 16;
  }
  $21 = $1 | $21;
  $16 = $2 | $16;
  if (!(!$7 & ($8 | 0) == -2147483648 ? !($5 | $18) : ($8 | 0) > -1 ? 1 : ($8 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0)) {
   $12 = $16;
   $11 = $4;
   $1 = $3 + 1 | 0;
   if ($1 >>> 0 < 1) {
    $11 = $11 + 1 | 0;
   }
   $2 = $11;
   $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
   $4 = $3 + $21 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $21 = $4;
   $16 = $12;
   break label$1;
  }
  if ($7 | $18 | ($8 ^ -2147483648 | $5)) {
   $1 = $3;
   $2 = $4;
   break label$1;
  }
  $11 = $16;
  $9 = $4;
  $1 = $3 & 1;
  $2 = $1 + $3 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $1 = $2;
  $2 = $9;
  $3 = ($4 | 0) == ($9 | 0) & $1 >>> 0 < $3 >>> 0 | $9 >>> 0 < $4 >>> 0;
  $4 = $3 + $21 | 0;
  if ($4 >>> 0 < $3 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $21 = $4;
  $16 = $11;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $21;
 HEAP32[$0 + 12 >> 2] = $16;
 global$0 = $13 + 96 | 0;
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1 : {
  label$2 : {
   if (!$0) {
    break label$2;
   }
   $3 = $0 + -8 | 0;
   $8 = HEAP32[8384];
   if ($3 >>> 0 < $8 >>> 0) {
    break label$1;
   }
   $2 = HEAP32[$0 + -4 >> 2];
   $1 = $2 & 3;
   if (($1 | 0) == 1) {
    break label$1;
   }
   $0 = $2 & -8;
   $6 = $3 + $0 | 0;
   label$3 : {
    if ($2 & 1) {
     break label$3;
    }
    if (!$1) {
     break label$2;
    }
    $1 = HEAP32[$3 >> 2];
    $3 = $3 - $1 | 0;
    if ($3 >>> 0 < $8 >>> 0) {
     break label$1;
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[8385] != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $5 = HEAP32[$3 + 12 >> 2];
      $4 = HEAP32[$3 + 8 >> 2];
      $2 = $1 >>> 3;
      $1 = ($2 << 3) + 33560 | 0;
      if (HEAP32[$4 + 12 >> 2] != ($3 | 0) | $8 >>> 0 > $4 >>> 0 ? ($4 | 0) != ($1 | 0) : 0) {
       break label$1;
      }
      if (($4 | 0) == ($5 | 0)) {
       wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      if (HEAP32[$5 + 8 >> 2] != ($3 | 0) | $8 >>> 0 > $5 >>> 0 ? ($1 | 0) != ($5 | 0) : 0) {
       break label$1;
      }
      HEAP32[$4 + 12 >> 2] = $5;
      HEAP32[$5 + 8 >> 2] = $4;
      break label$3;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$9 : {
      if (($3 | 0) != ($2 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       if ($8 >>> 0 > $1 >>> 0 | HEAP32[$1 + 12 >> 2] != ($3 | 0) | HEAP32[$2 + 8 >> 2] != ($3 | 0)) {
        break label$1;
       }
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$9;
      }
      label$11 : {
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11;
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11;
       }
       $2 = 0;
       break label$9;
      }
      while (1) {
       $5 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      if ($8 >>> 0 > $5 >>> 0) {
       break label$1;
      }
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$3;
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 33824 | 0;
     label$13 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$13;
       }
       wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      if (HEAPU32[8384] > $7 >>> 0) {
       break label$1;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     $1 = HEAP32[8384];
     if ($1 >>> 0 > $2 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $4 = HEAP32[$3 + 16 >> 2];
     if ($4) {
      if ($1 >>> 0 > $4 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 16 >> 2] = $4;
      HEAP32[$4 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$3;
     }
     if (HEAPU32[8384] > $1 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$3;
    }
    $1 = HEAP32[$6 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$3;
    }
    HEAP32[8382] = $0;
    HEAP32[$6 + 4 >> 2] = $1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
    return;
   }
   if ($6 >>> 0 <= $3 >>> 0) {
    break label$1;
   }
   $8 = HEAP32[$6 + 4 >> 2];
   if (!($8 & 1)) {
    break label$1;
   }
   label$16 : {
    if (!($8 & 2)) {
     if (HEAP32[8386] == ($6 | 0)) {
      HEAP32[8386] = $3;
      $0 = HEAP32[8383] + $0 | 0;
      HEAP32[8383] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[8385] != ($3 | 0)) {
       break label$2;
      }
      HEAP32[8382] = 0;
      HEAP32[8385] = 0;
      return;
     }
     if (HEAP32[8385] == ($6 | 0)) {
      HEAP32[8385] = $3;
      $0 = HEAP32[8382] + $0 | 0;
      HEAP32[8382] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3 >> 2] = $0;
      return;
     }
     label$20 : {
      if ($8 >>> 0 <= 255) {
       $5 = HEAP32[$6 + 12 >> 2];
       $4 = HEAP32[$6 + 8 >> 2];
       $2 = $8 >>> 3;
       $1 = ($2 << 3) + 33560 | 0;
       if (HEAP32[$4 + 12 >> 2] != ($6 | 0) | HEAPU32[8384] > $4 >>> 0 ? ($4 | 0) != ($1 | 0) : 0) {
        break label$1;
       }
       if (($4 | 0) == ($5 | 0)) {
        wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       if (HEAP32[$5 + 8 >> 2] != ($6 | 0) | HEAPU32[8384] > $5 >>> 0 ? ($1 | 0) != ($5 | 0) : 0) {
        break label$1;
       }
       HEAP32[$4 + 12 >> 2] = $5;
       HEAP32[$5 + 8 >> 2] = $4;
       break label$20;
      }
      $7 = HEAP32[$6 + 24 >> 2];
      $2 = HEAP32[$6 + 12 >> 2];
      label$25 : {
       if (($6 | 0) != ($2 | 0)) {
        $1 = HEAP32[$6 + 8 >> 2];
        if (HEAPU32[8384] > $1 >>> 0 | HEAP32[$1 + 12 >> 2] != ($6 | 0) | HEAP32[$2 + 8 >> 2] != ($6 | 0)) {
         break label$1;
        }
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$25;
       }
       label$27 : {
        $1 = $6 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $1 = $6 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$25;
       }
       while (1) {
        $5 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       if (HEAPU32[8384] > $5 >>> 0) {
        break label$1;
       }
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$20;
      }
      $4 = HEAP32[$6 + 28 >> 2];
      $1 = ($4 << 2) + 33824 | 0;
      label$29 : {
       if (HEAP32[$1 >> 2] == ($6 | 0)) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       if (HEAPU32[8384] > $7 >>> 0) {
        break label$1;
       }
       HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($6 | 0) ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$20;
       }
      }
      $1 = HEAP32[8384];
      if ($1 >>> 0 > $2 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $4 = HEAP32[$6 + 16 >> 2];
      if ($4) {
       if ($1 >>> 0 > $4 >>> 0) {
        break label$1;
       }
       HEAP32[$2 + 16 >> 2] = $4;
       HEAP32[$4 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$6 + 20 >> 2];
      if (!$1) {
       break label$20;
      }
      if (HEAPU32[8384] > $1 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $0 = ($8 & -8) + $0 | 0;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[8385] != ($3 | 0)) {
      break label$16;
     }
     HEAP32[8382] = $0;
     return;
    }
    HEAP32[$6 + 4 >> 2] = $8 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3;
    $0 = ($1 << 3) + 33560 | 0;
    $2 = HEAP32[8380];
    $1 = 1 << $1;
    label$33 : {
     if (!($2 & $1)) {
      HEAP32[8380] = $1 | $2;
      $1 = $0;
      break label$33;
     }
     $1 = HEAP32[$0 + 8 >> 2];
     if (HEAPU32[8384] > $1 >>> 0) {
      break label$1;
     }
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $1;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $1 = $3;
   $4 = $0 >>> 8;
   $2 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $2 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$35;
    }
    $2 = $4;
    $4 = $4 + 1048320 >>> 16 & 8;
    $2 = $2 << $4;
    $7 = $2 + 520192 >>> 16 & 4;
    $2 = $2 << $7;
    $5 = $2 + 245760 >>> 16 & 2;
    $2 = ($2 << $5 >>> 15) - ($5 | ($4 | $7)) | 0;
    $2 = ($2 << 1 | $0 >>> $2 + 21 & 1) + 28 | 0;
   }
   HEAP32[$1 + 28 >> 2] = $2;
   $5 = ($2 << 2) + 33824 | 0;
   $4 = HEAP32[8381];
   $1 = 1 << $2;
   label$36 : {
    if (!($4 & $1)) {
     HEAP32[8381] = $1 | $4;
     HEAP32[$5 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $5;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $1 = $0 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1) | 0);
    $2 = HEAP32[$5 >> 2];
    label$38 : {
     while (1) {
      $4 = $2;
      if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
       break label$38;
      }
      $2 = $1 >>> 29;
      $1 = $1 << 1;
      $5 = ($4 + ($2 & 4) | 0) + 16 | 0;
      $2 = HEAP32[$5 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     if (HEAPU32[8384] > $5 >>> 0) {
      break label$1;
     }
     HEAP32[$5 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $4;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $0 = HEAP32[8384];
    $1 = HEAP32[$4 + 8 >> 2];
    if ($0 >>> 0 > $1 >>> 0 | $0 >>> 0 > $4 >>> 0) {
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = $1;
   }
   $0 = HEAP32[8388] + -1 | 0;
   HEAP32[8388] = $0;
   if ($0) {
    break label$2;
   }
   $3 = 33976;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue;
    }
    break;
   }
   HEAP32[8388] = -1;
  }
  return;
 }
 abort();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
 label$1 : {
  if (!(($2 & 255) != 71 ? ($2 | 0) != 84 : 0)) {
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($0);
   break label$1;
  }
  HEAP32[$1 + 56 >> 2] = $0;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__NameState_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($1 + 40 | 0, $0);
  $2 = $0;
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($2, $4);
  HEAP32[$1 + 36 >> 2] = $3;
  $0 = 0;
  if (!$3) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($2, $4)) {
   break label$1;
  }
  $0 = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 19361);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($2, $1)) {
    $0 = $2 + 8 | 0;
    $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0);
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($2, 69)) {
      $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($2);
      HEAP32[$1 + 16 >> 2] = $5;
      if (!$5) {
       break label$3;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1 + 16 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $2, $3);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($2 + 368 | 0, $1 + 16 | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
   }
   HEAP32[$1 + 12 >> 2] = 0;
   if (!(HEAPU8[$1 + 40 | 0] | !HEAPU8[$4 + 1 | 0])) {
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($2);
    HEAP32[$1 + 12 >> 2] = $0;
    if (!$0) {
     break label$3;
    }
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($2, 118)) {
    $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($2, $1 + 12 | 0, $1 + 36 | 0, $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 16 | 0), $1 + 32 | 0, $4 + 4 | 0, $4 + 8 | 0);
    break label$1;
   }
   $0 = $2 + 8 | 0;
   $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0);
   while (1) {
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($2);
    HEAP32[$1 + 16 >> 2] = $5;
    if (!$5) {
     break label$3;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1 + 16 | 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $2, $3);
   $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($2, $1 + 12 | 0, $1 + 36 | 0, $1 + 16 | 0, $1 + 32 | 0, $4 + 4 | 0, $4 + 8 | 0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 - -64 | 0;
 return $0;
}
function arLabelingSubEBZ($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $6 = HEAP32[$4 >> 2];
 $15 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($15, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $1 + -1 | 0;
 $7 = $6 + ($16 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $3 = $5 + $3 | 0;
 $0 = $0 + $5 | 0;
 $14 = $5 + HEAP32[$4 + 4 >> 2] | 0;
 $8 = $6 + ($5 << 1) | 0;
 $18 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($15 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] <= HEAPU8[$3 | 0]) {
          HEAP8[$14 | 0] = 255;
          $11 = $8 + $18 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1280, 0);
           $0 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $8 = $8 + 4 | 0;
        $3 = $3 + 2 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $14 = $14 + 1 | 0;
     $8 = $8 + 2 | 0;
     $3 = $3 + 1 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $9 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $2 = $5 << 4;
      $1 = $2 + $9 | 0;
      $17 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $17;
      $1 = $9 + ($2 | 8) | 0;
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $17;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubEBIC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $5 = HEAP32[$4 >> 2];
 $13 = ($1 | 0) / 2 | 0;
 $15 = ($2 | 0) / 2 | 0;
 $16 = $15 + -1 | 0;
 $6 = $5 + (Math_imul($13, $16) << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($13 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $7 = $7 + 2 | 0;
   $6 = $6 + 2 | 0;
   continue;
  }
  break;
 }
 $17 = $13 + -1 | 0;
 $6 = $5 + ($17 << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($15 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $8 = $13 << 1;
   $6 = $8 + $6 | 0;
   $7 = $7 + $8 | 0;
   continue;
  }
  break;
 }
 $8 = $4 + 1179664 | 0;
 $2 = $13 + 1 | 0;
 $14 = $2 + HEAP32[$4 + 4 >> 2] | 0;
 $0 = (($1 << 1) + $0 | 0) + 2 | 0;
 $7 = $5 + ($2 << 1) | 0;
 $19 = 0 - $13 << 1;
 $10 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($10 | 0) < ($16 | 0)) {
    $6 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($6 | 0) < ($17 | 0)) {
         if (HEAPU8[$0 | 0] <= ($3 | 0)) {
          HEAP8[$14 | 0] = 255;
          $5 = $7 + $19 | 0;
          $2 = HEAPU16[$5 >> 1];
          $9 = $2 << 16 >> 16;
          if (($9 | 0) >= 1) {
           HEAP16[$7 >> 1] = $9;
           $2 = Math_imul($2, 28) + $4 | 0;
           HEAP32[$2 + 1310732 >> 2] = $10;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $2 = $2 + 1310716 | 0;
           HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
           break label$9;
          }
          $2 = HEAP16[$5 + -2 >> 1];
          $5 = HEAP16[$5 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($2 | 0) >= 1) {
            $9 = $4 + 1179664 | 0;
            $5 = HEAP32[($9 + ($5 << 2) | 0) + -4 >> 2];
            $9 = HEAP32[($9 + ($2 << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($9 | 0)) {
             HEAP16[$7 >> 1] = $9;
             $11 = 0;
             $2 = $8;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $9;
               break label$10;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $9;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $8;
            if (($5 | 0) >= ($9 | 0)) {
             break label$10;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$10;
             }
             if (($9 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           $2 = HEAP16[$7 + -2 >> 1];
           if (($2 | 0) >= 1) {
            $9 = $4 + 1179664 | 0;
            $5 = HEAP32[($9 + ($5 << 2) | 0) + -4 >> 2];
            $9 = HEAP32[($9 + (($2 & 65535) << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($9 | 0)) {
             HEAP16[$7 >> 1] = $9;
             $11 = 0;
             $2 = $8;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $9;
               break label$11;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $9;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $8;
            if (($5 | 0) >= ($9 | 0)) {
             break label$11;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$11;
             }
             if (($9 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           HEAP16[$7 >> 1] = $5;
           $2 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          if (($2 | 0) >= 1) {
           HEAP16[$7 >> 1] = $2;
           $2 = (Math_imul($2, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          $2 = HEAPU16[$7 + -2 >> 1];
          $5 = $2 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$7 >> 1] = $5;
           $2 = Math_imul($2, 28) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $2 = $2 + 1310724 | 0;
           if (HEAP32[$2 >> 2] >= ($6 | 0)) {
            break label$9;
           }
           HEAP32[$2 >> 2] = $6;
           break label$9;
          }
          if (($12 | 0) >= 32768) {
           arLog(3, 1216, 0);
           $0 = -1;
           break label$5;
          }
          $2 = $12 + 1 | 0;
          HEAP16[$7 >> 1] = $2;
          HEAP32[(($12 << 2) + $4 | 0) + 1179664 >> 2] = $2 << 16 >> 16;
          $5 = Math_imul($12, 28) + $4 | 0;
          HEAP32[$5 + 1310740 >> 2] = $6;
          HEAP32[$5 + 1310736 >> 2] = 1;
          HEAP32[$5 + 1310744 >> 2] = $10;
          HEAP32[$5 + 1310748 >> 2] = $6;
          HEAP32[$5 + 1310752 >> 2] = $6;
          HEAP32[$5 + 1310756 >> 2] = $10;
          HEAP32[$5 + 1310760 >> 2] = $10;
          $12 = $2;
          break label$9;
         }
         HEAP16[$7 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $7 = $7 + 4 | 0;
        $10 = $10 + 1 | 0;
        $0 = ($0 + $1 | 0) + 4 | 0;
        continue label$6;
       }
       $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
       $5 = $2 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $2 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
       $2 = $2 + 1310716 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
       break label$9;
      }
      $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$2 + 1310732 >> 2] = $10;
      $5 = $2 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $2 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
      $2 = $2 + 1310716 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
     }
     $14 = $14 + 1 | 0;
     $7 = $7 + 2 | 0;
     $0 = $0 + 2 | 0;
     $6 = $6 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $2 = 1;
  $7 = 1;
  while (1) {
   if (($2 | 0) <= ($12 | 0)) {
    $0 = HEAP32[$8 >> 2];
    label$37 : {
     if (($0 | 0) == ($2 | 0)) {
      $6 = $7;
      $7 = $6 + 1 | 0;
      break label$37;
     }
     $6 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$8 >> 2] = $6;
    $8 = $8 + 4 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $0 = $7 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $0;
  if (!$0) {
   return 0;
  }
  $6 = 0;
  memset($4 + 12 | 0, 0, $0 << 2);
  memset($4 + 655376 | 0, 0, $0 << 4);
  $1 = $4 + 131084 | 0;
  $2 = 0;
  while (1) if (($2 | 0) >= ($0 | 0)) {
   while (1) {
    if (($6 | 0) >= ($12 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $1 = $4 + 655376 | 0;
     $2 = 0;
     while (1) {
      if (($2 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $8 = $2 << 4;
      $7 = $8 + $1 | 0;
      $18 = +HEAP32[(($2 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$7 >> 3] = HEAPF64[$7 >> 3] / $18;
      $8 = $1 + ($8 | 8) | 0;
      HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] / $18;
      $2 = $2 + 1 | 0;
      continue;
     }
    }
    $1 = HEAP32[(($6 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $1 << 2;
    $0 = $2 + $4 | 0;
    $3 = $0 + 12 | 0;
    $5 = HEAP32[$0 + 12 >> 2];
    $0 = (Math_imul($6, 7) << 2) + $4 | 0;
    HEAP32[$3 >> 2] = $5 + HEAP32[$0 + 1310736 >> 2];
    $3 = HEAP32[$0 + 1310740 >> 2];
    $1 = ($1 << 4) + $4 | 0;
    $8 = $1 + 655384 | 0;
    HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] + +HEAP32[$0 + 1310744 >> 2];
    $8 = $1 + 655376 | 0;
    HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] + +($3 | 0);
    $1 = $1 + 131084 | 0;
    $3 = HEAP32[$0 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($3 | 0)) {
     HEAP32[$1 >> 2] = $3;
    }
    $1 = $2 << 2;
    $2 = (($1 | 4) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310752 >> 2];
    if (HEAP32[$2 >> 2] < ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $2 = (($1 | 8) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310756 >> 2];
    if (HEAP32[$2 >> 2] > ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $1 = (($1 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$0 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  } else {
   $3 = $2 << 4;
   HEAP32[$3 + $1 >> 2] = $13;
   HEAP32[$1 + ($3 | 4) >> 2] = 0;
   HEAP32[$1 + ($3 | 8) >> 2] = $15;
   HEAP32[$1 + ($3 | 12) >> 2] = 0;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubEWZ($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $6 = HEAP32[$4 >> 2];
 $15 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($15, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $1 + -1 | 0;
 $7 = $6 + ($16 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $3 = $5 + $3 | 0;
 $0 = $0 + $5 | 0;
 $14 = $5 + HEAP32[$4 + 4 >> 2] | 0;
 $8 = $6 + ($5 << 1) | 0;
 $18 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($15 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] > HEAPU8[$3 | 0]) {
          HEAP8[$14 | 0] = 255;
          $11 = $8 + $18 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1376, 0);
           $0 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $8 = $8 + 4 | 0;
        $3 = $3 + 2 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $14 = $14 + 1 | 0;
     $8 = $8 + 2 | 0;
     $3 = $3 + 1 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $9 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $2 = $5 << 4;
      $1 = $2 + $9 | 0;
      $17 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $17;
      $1 = $9 + ($2 | 8) | 0;
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $17;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubEWIC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $5 = HEAP32[$4 >> 2];
 $13 = ($1 | 0) / 2 | 0;
 $15 = ($2 | 0) / 2 | 0;
 $16 = $15 + -1 | 0;
 $6 = $5 + (Math_imul($13, $16) << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($13 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $7 = $7 + 2 | 0;
   $6 = $6 + 2 | 0;
   continue;
  }
  break;
 }
 $17 = $13 + -1 | 0;
 $6 = $5 + ($17 << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($15 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $8 = $13 << 1;
   $6 = $8 + $6 | 0;
   $7 = $7 + $8 | 0;
   continue;
  }
  break;
 }
 $8 = $4 + 1179664 | 0;
 $2 = $13 + 1 | 0;
 $14 = $2 + HEAP32[$4 + 4 >> 2] | 0;
 $0 = (($1 << 1) + $0 | 0) + 2 | 0;
 $7 = $5 + ($2 << 1) | 0;
 $19 = 0 - $13 << 1;
 $10 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($10 | 0) < ($16 | 0)) {
    $6 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($6 | 0) < ($17 | 0)) {
         if (HEAPU8[$0 | 0] > ($3 | 0)) {
          HEAP8[$14 | 0] = 255;
          $5 = $7 + $19 | 0;
          $2 = HEAPU16[$5 >> 1];
          $9 = $2 << 16 >> 16;
          if (($9 | 0) >= 1) {
           HEAP16[$7 >> 1] = $9;
           $2 = Math_imul($2, 28) + $4 | 0;
           HEAP32[$2 + 1310732 >> 2] = $10;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $2 = $2 + 1310716 | 0;
           HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
           break label$9;
          }
          $2 = HEAP16[$5 + -2 >> 1];
          $5 = HEAP16[$5 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($2 | 0) >= 1) {
            $9 = $4 + 1179664 | 0;
            $5 = HEAP32[($9 + ($5 << 2) | 0) + -4 >> 2];
            $9 = HEAP32[($9 + ($2 << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($9 | 0)) {
             HEAP16[$7 >> 1] = $9;
             $11 = 0;
             $2 = $8;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $9;
               break label$10;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $9;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $8;
            if (($5 | 0) >= ($9 | 0)) {
             break label$10;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$10;
             }
             if (($9 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           $2 = HEAP16[$7 + -2 >> 1];
           if (($2 | 0) >= 1) {
            $9 = $4 + 1179664 | 0;
            $5 = HEAP32[($9 + ($5 << 2) | 0) + -4 >> 2];
            $9 = HEAP32[($9 + (($2 & 65535) << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($9 | 0)) {
             HEAP16[$7 >> 1] = $9;
             $11 = 0;
             $2 = $8;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $9;
               break label$11;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $9;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $8;
            if (($5 | 0) >= ($9 | 0)) {
             break label$11;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$11;
             }
             if (($9 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           HEAP16[$7 >> 1] = $5;
           $2 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          if (($2 | 0) >= 1) {
           HEAP16[$7 >> 1] = $2;
           $2 = (Math_imul($2, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          $2 = HEAPU16[$7 + -2 >> 1];
          $5 = $2 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$7 >> 1] = $5;
           $2 = Math_imul($2, 28) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $2 = $2 + 1310724 | 0;
           if (HEAP32[$2 >> 2] >= ($6 | 0)) {
            break label$9;
           }
           HEAP32[$2 >> 2] = $6;
           break label$9;
          }
          if (($12 | 0) >= 32768) {
           arLog(3, 1312, 0);
           $0 = -1;
           break label$5;
          }
          $2 = $12 + 1 | 0;
          HEAP16[$7 >> 1] = $2;
          HEAP32[(($12 << 2) + $4 | 0) + 1179664 >> 2] = $2 << 16 >> 16;
          $5 = Math_imul($12, 28) + $4 | 0;
          HEAP32[$5 + 1310740 >> 2] = $6;
          HEAP32[$5 + 1310736 >> 2] = 1;
          HEAP32[$5 + 1310744 >> 2] = $10;
          HEAP32[$5 + 1310748 >> 2] = $6;
          HEAP32[$5 + 1310752 >> 2] = $6;
          HEAP32[$5 + 1310756 >> 2] = $10;
          HEAP32[$5 + 1310760 >> 2] = $10;
          $12 = $2;
          break label$9;
         }
         HEAP16[$7 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $7 = $7 + 4 | 0;
        $10 = $10 + 1 | 0;
        $0 = ($0 + $1 | 0) + 4 | 0;
        continue label$6;
       }
       $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
       $5 = $2 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $2 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
       $2 = $2 + 1310716 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
       break label$9;
      }
      $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$2 + 1310732 >> 2] = $10;
      $5 = $2 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $2 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
      $2 = $2 + 1310716 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
     }
     $14 = $14 + 1 | 0;
     $7 = $7 + 2 | 0;
     $0 = $0 + 2 | 0;
     $6 = $6 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $2 = 1;
  $7 = 1;
  while (1) {
   if (($2 | 0) <= ($12 | 0)) {
    $0 = HEAP32[$8 >> 2];
    label$37 : {
     if (($0 | 0) == ($2 | 0)) {
      $6 = $7;
      $7 = $6 + 1 | 0;
      break label$37;
     }
     $6 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$8 >> 2] = $6;
    $8 = $8 + 4 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $0 = $7 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $0;
  if (!$0) {
   return 0;
  }
  $6 = 0;
  memset($4 + 12 | 0, 0, $0 << 2);
  memset($4 + 655376 | 0, 0, $0 << 4);
  $1 = $4 + 131084 | 0;
  $2 = 0;
  while (1) if (($2 | 0) >= ($0 | 0)) {
   while (1) {
    if (($6 | 0) >= ($12 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $1 = $4 + 655376 | 0;
     $2 = 0;
     while (1) {
      if (($2 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $8 = $2 << 4;
      $7 = $8 + $1 | 0;
      $18 = +HEAP32[(($2 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$7 >> 3] = HEAPF64[$7 >> 3] / $18;
      $8 = $1 + ($8 | 8) | 0;
      HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] / $18;
      $2 = $2 + 1 | 0;
      continue;
     }
    }
    $1 = HEAP32[(($6 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $1 << 2;
    $0 = $2 + $4 | 0;
    $3 = $0 + 12 | 0;
    $5 = HEAP32[$0 + 12 >> 2];
    $0 = (Math_imul($6, 7) << 2) + $4 | 0;
    HEAP32[$3 >> 2] = $5 + HEAP32[$0 + 1310736 >> 2];
    $3 = HEAP32[$0 + 1310740 >> 2];
    $1 = ($1 << 4) + $4 | 0;
    $8 = $1 + 655384 | 0;
    HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] + +HEAP32[$0 + 1310744 >> 2];
    $8 = $1 + 655376 | 0;
    HEAPF64[$8 >> 3] = HEAPF64[$8 >> 3] + +($3 | 0);
    $1 = $1 + 131084 | 0;
    $3 = HEAP32[$0 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($3 | 0)) {
     HEAP32[$1 >> 2] = $3;
    }
    $1 = $2 << 2;
    $2 = (($1 | 4) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310752 >> 2];
    if (HEAP32[$2 >> 2] < ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $2 = (($1 | 8) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310756 >> 2];
    if (HEAP32[$2 >> 2] > ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $1 = (($1 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$0 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  } else {
   $3 = $2 << 4;
   HEAP32[$3 + $1 >> 2] = $13;
   HEAP32[$1 + ($3 | 4) >> 2] = 0;
   HEAP32[$1 + ($3 | 8) >> 2] = $15;
   HEAP32[$1 + ($3 | 12) >> 2] = 0;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubEBRC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $6 = HEAP32[$4 >> 2];
 $15 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($15, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $1 + -1 | 0;
 $7 = $6 + ($16 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $0 = $5 + $0 | 0;
 $14 = $5 + HEAP32[$4 + 4 >> 2] | 0;
 $8 = $6 + ($5 << 1) | 0;
 $18 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($15 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] <= ($3 | 0)) {
          HEAP8[$14 | 0] = 255;
          $11 = $8 + $18 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1248, 0);
           $14 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $8 = $8 + 4 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $14 = $14 + 1 | 0;
     $8 = $8 + 2 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $2 = HEAP32[$4 + 8 >> 2];
     $14 = 0;
     $3 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($2 | 0)) {
       break label$5;
      }
      $1 = $5 << 4;
      $0 = $1 + $3 | 0;
      $17 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $17;
      $0 = $3 + ($1 | 8) | 0;
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $17;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $14;
}
function arLabelingSubEWRC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $6 = HEAP32[$4 >> 2];
 $15 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($15, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $1 + -1 | 0;
 $7 = $6 + ($16 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $0 = $5 + $0 | 0;
 $14 = $5 + HEAP32[$4 + 4 >> 2] | 0;
 $8 = $6 + ($5 << 1) | 0;
 $18 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($15 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] > ($3 | 0)) {
          HEAP8[$14 | 0] = 255;
          $11 = $8 + $18 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1344, 0);
           $14 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         HEAP8[$14 | 0] = 0;
         break label$9;
        }
        $14 = $14 + 2 | 0;
        $8 = $8 + 4 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $14 = $14 + 1 | 0;
     $8 = $8 + 2 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $2 = HEAP32[$4 + 8 >> 2];
     $14 = 0;
     $3 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($2 | 0)) {
       break label$5;
      }
      $1 = $5 << 4;
      $0 = $1 + $3 | 0;
      $17 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $17;
      $0 = $3 + ($1 | 8) | 0;
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $17;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $14;
}
function arLabelingSubDBZ($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $6 = HEAP32[$4 >> 2];
 $14 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($14, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $15 = $1 + -1 | 0;
 $7 = $6 + ($15 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $3 = $5 + $3 | 0;
 $0 = $0 + $5 | 0;
 $8 = $6 + ($5 << 1) | 0;
 $17 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($14 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($15 | 0)) {
         if (HEAPU8[$0 | 0] <= HEAPU8[$3 | 0]) {
          $11 = $8 + $17 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1088, 0);
           $0 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         break label$9;
        }
        $8 = $8 + 4 | 0;
        $3 = $3 + 2 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $8 = $8 + 2 | 0;
     $3 = $3 + 1 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $9 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $2 = $5 << 4;
      $1 = $2 + $9 | 0;
      $16 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $16;
      $1 = $9 + ($2 | 8) | 0;
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $16;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubDWZ($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $6 = HEAP32[$4 >> 2];
 $14 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($14, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $15 = $1 + -1 | 0;
 $7 = $6 + ($15 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $3 = $5 + $3 | 0;
 $0 = $0 + $5 | 0;
 $8 = $6 + ($5 << 1) | 0;
 $17 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($14 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($15 | 0)) {
         if (HEAPU8[$0 | 0] > HEAPU8[$3 | 0]) {
          $11 = $8 + $17 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1184, 0);
           $0 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         break label$9;
        }
        $8 = $8 + 4 | 0;
        $3 = $3 + 2 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $8 = $8 + 2 | 0;
     $3 = $3 + 1 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $3 = HEAP32[$4 + 8 >> 2];
     $0 = 0;
     $9 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($3 | 0)) {
       break label$5;
      }
      $2 = $5 << 4;
      $1 = $2 + $9 | 0;
      $16 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $16;
      $1 = $9 + ($2 | 8) | 0;
      HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $16;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $0;
}
function arLabelingSubDBIC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $5 = HEAP32[$4 >> 2];
 $13 = ($1 | 0) / 2 | 0;
 $14 = ($2 | 0) / 2 | 0;
 $15 = $14 + -1 | 0;
 $6 = $5 + (Math_imul($13, $15) << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($13 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $7 = $7 + 2 | 0;
   $6 = $6 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $13 + -1 | 0;
 $6 = $5 + ($16 << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($14 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $9 = $13 << 1;
   $6 = $9 + $6 | 0;
   $7 = $7 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $0 = (($1 << 1) + $0 | 0) + 2 | 0;
 $7 = ($5 + ($13 << 1) | 0) + 2 | 0;
 $18 = 0 - $13 << 1;
 $10 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($10 | 0) < ($15 | 0)) {
    $6 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($6 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] <= ($3 | 0)) {
          $5 = $7 + $18 | 0;
          $2 = HEAPU16[$5 >> 1];
          $8 = $2 << 16 >> 16;
          if (($8 | 0) >= 1) {
           HEAP16[$7 >> 1] = $8;
           $2 = Math_imul($2, 28) + $4 | 0;
           HEAP32[$2 + 1310732 >> 2] = $10;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $2 = $2 + 1310716 | 0;
           HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
           break label$9;
          }
          $2 = HEAP16[$5 + -2 >> 1];
          $5 = HEAP16[$5 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($2 | 0) >= 1) {
            $8 = $4 + 1179664 | 0;
            $5 = HEAP32[($8 + ($5 << 2) | 0) + -4 >> 2];
            $8 = HEAP32[($8 + ($2 << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($8 | 0)) {
             HEAP16[$7 >> 1] = $8;
             $11 = 0;
             $2 = $9;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $8;
               break label$10;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $8;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $9;
            if (($5 | 0) >= ($8 | 0)) {
             break label$10;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$10;
             }
             if (($8 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           $2 = HEAP16[$7 + -2 >> 1];
           if (($2 | 0) >= 1) {
            $8 = $4 + 1179664 | 0;
            $5 = HEAP32[($8 + ($5 << 2) | 0) + -4 >> 2];
            $8 = HEAP32[($8 + (($2 & 65535) << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($8 | 0)) {
             HEAP16[$7 >> 1] = $8;
             $11 = 0;
             $2 = $9;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $8;
               break label$11;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $8;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $9;
            if (($5 | 0) >= ($8 | 0)) {
             break label$11;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$11;
             }
             if (($8 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           HEAP16[$7 >> 1] = $5;
           $2 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          if (($2 | 0) >= 1) {
           HEAP16[$7 >> 1] = $2;
           $2 = (Math_imul($2, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          $2 = HEAPU16[$7 + -2 >> 1];
          $5 = $2 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$7 >> 1] = $5;
           $2 = Math_imul($2, 28) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $2 = $2 + 1310724 | 0;
           if (HEAP32[$2 >> 2] >= ($6 | 0)) {
            break label$9;
           }
           HEAP32[$2 >> 2] = $6;
           break label$9;
          }
          if (($12 | 0) >= 32768) {
           arLog(3, 1024, 0);
           $12 = -1;
           break label$5;
          }
          $2 = $12 + 1 | 0;
          HEAP16[$7 >> 1] = $2;
          HEAP32[(($12 << 2) + $4 | 0) + 1179664 >> 2] = $2 << 16 >> 16;
          $5 = Math_imul($12, 28) + $4 | 0;
          HEAP32[$5 + 1310740 >> 2] = $6;
          HEAP32[$5 + 1310736 >> 2] = 1;
          HEAP32[$5 + 1310744 >> 2] = $10;
          HEAP32[$5 + 1310748 >> 2] = $6;
          HEAP32[$5 + 1310752 >> 2] = $6;
          HEAP32[$5 + 1310756 >> 2] = $10;
          HEAP32[$5 + 1310760 >> 2] = $10;
          $12 = $2;
          break label$9;
         }
         HEAP16[$7 >> 1] = 0;
         break label$9;
        }
        $7 = $7 + 4 | 0;
        $10 = $10 + 1 | 0;
        $0 = ($0 + $1 | 0) + 4 | 0;
        continue label$6;
       }
       $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
       $5 = $2 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $2 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
       $2 = $2 + 1310716 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
       break label$9;
      }
      $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$2 + 1310732 >> 2] = $10;
      $5 = $2 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $2 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
      $2 = $2 + 1310716 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
     }
     $7 = $7 + 2 | 0;
     $0 = $0 + 2 | 0;
     $6 = $6 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $2 = 1;
  $7 = 1;
  while (1) {
   if (($2 | 0) <= ($12 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($2 | 0)) {
      $6 = $7;
      $7 = $6 + 1 | 0;
      break label$37;
     }
     $6 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $6;
    $9 = $9 + 4 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $0 = $7 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $0;
  if (!$0) {
   return 0;
  }
  $6 = 0;
  memset($4 + 12 | 0, 0, $0 << 2);
  memset($4 + 655376 | 0, 0, $0 << 4);
  $1 = $4 + 131084 | 0;
  $2 = 0;
  while (1) if (($2 | 0) >= ($0 | 0)) {
   while (1) {
    if (($6 | 0) >= ($12 | 0)) {
     $1 = HEAP32[$4 + 8 >> 2];
     $12 = 0;
     $0 = $4 + 655376 | 0;
     $2 = 0;
     while (1) {
      if (($2 | 0) >= ($1 | 0)) {
       break label$5;
      }
      $3 = $2 << 4;
      $9 = $3 + $0 | 0;
      $17 = +HEAP32[(($2 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] / $17;
      $3 = $0 + ($3 | 8) | 0;
      HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] / $17;
      $2 = $2 + 1 | 0;
      continue;
     }
    }
    $1 = HEAP32[(($6 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $1 << 2;
    $0 = $2 + $4 | 0;
    $3 = $0 + 12 | 0;
    $5 = HEAP32[$0 + 12 >> 2];
    $0 = (Math_imul($6, 7) << 2) + $4 | 0;
    HEAP32[$3 >> 2] = $5 + HEAP32[$0 + 1310736 >> 2];
    $3 = HEAP32[$0 + 1310740 >> 2];
    $1 = ($1 << 4) + $4 | 0;
    $9 = $1 + 655384 | 0;
    HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + +HEAP32[$0 + 1310744 >> 2];
    $9 = $1 + 655376 | 0;
    HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + +($3 | 0);
    $1 = $1 + 131084 | 0;
    $3 = HEAP32[$0 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($3 | 0)) {
     HEAP32[$1 >> 2] = $3;
    }
    $1 = $2 << 2;
    $2 = (($1 | 4) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310752 >> 2];
    if (HEAP32[$2 >> 2] < ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $2 = (($1 | 8) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310756 >> 2];
    if (HEAP32[$2 >> 2] > ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $1 = (($1 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$0 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  } else {
   $3 = $2 << 4;
   HEAP32[$3 + $1 >> 2] = $13;
   HEAP32[$1 + ($3 | 4) >> 2] = 0;
   HEAP32[$1 + ($3 | 8) >> 2] = $14;
   HEAP32[$1 + ($3 | 12) >> 2] = 0;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 return $12;
}
function arLabelingSubDWIC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $5 = HEAP32[$4 >> 2];
 $13 = ($1 | 0) / 2 | 0;
 $14 = ($2 | 0) / 2 | 0;
 $15 = $14 + -1 | 0;
 $6 = $5 + (Math_imul($13, $15) << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($13 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $7 = $7 + 2 | 0;
   $6 = $6 + 2 | 0;
   continue;
  }
  break;
 }
 $16 = $13 + -1 | 0;
 $6 = $5 + ($16 << 1) | 0;
 $2 = 0;
 $7 = $5;
 while (1) {
  if (($2 | 0) < ($14 | 0)) {
   HEAP16[$6 >> 1] = 0;
   HEAP16[$7 >> 1] = 0;
   $2 = $2 + 1 | 0;
   $9 = $13 << 1;
   $6 = $9 + $6 | 0;
   $7 = $7 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $0 = (($1 << 1) + $0 | 0) + 2 | 0;
 $7 = ($5 + ($13 << 1) | 0) + 2 | 0;
 $18 = 0 - $13 << 1;
 $10 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($10 | 0) < ($15 | 0)) {
    $6 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($6 | 0) < ($16 | 0)) {
         if (HEAPU8[$0 | 0] > ($3 | 0)) {
          $5 = $7 + $18 | 0;
          $2 = HEAPU16[$5 >> 1];
          $8 = $2 << 16 >> 16;
          if (($8 | 0) >= 1) {
           HEAP16[$7 >> 1] = $8;
           $2 = Math_imul($2, 28) + $4 | 0;
           HEAP32[$2 + 1310732 >> 2] = $10;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $2 = $2 + 1310716 | 0;
           HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
           break label$9;
          }
          $2 = HEAP16[$5 + -2 >> 1];
          $5 = HEAP16[$5 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($2 | 0) >= 1) {
            $8 = $4 + 1179664 | 0;
            $5 = HEAP32[($8 + ($5 << 2) | 0) + -4 >> 2];
            $8 = HEAP32[($8 + ($2 << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($8 | 0)) {
             HEAP16[$7 >> 1] = $8;
             $11 = 0;
             $2 = $9;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $8;
               break label$10;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $8;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $9;
            if (($5 | 0) >= ($8 | 0)) {
             break label$10;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$10;
             }
             if (($8 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           $2 = HEAP16[$7 + -2 >> 1];
           if (($2 | 0) >= 1) {
            $8 = $4 + 1179664 | 0;
            $5 = HEAP32[($8 + ($5 << 2) | 0) + -4 >> 2];
            $8 = HEAP32[($8 + (($2 & 65535) << 2) | 0) + -4 >> 2];
            if (($5 | 0) > ($8 | 0)) {
             HEAP16[$7 >> 1] = $8;
             $11 = 0;
             $2 = $9;
             while (1) {
              if (($11 | 0) >= ($12 | 0)) {
               $5 = $8;
               break label$11;
              }
              if (HEAP32[$2 >> 2] == ($5 | 0)) {
               HEAP32[$2 >> 2] = $8;
              }
              $11 = $11 + 1 | 0;
              $2 = $2 + 4 | 0;
              continue;
             }
            }
            HEAP16[$7 >> 1] = $5;
            $11 = 0;
            $2 = $9;
            if (($5 | 0) >= ($8 | 0)) {
             break label$11;
            }
            while (1) {
             if (($11 | 0) >= ($12 | 0)) {
              break label$11;
             }
             if (($8 | 0) == HEAP32[$2 >> 2]) {
              HEAP32[$2 >> 2] = $5;
             }
             $11 = $11 + 1 | 0;
             $2 = $2 + 4 | 0;
             continue;
            }
           }
           HEAP16[$7 >> 1] = $5;
           $2 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          if (($2 | 0) >= 1) {
           HEAP16[$7 >> 1] = $2;
           $2 = (Math_imul($2, 7) << 2) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $5 = $2 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($6 | 0)) {
            HEAP32[$5 >> 2] = $6;
           }
           HEAP32[$2 + 1310732 >> 2] = $10;
           break label$9;
          }
          $2 = HEAPU16[$7 + -2 >> 1];
          $5 = $2 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$7 >> 1] = $5;
           $2 = Math_imul($2, 28) + $4 | 0;
           $5 = $2 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $2 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
           $5 = $2 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $10;
           $2 = $2 + 1310724 | 0;
           if (HEAP32[$2 >> 2] >= ($6 | 0)) {
            break label$9;
           }
           HEAP32[$2 >> 2] = $6;
           break label$9;
          }
          if (($12 | 0) >= 32768) {
           arLog(3, 1120, 0);
           $12 = -1;
           break label$5;
          }
          $2 = $12 + 1 | 0;
          HEAP16[$7 >> 1] = $2;
          HEAP32[(($12 << 2) + $4 | 0) + 1179664 >> 2] = $2 << 16 >> 16;
          $5 = Math_imul($12, 28) + $4 | 0;
          HEAP32[$5 + 1310740 >> 2] = $6;
          HEAP32[$5 + 1310736 >> 2] = 1;
          HEAP32[$5 + 1310744 >> 2] = $10;
          HEAP32[$5 + 1310748 >> 2] = $6;
          HEAP32[$5 + 1310752 >> 2] = $6;
          HEAP32[$5 + 1310756 >> 2] = $10;
          HEAP32[$5 + 1310760 >> 2] = $10;
          $12 = $2;
          break label$9;
         }
         HEAP16[$7 >> 1] = 0;
         break label$9;
        }
        $7 = $7 + 4 | 0;
        $10 = $10 + 1 | 0;
        $0 = ($0 + $1 | 0) + 4 | 0;
        continue label$6;
       }
       $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
       $5 = $2 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $2 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
       $2 = $2 + 1310716 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
       break label$9;
      }
      $2 = Math_imul($5 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$2 + 1310732 >> 2] = $10;
      $5 = $2 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $2 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
      $2 = $2 + 1310716 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $10;
     }
     $7 = $7 + 2 | 0;
     $0 = $0 + 2 | 0;
     $6 = $6 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $2 = 1;
  $7 = 1;
  while (1) {
   if (($2 | 0) <= ($12 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($2 | 0)) {
      $6 = $7;
      $7 = $6 + 1 | 0;
      break label$37;
     }
     $6 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $6;
    $9 = $9 + 4 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $0 = $7 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $0;
  if (!$0) {
   return 0;
  }
  $6 = 0;
  memset($4 + 12 | 0, 0, $0 << 2);
  memset($4 + 655376 | 0, 0, $0 << 4);
  $1 = $4 + 131084 | 0;
  $2 = 0;
  while (1) if (($2 | 0) >= ($0 | 0)) {
   while (1) {
    if (($6 | 0) >= ($12 | 0)) {
     $1 = HEAP32[$4 + 8 >> 2];
     $12 = 0;
     $0 = $4 + 655376 | 0;
     $2 = 0;
     while (1) {
      if (($2 | 0) >= ($1 | 0)) {
       break label$5;
      }
      $3 = $2 << 4;
      $9 = $3 + $0 | 0;
      $17 = +HEAP32[(($2 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] / $17;
      $3 = $0 + ($3 | 8) | 0;
      HEAPF64[$3 >> 3] = HEAPF64[$3 >> 3] / $17;
      $2 = $2 + 1 | 0;
      continue;
     }
    }
    $1 = HEAP32[(($6 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $1 << 2;
    $0 = $2 + $4 | 0;
    $3 = $0 + 12 | 0;
    $5 = HEAP32[$0 + 12 >> 2];
    $0 = (Math_imul($6, 7) << 2) + $4 | 0;
    HEAP32[$3 >> 2] = $5 + HEAP32[$0 + 1310736 >> 2];
    $3 = HEAP32[$0 + 1310740 >> 2];
    $1 = ($1 << 4) + $4 | 0;
    $9 = $1 + 655384 | 0;
    HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + +HEAP32[$0 + 1310744 >> 2];
    $9 = $1 + 655376 | 0;
    HEAPF64[$9 >> 3] = HEAPF64[$9 >> 3] + +($3 | 0);
    $1 = $1 + 131084 | 0;
    $3 = HEAP32[$0 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($3 | 0)) {
     HEAP32[$1 >> 2] = $3;
    }
    $1 = $2 << 2;
    $2 = (($1 | 4) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310752 >> 2];
    if (HEAP32[$2 >> 2] < ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $2 = (($1 | 8) + $4 | 0) + 131084 | 0;
    $3 = HEAP32[$0 + 1310756 >> 2];
    if (HEAP32[$2 >> 2] > ($3 | 0)) {
     HEAP32[$2 >> 2] = $3;
    }
    $1 = (($1 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$0 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  } else {
   $3 = $2 << 4;
   HEAP32[$3 + $1 >> 2] = $13;
   HEAP32[$1 + ($3 | 4) >> 2] = 0;
   HEAP32[$1 + ($3 | 8) >> 2] = $14;
   HEAP32[$1 + ($3 | 12) >> 2] = 0;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 return $12;
}
function arLabelingSubDBRC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $6 = HEAP32[$4 >> 2];
 $14 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($14, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $15 = $1 + -1 | 0;
 $7 = $6 + ($15 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $0 = $5 + $0 | 0;
 $8 = $6 + ($5 << 1) | 0;
 $17 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($14 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($15 | 0)) {
         if (HEAPU8[$0 | 0] <= ($3 | 0)) {
          $11 = $8 + $17 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1056, 0);
           $13 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         break label$9;
        }
        $8 = $8 + 4 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $8 = $8 + 2 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $2 = HEAP32[$4 + 8 >> 2];
     $13 = 0;
     $3 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($2 | 0)) {
       break label$5;
      }
      $1 = $5 << 4;
      $0 = $1 + $3 | 0;
      $16 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $16;
      $0 = $3 + ($1 | 8) | 0;
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $16;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $13;
}
function arLabelingSubDWRC($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $6 = HEAP32[$4 >> 2];
 $14 = $2 + -1 | 0;
 $7 = $6 + (Math_imul($14, $1) << 1) | 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($1 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $8 = $8 + 2 | 0;
   $7 = $7 + 2 | 0;
   continue;
  }
  break;
 }
 $15 = $1 + -1 | 0;
 $7 = $6 + ($15 << 1) | 0;
 $5 = 0;
 $8 = $6;
 while (1) {
  if (($5 | 0) < ($2 | 0)) {
   HEAP16[$7 >> 1] = 0;
   HEAP16[$8 >> 1] = 0;
   $5 = $5 + 1 | 0;
   $9 = $1 << 1;
   $7 = $9 + $7 | 0;
   $8 = $8 + $9 | 0;
   continue;
  }
  break;
 }
 $9 = $4 + 1179664 | 0;
 $5 = $1 + 1 | 0;
 $0 = $5 + $0 | 0;
 $8 = $6 + ($5 << 1) | 0;
 $17 = 0 - $1 << 1;
 $12 = 1;
 label$5 : {
  label$6 : while (1) {
   if (($12 | 0) < ($14 | 0)) {
    $7 = 1;
    while (1) {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($7 | 0) < ($15 | 0)) {
         if (HEAPU8[$0 | 0] > ($3 | 0)) {
          $11 = $8 + $17 | 0;
          $6 = HEAPU16[$11 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           HEAP32[$6 + 1310732 >> 2] = $12;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           break label$9;
          }
          $10 = HEAP16[$11 + -2 >> 1];
          $5 = HEAP16[$11 + 2 >> 1];
          if (($5 | 0) >= 1) {
           if (($10 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + ($10 << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$10;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$10;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$10;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           $11 = HEAP16[$8 + -2 >> 1];
           if (($11 | 0) >= 1) {
            $6 = $5 << 2;
            $5 = $4 + 1179664 | 0;
            $6 = HEAP32[($6 + $5 | 0) + -4 >> 2];
            $11 = HEAP32[($5 + (($11 & 65535) << 2) | 0) + -4 >> 2];
            if (($6 | 0) > ($11 | 0)) {
             HEAP16[$8 >> 1] = $11;
             $10 = 0;
             $5 = $9;
             while (1) {
              if (($10 | 0) >= ($13 | 0)) {
               $6 = $11;
               break label$11;
              }
              if (HEAP32[$5 >> 2] == ($6 | 0)) {
               HEAP32[$5 >> 2] = $11;
              }
              $10 = $10 + 1 | 0;
              $5 = $5 + 4 | 0;
              continue;
             }
            }
            HEAP16[$8 >> 1] = $6;
            $10 = 0;
            $5 = $9;
            if (($6 | 0) >= ($11 | 0)) {
             break label$11;
            }
            while (1) {
             if (($10 | 0) >= ($13 | 0)) {
              break label$11;
             }
             if (($11 | 0) == HEAP32[$5 >> 2]) {
              HEAP32[$5 >> 2] = $6;
             }
             $10 = $10 + 1 | 0;
             $5 = $5 + 4 | 0;
             continue;
            }
           }
           HEAP16[$8 >> 1] = $5;
           $6 = (Math_imul($5, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310720 | 0;
           if (HEAP32[$5 >> 2] > ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          if (($10 | 0) >= 1) {
           HEAP16[$8 >> 1] = $10;
           $6 = (Math_imul($10, 7) << 2) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] < ($7 | 0)) {
            HEAP32[$5 >> 2] = $7;
           }
           HEAP32[$6 + 1310732 >> 2] = $12;
           break label$9;
          }
          $6 = HEAPU16[$8 + -2 >> 1];
          $5 = $6 << 16 >> 16;
          if (($5 | 0) >= 1) {
           HEAP16[$8 >> 1] = $5;
           $6 = Math_imul($6, 28) + $4 | 0;
           $5 = $6 + 1310708 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
           $5 = $6 + 1310712 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
           $5 = $6 + 1310716 | 0;
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
           $5 = $6 + 1310724 | 0;
           if (HEAP32[$5 >> 2] >= ($7 | 0)) {
            break label$9;
           }
           HEAP32[$5 >> 2] = $7;
           break label$9;
          }
          if (($13 | 0) >= 32768) {
           arLog(3, 1152, 0);
           $13 = -1;
           break label$5;
          }
          $5 = $13 + 1 | 0;
          HEAP16[$8 >> 1] = $5;
          HEAP32[(($13 << 2) + $4 | 0) + 1179664 >> 2] = $5 << 16 >> 16;
          $6 = Math_imul($13, 28) + $4 | 0;
          HEAP32[$6 + 1310740 >> 2] = $7;
          HEAP32[$6 + 1310736 >> 2] = 1;
          HEAP32[$6 + 1310744 >> 2] = $12;
          HEAP32[$6 + 1310748 >> 2] = $7;
          HEAP32[$6 + 1310752 >> 2] = $7;
          HEAP32[$6 + 1310756 >> 2] = $12;
          HEAP32[$6 + 1310760 >> 2] = $12;
          $13 = $5;
          break label$9;
         }
         HEAP16[$8 >> 1] = 0;
         break label$9;
        }
        $8 = $8 + 4 | 0;
        $0 = $0 + 2 | 0;
        $12 = $12 + 1 | 0;
        continue label$6;
       }
       $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
       $5 = $6 + 1310708 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       $5 = $6 + 1310712 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
       $5 = $6 + 1310716 | 0;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
       break label$9;
      }
      $6 = Math_imul($6 << 16 >> 16, 28) + $4 | 0;
      HEAP32[$6 + 1310732 >> 2] = $12;
      $5 = $6 + 1310708 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
      $5 = $6 + 1310712 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $7;
      $5 = $6 + 1310716 | 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $12;
     }
     $8 = $8 + 2 | 0;
     $0 = $0 + 1 | 0;
     $7 = $7 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $5 = 1;
  $8 = 1;
  while (1) {
   if (($5 | 0) <= ($13 | 0)) {
    $0 = HEAP32[$9 >> 2];
    label$37 : {
     if (($0 | 0) == ($5 | 0)) {
      $7 = $8;
      $8 = $7 + 1 | 0;
      break label$37;
     }
     $7 = HEAP32[(($0 << 2) + $4 | 0) + 1179660 >> 2];
    }
    HEAP32[$9 >> 2] = $7;
    $9 = $9 + 4 | 0;
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $9 = $8 + -1 | 0;
  HEAP32[$4 + 8 >> 2] = $9;
  if (!$9) {
   return 0;
  }
  $7 = 0;
  memset($4 + 12 | 0, 0, $9 << 2);
  memset($4 + 655376 | 0, 0, $9 << 4);
  $3 = $4 + 131084 | 0;
  $5 = 0;
  while (1) if (($5 | 0) >= ($9 | 0)) {
   while (1) {
    if (($7 | 0) >= ($13 | 0)) {
     $2 = HEAP32[$4 + 8 >> 2];
     $13 = 0;
     $3 = $4 + 655376 | 0;
     $5 = 0;
     while (1) {
      if (($5 | 0) >= ($2 | 0)) {
       break label$5;
      }
      $1 = $5 << 4;
      $0 = $1 + $3 | 0;
      $16 = +HEAP32[(($5 << 2) + $4 | 0) + 12 >> 2];
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $16;
      $0 = $3 + ($1 | 8) | 0;
      HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $16;
      $5 = $5 + 1 | 0;
      continue;
     }
    }
    $3 = HEAP32[(($7 << 2) + $4 | 0) + 1179664 >> 2] + -1 | 0;
    $2 = $3 << 2;
    $0 = $2 + $4 | 0;
    $9 = (Math_imul($7, 7) << 2) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + HEAP32[$9 + 1310736 >> 2];
    $1 = HEAP32[$9 + 1310740 >> 2];
    $3 = ($3 << 4) + $4 | 0;
    $0 = $3 + 655384 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +HEAP32[$9 + 1310744 >> 2];
    $0 = $3 + 655376 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($1 | 0);
    $1 = $3 + 131084 | 0;
    $0 = HEAP32[$9 + 1310748 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $2 = $2 << 2;
    $1 = (($2 | 4) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310752 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 8) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310756 >> 2];
    if (HEAP32[$1 >> 2] > ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $1 = (($2 | 12) + $4 | 0) + 131084 | 0;
    $0 = HEAP32[$9 + 1310760 >> 2];
    if (HEAP32[$1 >> 2] < ($0 | 0)) {
     HEAP32[$1 >> 2] = $0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
  } else {
   $0 = $5 << 4;
   HEAP32[$0 + $3 >> 2] = $1;
   HEAP32[$3 + ($0 | 4) >> 2] = 0;
   HEAP32[$3 + ($0 | 8) >> 2] = $2;
   HEAP32[$3 + ($0 | 12) >> 2] = 0;
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $13;
}
function hexfloat($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $5 = global$0 - 432 | 0;
 global$0 = $5;
 $6 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  if ($6 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $6 + 1;
   $7 = HEAPU8[$6 | 0];
   break label$1;
  }
  $7 = __shgetc($1);
 }
 label$3 : {
  label$4 : {
   while (1) {
    label$6 : {
     if (($7 | 0) != 48) {
      if (($7 | 0) != 46) {
       break label$3;
      }
      $6 = HEAP32[$1 + 4 >> 2];
      if ($6 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$6;
      }
      HEAP32[$1 + 4 >> 2] = $6 + 1;
      $7 = HEAPU8[$6 | 0];
      break label$4;
     }
     $6 = HEAP32[$1 + 4 >> 2];
     if ($6 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $20 = 1;
      HEAP32[$1 + 4 >> 2] = $6 + 1;
      $7 = HEAPU8[$6 | 0];
      continue;
     }
     $7 = __shgetc($1);
     $20 = 1;
     continue;
    }
    break;
   }
   $7 = __shgetc($1);
  }
  $21 = 1;
  if (($7 | 0) != 48) {
   break label$3;
  }
  while (1) {
   $6 = HEAP32[$1 + 4 >> 2];
   label$10 : {
    if ($6 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $6 + 1;
     $7 = HEAPU8[$6 | 0];
     break label$10;
    }
    $7 = __shgetc($1);
   }
   $9 = $9 + -1 | 0;
   $6 = $14 + -1 | 0;
   if ($6 >>> 0 < 4294967295) {
    $9 = $9 + 1 | 0;
   }
   $14 = $6;
   if (($7 | 0) == 48) {
    continue;
   }
   break;
  }
  $20 = 1;
 }
 $6 = 1073676288;
 while (1) {
  label$13 : {
   $22 = $7 | 32;
   label$14 : {
    label$15 : {
     $23 = $7 + -48 | 0;
     if ($23 >>> 0 < 10) {
      break label$15;
     }
     if ($22 + -97 >>> 0 > 5 ? ($7 | 0) != 46 : 0) {
      break label$13;
     }
     if (($7 | 0) != 46) {
      break label$15;
     }
     if ($21) {
      break label$13;
     }
     $21 = 1;
     $14 = $12;
     $9 = $8;
     break label$14;
    }
    $7 = ($7 | 0) > 57 ? $22 + -87 | 0 : $23;
    label$16 : {
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $12 >>> 0 > 7 ? 0 : 1 : 0) {
      $15 = $7 + ($15 << 4) | 0;
      break label$16;
     }
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $12 >>> 0 > 28 ? 0 : 1 : 0) {
      __multf3($5 + 32 | 0, $18, $19, $13, $6, 0, 0, 0, 1073414144);
      __floatsitf($5 + 48 | 0, $7);
      $18 = HEAP32[$5 + 32 >> 2];
      $19 = HEAP32[$5 + 36 >> 2];
      $13 = HEAP32[$5 + 40 >> 2];
      $6 = HEAP32[$5 + 44 >> 2];
      __multf3($5 + 16 | 0, $18, $19, $13, $6, HEAP32[$5 + 48 >> 2], HEAP32[$5 + 52 >> 2], HEAP32[$5 + 56 >> 2], HEAP32[$5 + 60 >> 2]);
      __addtf3($5, $10, $11, $16, $17, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 28 >> 2]);
      $16 = HEAP32[$5 + 8 >> 2];
      $17 = HEAP32[$5 + 12 >> 2];
      $10 = HEAP32[$5 >> 2];
      $11 = HEAP32[$5 + 4 >> 2];
      break label$16;
     }
     if (!$7 | $26) {
      break label$16;
     }
     __multf3($5 + 80 | 0, $18, $19, $13, $6, 0, 0, 0, 1073610752);
     __addtf3($5 - -64 | 0, $10, $11, $16, $17, HEAP32[$5 + 80 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 92 >> 2]);
     $16 = HEAP32[$5 + 72 >> 2];
     $17 = HEAP32[$5 + 76 >> 2];
     $26 = 1;
     $10 = HEAP32[$5 + 64 >> 2];
     $11 = HEAP32[$5 + 68 >> 2];
    }
    $12 = $12 + 1 | 0;
    if ($12 >>> 0 < 1) {
     $8 = $8 + 1 | 0;
    }
    $20 = 1;
   }
   $7 = HEAP32[$1 + 4 >> 2];
   if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = $7 + 1;
    $7 = HEAPU8[$7 | 0];
    continue;
   }
   $7 = __shgetc($1);
   continue;
  }
  break;
 }
 label$20 : {
  if (!$20) {
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
   }
   __shlim($1, 0, 0);
   __extenddftf2($5 + 96 | 0, +($4 | 0) * 0);
   $10 = HEAP32[$5 + 96 >> 2];
   $11 = HEAP32[$5 + 100 >> 2];
   $2 = HEAP32[$5 + 104 >> 2];
   $1 = HEAP32[$5 + 108 >> 2];
   break label$20;
  }
  if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $12 >>> 0 > 7 ? 0 : 1 : 0) {
   $13 = $12;
   $6 = $8;
   while (1) {
    $15 = $15 << 4;
    $13 = $13 + 1 | 0;
    if ($13 >>> 0 < 1) {
     $6 = $6 + 1 | 0;
    }
    if (($13 | 0) != 8 | $6) {
     continue;
    }
    break;
   }
  }
  label$25 : {
   if (($7 | 32) == 112) {
    $13 = scanexp($1);
    $7 = i64toi32_i32$HIGH_BITS;
    $6 = $7;
    if ($13 | ($6 | 0) != -2147483648) {
     break label$25;
    }
    $10 = 0;
    $11 = 0;
    __shlim($1, 0, 0);
    $2 = 0;
    $1 = 0;
    break label$20;
   }
   $13 = 0;
   $6 = 0;
   if (!HEAP32[$1 + 104 >> 2]) {
    break label$25;
   }
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
  }
  if (!$15) {
   __extenddftf2($5 + 112 | 0, +($4 | 0) * 0);
   $10 = HEAP32[$5 + 112 >> 2];
   $11 = HEAP32[$5 + 116 >> 2];
   $2 = HEAP32[$5 + 120 >> 2];
   $1 = HEAP32[$5 + 124 >> 2];
   break label$20;
  }
  $1 = $21 ? $9 : $8;
  $8 = $21 ? $14 : $12;
  $9 = $1 << 2 | $8 >>> 30;
  $1 = $13 + ($8 << 2) | 0;
  $8 = $6 + $9 | 0;
  $8 = $1 >>> 0 < $13 >>> 0 ? $8 + 1 | 0 : $8;
  $1 = $1 + -32 | 0;
  $6 = $8 + -1 | 0;
  $6 = $1 >>> 0 < 4294967264 ? $6 + 1 | 0 : $6;
  $12 = $1;
  $1 = 0 - $3 | 0;
  $7 = $12 >>> 0 <= $1 >>> 0 ? 0 : 1;
  $8 = $6;
  $1 = $1 >> 31;
  if (($6 | 0) > ($1 | 0) ? 1 : ($6 | 0) >= ($1 | 0) ? $7 : 0) {
   __floatsitf($5 + 160 | 0, $4);
   __multf3($5 + 144 | 0, HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2], HEAP32[$5 + 168 >> 2], HEAP32[$5 + 172 >> 2], -1, -1, -1, 2147418111);
   __multf3($5 + 128 | 0, HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2], HEAP32[$5 + 152 >> 2], HEAP32[$5 + 156 >> 2], -1, -1, -1, 2147418111);
   HEAP32[8356] = 68;
   $10 = HEAP32[$5 + 128 >> 2];
   $11 = HEAP32[$5 + 132 >> 2];
   $2 = HEAP32[$5 + 136 >> 2];
   $1 = HEAP32[$5 + 140 >> 2];
   break label$20;
  }
  $1 = $3 + -226 | 0;
  $6 = $12 >>> 0 < $1 >>> 0 ? 0 : 1;
  $1 = $1 >> 31;
  if (($8 | 0) > ($1 | 0) ? 1 : ($8 | 0) >= ($1 | 0) ? $6 : 0) {
   if (($15 | 0) > -1) {
    while (1) {
     __addtf3($5 + 416 | 0, $10, $11, $16, $17, 0, 0, 0, -1073807360);
     $7 = __getf2($10, $11, $16, $17);
     $6 = ($7 | 0) < 0;
     $1 = $6;
     __addtf3($5 + 400 | 0, $10, $11, $16, $17, $1 ? $10 : HEAP32[$5 + 416 >> 2], $1 ? $11 : HEAP32[$5 + 420 >> 2], $1 ? $16 : HEAP32[$5 + 424 >> 2], $1 ? $17 : HEAP32[$5 + 428 >> 2]);
     $8 = $8 + -1 | 0;
     $1 = $12 + -1 | 0;
     if ($1 >>> 0 < 4294967295) {
      $8 = $8 + 1 | 0;
     }
     $12 = $1;
     $16 = HEAP32[$5 + 408 >> 2];
     $17 = HEAP32[$5 + 412 >> 2];
     $10 = HEAP32[$5 + 400 >> 2];
     $11 = HEAP32[$5 + 404 >> 2];
     $15 = $15 << 1 | ($7 | 0) > -1;
     if (($15 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   $6 = $12;
   $1 = $3;
   $14 = ($6 - $1 | 0) + 32 | 0;
   $9 = $8 - (($1 >> 31) + ($6 >>> 0 < $1 >>> 0) | 0) | 0;
   $3 = $14;
   $1 = $3;
   $6 = ($1 | 0) > 0 ? $1 : 0;
   $7 = $2;
   $9 = $1 >>> 0 < 32 ? $9 + 1 | 0 : $9;
   $1 = $7 >> 31;
   $1 = (($9 | 0) < ($1 | 0) ? 1 : ($9 | 0) <= ($1 | 0) ? $3 >>> 0 >= $7 >>> 0 ? 0 : 1 : 0) ? $6 : $7;
   label$32 : {
    if (($1 | 0) >= 113) {
     __floatsitf($5 + 384 | 0, $4);
     $14 = HEAP32[$5 + 392 >> 2];
     $9 = HEAP32[$5 + 396 >> 2];
     $18 = HEAP32[$5 + 384 >> 2];
     $19 = HEAP32[$5 + 388 >> 2];
     $3 = 0;
     $2 = 0;
     break label$32;
    }
    __floatsitf($5 + 336 | 0, $4);
    __extenddftf2($5 + 352 | 0, scalbn(1, 144 - $1 | 0));
    $18 = HEAP32[$5 + 336 >> 2];
    $19 = HEAP32[$5 + 340 >> 2];
    $14 = HEAP32[$5 + 344 >> 2];
    $9 = HEAP32[$5 + 348 >> 2];
    copysignl($5 + 368 | 0, HEAP32[$5 + 352 >> 2], HEAP32[$5 + 356 >> 2], HEAP32[$5 + 360 >> 2], HEAP32[$5 + 364 >> 2], $18, $19, $14, $9);
    $24 = HEAP32[$5 + 376 >> 2];
    $25 = HEAP32[$5 + 380 >> 2];
    $3 = HEAP32[$5 + 368 >> 2];
    $2 = HEAP32[$5 + 372 >> 2];
   }
   $4 = $5 + 320 | 0;
   $1 = !($15 & 1) & ((__letf2($10, $11, $16, $17, 0, 0, 0, 0) | 0) != 0 & ($1 | 0) < 32);
   __floatunsitf($4, $1 + $15 | 0);
   __multf3($5 + 304 | 0, $18, $19, $14, $9, HEAP32[$5 + 320 >> 2], HEAP32[$5 + 324 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2]);
   __multf3($5 + 288 | 0, $1 ? 0 : $10, $1 ? 0 : $11, $1 ? 0 : $16, $1 ? 0 : $17, $18, $19, $14, $9);
   __addtf3($5 + 272 | 0, HEAP32[$5 + 304 >> 2], HEAP32[$5 + 308 >> 2], HEAP32[$5 + 312 >> 2], HEAP32[$5 + 316 >> 2], $3, $2, $24, $25);
   __addtf3($5 + 256 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 292 >> 2], HEAP32[$5 + 296 >> 2], HEAP32[$5 + 300 >> 2], HEAP32[$5 + 272 >> 2], HEAP32[$5 + 276 >> 2], HEAP32[$5 + 280 >> 2], HEAP32[$5 + 284 >> 2]);
   __subtf3($5 + 240 | 0, HEAP32[$5 + 256 >> 2], HEAP32[$5 + 260 >> 2], HEAP32[$5 + 264 >> 2], HEAP32[$5 + 268 >> 2], $3, $2, $24, $25);
   $4 = HEAP32[$5 + 240 >> 2];
   $3 = HEAP32[$5 + 244 >> 2];
   $2 = HEAP32[$5 + 248 >> 2];
   $1 = HEAP32[$5 + 252 >> 2];
   if (!__letf2($4, $3, $2, $1, 0, 0, 0, 0)) {
    HEAP32[8356] = 68;
   }
   scalbnl($5 + 224 | 0, $4, $3, $2, $1, $12);
   $10 = HEAP32[$5 + 224 >> 2];
   $11 = HEAP32[$5 + 228 >> 2];
   $2 = HEAP32[$5 + 232 >> 2];
   $1 = HEAP32[$5 + 236 >> 2];
   break label$20;
  }
  __floatsitf($5 + 208 | 0, $4);
  __multf3($5 + 192 | 0, HEAP32[$5 + 208 >> 2], HEAP32[$5 + 212 >> 2], HEAP32[$5 + 216 >> 2], HEAP32[$5 + 220 >> 2], 0, 0, 0, 65536);
  __multf3($5 + 176 | 0, HEAP32[$5 + 192 >> 2], HEAP32[$5 + 196 >> 2], HEAP32[$5 + 200 >> 2], HEAP32[$5 + 204 >> 2], 0, 0, 0, 65536);
  HEAP32[8356] = 68;
  $10 = HEAP32[$5 + 176 >> 2];
  $11 = HEAP32[$5 + 180 >> 2];
  $2 = HEAP32[$5 + 184 >> 2];
  $1 = HEAP32[$5 + 188 >> 2];
 }
 HEAP32[$0 >> 2] = $10;
 HEAP32[$0 + 4 >> 2] = $11;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 global$0 = $5 + 432 | 0;
}
function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = $0 + $1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 + 4 >> 2];
    if ($2 & 1) {
     break label$3;
    }
    if (!($2 & 3)) {
     break label$2;
    }
    $4 = HEAP32[$0 >> 2];
    $0 = $0 - $4 | 0;
    $7 = HEAP32[8384];
    if ($0 >>> 0 < $7 >>> 0) {
     break label$1;
    }
    $1 = $1 + $4 | 0;
    if (HEAP32[8385] != ($0 | 0)) {
     if ($4 >>> 0 <= 255) {
      $2 = HEAP32[$0 + 12 >> 2];
      $3 = HEAP32[$0 + 8 >> 2];
      $4 = $4 >>> 3;
      $6 = ($4 << 3) + 33560 | 0;
      if (HEAP32[$3 + 12 >> 2] != ($0 | 0) | $7 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($6 | 0) : 0) {
       break label$1;
      }
      if (($2 | 0) == ($3 | 0)) {
       wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      if (HEAP32[$2 + 8 >> 2] != ($0 | 0) | $7 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($6 | 0) : 0) {
       break label$1;
      }
      HEAP32[$3 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $3;
      break label$3;
     }
     $8 = HEAP32[$0 + 24 >> 2];
     $2 = HEAP32[$0 + 12 >> 2];
     label$9 : {
      if (($2 | 0) != ($0 | 0)) {
       $3 = HEAP32[$0 + 8 >> 2];
       if ($7 >>> 0 > $3 >>> 0 | HEAP32[$3 + 12 >> 2] != ($0 | 0) | HEAP32[$2 + 8 >> 2] != ($0 | 0)) {
        break label$1;
       }
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$9;
      }
      label$11 : {
       $3 = $0 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$11;
       }
       $3 = $0 + 16 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$11;
       }
       $2 = 0;
       break label$9;
      }
      while (1) {
       $6 = $3;
       $2 = $4;
       $3 = $2 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        continue;
       }
       $3 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      if ($7 >>> 0 > $6 >>> 0) {
       break label$1;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$8) {
      break label$3;
     }
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = ($3 << 2) + 33824 | 0;
     label$13 : {
      if (HEAP32[$4 >> 2] == ($0 | 0)) {
       HEAP32[$4 >> 2] = $2;
       if ($2) {
        break label$13;
       }
       wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      if (HEAPU32[8384] > $8 >>> 0) {
       break label$1;
      }
      HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     $4 = HEAP32[8384];
     if ($4 >>> 0 > $2 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 24 >> 2] = $8;
     $3 = HEAP32[$0 + 16 >> 2];
     if ($3) {
      if ($4 >>> 0 > $3 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 16 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $3 = HEAP32[$0 + 20 >> 2];
     if (!$3) {
      break label$3;
     }
     if (HEAPU32[8384] > $3 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 20 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2;
     break label$3;
    }
    $2 = HEAP32[$5 + 4 >> 2];
    if (($2 & 3) != 3) {
     break label$3;
    }
    HEAP32[8382] = $1;
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$5 >> 2] = $1;
    return;
   }
   $7 = HEAP32[8384];
   if ($5 >>> 0 < $7 >>> 0) {
    break label$1;
   }
   $9 = HEAP32[$5 + 4 >> 2];
   label$16 : {
    if (!($9 & 2)) {
     if (HEAP32[8386] == ($5 | 0)) {
      HEAP32[8386] = $0;
      $1 = HEAP32[8383] + $1 | 0;
      HEAP32[8383] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      if (HEAP32[8385] != ($0 | 0)) {
       break label$2;
      }
      HEAP32[8382] = 0;
      HEAP32[8385] = 0;
      return;
     }
     if (HEAP32[8385] == ($5 | 0)) {
      HEAP32[8385] = $0;
      $1 = HEAP32[8382] + $1 | 0;
      HEAP32[8382] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + $1 >> 2] = $1;
      return;
     }
     label$20 : {
      if ($9 >>> 0 <= 255) {
       $2 = HEAP32[$5 + 12 >> 2];
       $3 = HEAP32[$5 + 8 >> 2];
       $4 = $9 >>> 3;
       $6 = ($4 << 3) + 33560 | 0;
       if (HEAP32[$3 + 12 >> 2] != ($5 | 0) | $7 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($6 | 0) : 0) {
        break label$1;
       }
       if (($2 | 0) == ($3 | 0)) {
        wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       if (HEAP32[$2 + 8 >> 2] != ($5 | 0) | $7 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($6 | 0) : 0) {
        break label$1;
       }
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$20;
      }
      $8 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$25 : {
       if (($5 | 0) != ($2 | 0)) {
        $3 = HEAP32[$5 + 8 >> 2];
        if ($7 >>> 0 > $3 >>> 0 | HEAP32[$3 + 12 >> 2] != ($5 | 0) | HEAP32[$2 + 8 >> 2] != ($5 | 0)) {
         break label$1;
        }
        HEAP32[$3 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $3;
        break label$25;
       }
       label$27 : {
        $3 = $5 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$27;
        }
        $3 = $5 + 16 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$25;
       }
       while (1) {
        $6 = $3;
        $2 = $4;
        $3 = $2 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         continue;
        }
        $3 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       if ($7 >>> 0 > $6 >>> 0) {
        break label$1;
       }
       HEAP32[$6 >> 2] = 0;
      }
      if (!$8) {
       break label$20;
      }
      $3 = HEAP32[$5 + 28 >> 2];
      $4 = ($3 << 2) + 33824 | 0;
      label$29 : {
       if (HEAP32[$4 >> 2] == ($5 | 0)) {
        HEAP32[$4 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       if (HEAPU32[8384] > $8 >>> 0) {
        break label$1;
       }
       HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$20;
       }
      }
      $4 = HEAP32[8384];
      if ($4 >>> 0 > $2 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 24 >> 2] = $8;
      $3 = HEAP32[$5 + 16 >> 2];
      if ($3) {
       if ($4 >>> 0 > $3 >>> 0) {
        break label$1;
       }
       HEAP32[$2 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2;
      }
      $3 = HEAP32[$5 + 20 >> 2];
      if (!$3) {
       break label$20;
      }
      if (HEAPU32[8384] > $3 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $1 = ($9 & -8) + $1 | 0;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     if (HEAP32[8385] != ($0 | 0)) {
      break label$16;
     }
     HEAP32[8382] = $1;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $9 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
   }
   if ($1 >>> 0 <= 255) {
    $2 = $1 >>> 3;
    $1 = ($2 << 3) + 33560 | 0;
    $3 = HEAP32[8380];
    $2 = 1 << $2;
    label$33 : {
     if (!($3 & $2)) {
      HEAP32[8380] = $2 | $3;
      $3 = $1;
      break label$33;
     }
     $3 = HEAP32[$1 + 8 >> 2];
     if (HEAPU32[8384] > $3 >>> 0) {
      break label$1;
     }
    }
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $1;
    HEAP32[$0 + 8 >> 2] = $3;
    return;
   }
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $3 = $0;
   $4 = $1 >>> 8;
   $2 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $2 = 31;
    if ($1 >>> 0 > 16777215) {
     break label$35;
    }
    $6 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $6;
    $2 = $4 + 520192 >>> 16 & 4;
    $5 = $4 << $2;
    $4 = $5 + 245760 >>> 16 & 2;
    $2 = ($5 << $4 >>> 15) - ($4 | ($2 | $6)) | 0;
    $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $2;
   $4 = ($2 << 2) + 33824 | 0;
   label$36 : {
    $3 = HEAP32[8381];
    $6 = 1 << $2;
    label$37 : {
     if (!($3 & $6)) {
      HEAP32[8381] = $3 | $6;
      HEAP32[$4 >> 2] = $0;
      break label$37;
     }
     $3 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1) | 0);
     $2 = HEAP32[$4 >> 2];
     while (1) {
      $4 = $2;
      if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
       break label$36;
      }
      $2 = $3 >>> 29;
      $3 = $3 << 1;
      $6 = ($4 + ($2 & 4) | 0) + 16 | 0;
      $2 = HEAP32[$6 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     if (HEAPU32[8384] > $6 >>> 0) {
      break label$1;
     }
     HEAP32[$6 >> 2] = $0;
    }
    HEAP32[$0 + 24 >> 2] = $4;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    return;
   }
   $2 = HEAP32[8384];
   $1 = HEAP32[$4 + 8 >> 2];
   if ($2 >>> 0 > $1 >>> 0 | $2 >>> 0 > $4 >>> 0) {
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
  }
  return;
 }
 abort();
 abort();
}
function decode_bch($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $5 = global$0 - 3792 | 0;
 global$0 = $5;
 memcpy($5 + 3664 | 0, 5856, 60);
 memcpy($5 + 3600 | 0, 5920, 64);
 memcpy($5 + 3472 | 0, 5984, 124);
 memcpy($5 + 3344 | 0, 6112, 128);
 memcpy($5 + 2832 | 0, 6240, 508);
 memcpy($5 + 2320 | 0, 6752, 512);
 $15 = 1;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         $7 = $0 + -1028 | 0;
         if ($7 >>> 0 > 1) {
          if (($0 | 0) != 772) {
           break label$8;
          }
          $18 = 9;
          break label$6;
         }
         $18 = 12;
         $15 = 2;
         if ($7 - 1) {
          break label$7;
         }
         break label$4;
        }
        if (($0 | 0) == 1285) {
         break label$5;
        }
        $8 = -1;
        if (($0 | 0) != 2830) {
         break label$1;
        }
        $18 = 64;
        $16 = 120;
        $11 = 127;
        $15 = 9;
        $12 = $5 + 2320 | 0;
        $13 = $5 + 2832 | 0;
        break label$2;
       }
       $18 = 5;
      }
      $16 = 13;
      $12 = $5 + 3600 | 0;
      $13 = $5 + 3664 | 0;
      $11 = 15;
      break label$3;
     }
     $18 = 7;
     $15 = 3;
    }
    $16 = 22;
    $12 = $5 + 3344 | 0;
    $13 = $5 + 3472 | 0;
    $11 = 31;
   }
   $0 = 0;
   while (1) {
    if (($0 | 0) == ($16 | 0)) {
     $3 = $5 + 3728 | 0;
    } else {
     HEAP8[($5 + 3728 | 0) + $0 | 0] = $1 & 1;
     $0 = $0 + 1 | 0;
     $1 = ($2 & 1) << 31 | $1 >>> 1;
     $2 = $2 >>> 1;
     continue;
    }
    break;
   }
  }
  $19 = $15 << 1;
  $6 = $19 | 1;
  $2 = 1;
  while (1) {
   label$14 : {
    if (($2 | 0) != ($6 | 0)) {
     $7 = 0;
     $1 = ($5 + 560 | 0) + ($2 << 2) | 0;
     HEAP32[$1 >> 2] = 0;
     $0 = 0;
     while (1) {
      if (($0 | 0) == ($16 | 0)) {
       break label$14;
      }
      if (HEAPU8[$0 + $3 | 0]) {
       $7 = HEAP32[((Math_imul($0, $2) >>> 0) % ($11 >>> 0) << 2) + $13 >> 2] ^ $7;
       HEAP32[$1 >> 2] = $7;
      }
      $0 = $0 + 1 | 0;
      continue;
     }
    }
    label$18 : {
     if (!$21) {
      break label$18;
     }
     HEAP32[$5 + 800 >> 2] = 0;
     $6 = HEAP32[$5 + 564 >> 2];
     HEAP32[$5 + 804 >> 2] = $6;
     HEAP32[$5 + 952 >> 2] = 1;
     HEAP32[$5 + 880 >> 2] = 0;
     $0 = 1;
     while (1) {
      if (($0 | 0) != ($19 | 0)) {
       $1 = ($5 + 880 | 0) + ($0 << 2) | 0;
       HEAP32[$1 >> 2] = -1;
       HEAP32[$1 + 72 >> 2] = 0;
       $0 = $0 + 1 | 0;
       continue;
      }
      break;
     }
     HEAP32[$5 + 720 >> 2] = 0;
     HEAP32[$5 + 724 >> 2] = 0;
     HEAP32[$5 + 640 >> 2] = -1;
     HEAP32[$5 + 644 >> 2] = 0;
     $25 = $19 + -1 | 0;
     $2 = 0;
     $1 = 0;
     while (1) {
      $14 = $1 + 1 | 0;
      $7 = $1;
      label$22 : {
       if (($6 | 0) == -1) {
        $7 = $1 + 2 | 0;
        HEAP32[($5 + 720 | 0) + ($7 << 2) >> 2] = $2;
        $0 = 0;
        while (1) {
         if (($0 | 0) > ($2 | 0)) {
          break label$22;
         }
         $9 = $0 << 2;
         $10 = $9 + (($5 + 880 | 0) + Math_imul($14, 72) | 0) | 0;
         $6 = HEAP32[$10 >> 2];
         HEAP32[$9 + (($5 + 880 | 0) + Math_imul($7, 72) | 0) >> 2] = $6;
         HEAP32[$10 >> 2] = HEAP32[($6 << 2) + $12 >> 2];
         $0 = $0 + 1 | 0;
         continue;
        }
       }
       while (1) {
        $0 = $7;
        $10 = ($0 | 0) < 1;
        if (!$10) {
         $7 = $0 + -1 | 0;
         if (HEAP32[($5 + 800 | 0) + ($0 << 2) >> 2] == -1) {
          continue;
         }
        }
        break;
       }
       $9 = $0;
       if (!$10) {
        while (1) {
         $0 = $0 + -1 | 0;
         $7 = $0 << 2;
         if (HEAP32[$7 + ($5 + 800 | 0) >> 2] != -1) {
          $9 = HEAP32[($5 + 640 | 0) + ($9 << 2) >> 2] < HEAP32[$7 + ($5 + 640 | 0) >> 2] ? $0 : $9;
         }
         if (($0 | 0) > 0) {
          continue;
         }
         break;
        }
       }
       $7 = $1 + 2 | 0;
       $23 = $14 - $9 | 0;
       $8 = $9 << 2;
       $17 = $8 + ($5 + 720 | 0) | 0;
       $0 = $23 + HEAP32[$17 >> 2] | 0;
       $10 = ($2 | 0) > ($0 | 0) ? $2 : $0;
       HEAP32[($5 + 720 | 0) + ($7 << 2) >> 2] = $10;
       $0 = 0;
       while (1) {
        if (($0 | 0) == ($19 | 0)) {
         $6 = $6 + $11 | 0;
         $26 = $8 + ($5 + 800 | 0) | 0;
         $17 = HEAP32[$17 >> 2];
         $8 = 0;
         $0 = 0;
         while (1) {
          if (($0 | 0) <= ($17 | 0)) {
           $24 = HEAP32[(($5 + 880 | 0) + Math_imul($9, 72) | 0) + ($0 << 2) >> 2];
           if (($24 | 0) != -1) {
            HEAP32[(($5 + 880 | 0) + Math_imul($7, 72) | 0) + ($0 + $23 << 2) >> 2] = HEAP32[((($6 + $24 | 0) - HEAP32[$26 >> 2] | 0) % ($11 | 0) << 2) + $13 >> 2];
           }
           $0 = $0 + 1 | 0;
           continue;
          }
          break;
         }
         while (1) {
          if (($8 | 0) <= ($2 | 0)) {
           $0 = $8 << 2;
           $6 = $0 + (($5 + 880 | 0) + Math_imul($7, 72) | 0) | 0;
           $9 = $6;
           $17 = HEAP32[$6 >> 2];
           $0 = $0 + (($5 + 880 | 0) + Math_imul($14, 72) | 0) | 0;
           $6 = HEAP32[$0 >> 2];
           HEAP32[$9 >> 2] = $17 ^ $6;
           HEAP32[$0 >> 2] = HEAP32[($6 << 2) + $12 >> 2];
           $8 = $8 + 1 | 0;
           continue;
          }
          break;
         }
         $2 = $10;
        } else {
         HEAP32[(($5 + 880 | 0) + Math_imul($7, 72) | 0) + ($0 << 2) >> 2] = 0;
         $0 = $0 + 1 | 0;
         continue;
        }
        break;
       }
      }
      $0 = $7 << 2;
      HEAP32[$0 + ($5 + 640 | 0) >> 2] = $14 - $2;
      if (($1 | 0) != ($25 | 0)) {
       $1 = HEAP32[$0 + ($5 + 560 | 0) >> 2];
       $6 = 0;
       label$39 : {
        if (($1 | 0) == -1) {
         break label$39;
        }
        $6 = HEAP32[($1 << 2) + $13 >> 2];
       }
       $1 = $0 + ($5 + 800 | 0) | 0;
       HEAP32[$1 >> 2] = $6;
       $0 = 1;
       while (1) {
        if (($0 | 0) <= ($2 | 0)) {
         $9 = HEAP32[($5 + 560 | 0) + ($7 - $0 << 2) >> 2];
         label$42 : {
          if (($9 | 0) == -1) {
           break label$42;
          }
          $10 = HEAP32[(($5 + 880 | 0) + Math_imul($7, 72) | 0) + ($0 << 2) >> 2];
          if (!$10) {
           break label$42;
          }
          $6 = HEAP32[(($9 + HEAP32[($10 << 2) + $12 >> 2] | 0) % ($11 | 0) << 2) + $13 >> 2] ^ $6;
          HEAP32[$1 >> 2] = $6;
         }
         $0 = $0 + 1 | 0;
         continue;
        }
        break;
       }
       $6 = HEAP32[($6 << 2) + $12 >> 2];
       HEAP32[$1 >> 2] = $6;
       $1 = $14;
       if (($2 | 0) <= ($15 | 0)) {
        continue;
       }
      }
      break;
     }
     $8 = -1;
     if (($2 | 0) > ($15 | 0)) {
      break label$1;
     }
     $0 = 0;
     $1 = ($5 + 880 | 0) + Math_imul($7, 72) | 0;
     $8 = 1;
     while (1) if (($0 | 0) > ($2 | 0)) {
      $0 = ($5 + 880 | 0) + Math_imul($7, 72) | 0;
      while (1) if (($8 | 0) > ($2 | 0)) {
       $14 = $11 + 1 | 0;
       $6 = 0;
       $1 = 1;
       while (1) {
        $0 = 1;
        $9 = 1;
        if (($1 | 0) != ($14 | 0)) {
         while (1) {
          if (($0 | 0) <= ($2 | 0)) {
           $10 = ($0 << 2) + $5 | 0;
           $8 = HEAP32[$10 >> 2];
           if (($8 | 0) != -1) {
            $12 = $10;
            $10 = ($0 + $8 | 0) % ($11 | 0) | 0;
            HEAP32[$12 >> 2] = $10;
            $9 = HEAP32[($10 << 2) + $13 >> 2] ^ $9;
           }
           $0 = $0 + 1 | 0;
           continue;
          }
          break;
         }
         if (!$9) {
          HEAP32[($5 + 48 | 0) + ($6 << 2) >> 2] = $11 - $1;
          $6 = $6 + 1 | 0;
         }
         $1 = $1 + 1 | 0;
         continue;
        }
        break;
       }
       $8 = -1;
       if (($2 | 0) != ($6 | 0)) {
        break label$1;
       }
       $0 = 0;
       while (1) {
        if (($0 | 0) >= ($2 | 0)) {
         break label$18;
        }
        $1 = HEAP32[($5 + 48 | 0) + ($0 << 2) >> 2] + $3 | 0;
        HEAP8[$1 | 0] = HEAPU8[$1 | 0] ^ 1;
        $0 = $0 + 1 | 0;
        continue;
       }
      } else {
       $1 = $8 << 2;
       HEAP32[$1 + $5 >> 2] = HEAP32[$0 + $1 >> 2];
       $8 = $8 + 1 | 0;
       continue;
      }
     } else {
      $6 = $1 + ($0 << 2) | 0;
      HEAP32[$6 >> 2] = HEAP32[(HEAP32[$6 >> 2] << 2) + $12 >> 2];
      $0 = $0 + 1 | 0;
      continue;
     }
    }
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $0 = $16 - $18 | 0;
    $1 = 1;
    $2 = 0;
    while (1) {
     if (($0 | 0) < ($16 | 0)) {
      $9 = $4;
      $11 = __wasm_i64_mul($1, $2, HEAPU8[$0 + $3 | 0], 0);
      $6 = $20 + i64toi32_i32$HIGH_BITS | 0;
      $20 = $11 + $22 | 0;
      if ($20 >>> 0 < $22 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $22 = $20;
      $20 = $6;
      HEAP32[$9 >> 2] = $22;
      HEAP32[$9 + 4 >> 2] = $6;
      $0 = $0 + 1 | 0;
      $2 = $2 << 1 | $1 >>> 31;
      $1 = $1 << 1;
      continue;
     }
     break;
    }
    if (!$21) {
     $8 = 0;
     break label$1;
    }
    $8 = HEAP32[($5 + 720 | 0) + ($7 << 2) >> 2];
    break label$1;
   }
   HEAP32[$1 >> 2] = HEAP32[($7 << 2) + $12 >> 2];
   $21 = $7 ? 1 : $21;
   $2 = $2 + 1 | 0;
   continue;
  }
 }
 global$0 = $5 + 3792 | 0;
 return $8;
}
function __intscan($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $9 = -1;
 $10 = -1;
 $11 = global$0 - 16 | 0;
 global$0 = $11;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($1 >>> 0 <= 36) {
       while (1) {
        $2 = HEAP32[$0 + 4 >> 2];
        label$8 : {
         if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$8;
         }
         $2 = __shgetc($0);
        }
        if (isspace($2)) {
         continue;
        }
        break;
       }
       $3 = $2 + -43 | 0;
       label$10 : {
        if ($3 >>> 0 > 2 | !($3 - 1)) {
         break label$10;
        }
        $13 = ($2 | 0) == 45 ? -1 : 0;
        $2 = HEAP32[$0 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$10;
        }
        $2 = __shgetc($0);
       }
       label$12 : {
        if (!($1 & -17 | ($2 | 0) != 48)) {
         $2 = HEAP32[$0 + 4 >> 2];
         label$14 : {
          if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break label$14;
          }
          $2 = __shgetc($0);
         }
         if (($2 | 32) == 120) {
          $1 = HEAP32[$0 + 4 >> 2];
          label$17 : {
           if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $1 + 1;
            $2 = HEAPU8[$1 | 0];
            break label$17;
           }
           $2 = __shgetc($0);
          }
          $1 = 16;
          if (HEAPU8[$2 + 15473 | 0] < 16) {
           break label$4;
          }
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
          }
          $9 = 0;
          $10 = 0;
          __shlim($0, 0, 0);
          break label$1;
         }
         if ($1) {
          break label$12;
         }
         $1 = 8;
         break label$4;
        }
        $1 = $1 ? $1 : 10;
        if ($1 >>> 0 > HEAPU8[$2 + 15473 | 0]) {
         break label$12;
        }
        if (HEAP32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
        }
        $9 = 0;
        $10 = 0;
        __shlim($0, 0, 0);
        HEAP32[8356] = 28;
        break label$1;
       }
       if (($1 | 0) != 10) {
        break label$4;
       }
       $3 = $2 + -48 | 0;
       if ($3 >>> 0 <= 9) {
        $1 = 0;
        while (1) {
         $5 = Math_imul($1, 10);
         $1 = HEAP32[$0 + 4 >> 2];
         label$23 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1 + 1;
           $2 = HEAPU8[$1 | 0];
           break label$23;
          }
          $2 = __shgetc($0);
         }
         $1 = $5 + $3 | 0;
         $3 = $2 + -48 | 0;
         if ($1 >>> 0 < 429496729 ? $3 >>> 0 <= 9 : 0) {
          continue;
         }
         break;
        }
        $6 = $1;
        $5 = 0;
       }
       if ($3 >>> 0 > 9) {
        break label$5;
       }
       $8 = __wasm_i64_mul($6, 0, 10, 0);
       $4 = i64toi32_i32$HIGH_BITS;
       $1 = $3;
       while (1) {
        $2 = HEAP32[$0 + 4 >> 2];
        label$26 : {
         if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$26;
         }
         $2 = __shgetc($0);
        }
        $3 = $2 + -48 | 0;
        $7 = $3 >>> 0 > 9;
        $5 = $4;
        $6 = $1 + $8 | 0;
        if ($6 >>> 0 < $1 >>> 0) {
         $5 = $5 + 1 | 0;
        }
        if (($5 | 0) == 429496729 & $6 >>> 0 >= 2576980378 | $5 >>> 0 > 429496729 | $7) {
         break label$5;
        }
        $8 = __wasm_i64_mul($6, $5, 10, 0);
        $4 = i64toi32_i32$HIGH_BITS;
        $1 = $3;
        if (($4 | 0) == -1 & $8 >>> 0 <= ($1 ^ -1) >>> 0 | $4 >>> 0 < 4294967295) {
         continue;
        }
        break;
       }
       $1 = 10;
       break label$3;
      }
      HEAP32[8356] = 28;
      $9 = 0;
      $10 = 0;
      break label$1;
     }
     $1 = 10;
     if ($3 >>> 0 <= 9) {
      break label$3;
     }
     break label$2;
    }
    if ($1 + -1 & $1) {
     $3 = HEAPU8[$2 + 15473 | 0];
     if ($1 >>> 0 > $3 >>> 0) {
      while (1) {
       $4 = Math_imul($1, $4) + $3 | 0;
       $8 = $4 >>> 0 <= 119304646;
       $6 = $1;
       $2 = HEAP32[$0 + 4 >> 2];
       label$31 : {
        if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$31;
        }
        $2 = __shgetc($0);
       }
       $3 = HEAPU8[$2 + 15473 | 0];
       if ($6 >>> 0 > $3 >>> 0 ? $8 : 0) {
        continue;
       }
       break;
      }
      $6 = $4;
     }
     if ($1 >>> 0 <= $3 >>> 0) {
      break label$3;
     }
     $8 = $1;
     while (1) {
      $7 = __wasm_i64_mul($6, $5, $8, 0);
      $4 = i64toi32_i32$HIGH_BITS;
      $3 = $3 & 255;
      if (($4 | 0) == -1 & $7 >>> 0 > ($3 ^ -1) >>> 0 | $4 >>> 0 > 4294967295) {
       break label$3;
      }
      $2 = HEAP32[$0 + 4 >> 2];
      label$34 : {
       if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$34;
       }
       $2 = __shgetc($0);
      }
      $5 = $3 + $7 | 0;
      if ($5 >>> 0 < $3 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $6 = $5;
      $5 = $4;
      $3 = HEAPU8[$2 + 15473 | 0];
      if ($1 >>> 0 <= $3 >>> 0) {
       break label$3;
      }
      __multi3($11, $8, 0, $6, $5);
      if (!(HEAP32[$11 + 8 >> 2] | HEAP32[$11 + 12 >> 2])) {
       continue;
      }
      break;
     }
     break label$3;
    }
    $8 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 15729 | 0];
    $3 = HEAPU8[$2 + 15473 | 0];
    if ($1 >>> 0 > $3 >>> 0) {
     while (1) {
      $4 = $4 << $8 | $3;
      $12 = $4 >>> 0 <= 134217727;
      $6 = $1;
      $2 = HEAP32[$0 + 4 >> 2];
      label$38 : {
       if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$38;
       }
       $2 = __shgetc($0);
      }
      $3 = HEAPU8[$2 + 15473 | 0];
      if ($6 >>> 0 > $3 >>> 0 ? $12 : 0) {
       continue;
      }
      break;
     }
     $6 = $4;
    }
    $4 = $8;
    $7 = $4 & 31;
    if (32 <= ($4 & 63) >>> 0) {
     $4 = 0;
     $12 = -1 >>> $7;
    } else {
     $4 = -1 >>> $7;
     $12 = (1 << $7) - 1 << 32 - $7 | -1 >>> $7;
    }
    $7 = $4;
    if (!$4 & $12 >>> 0 < $6 >>> 0 | $4 >>> 0 < 0 | $1 >>> 0 <= $3 >>> 0) {
     break label$3;
    }
    while (1) {
     $4 = $6;
     $2 = $8;
     $6 = $2 & 31;
     if (32 <= ($2 & 63) >>> 0) {
      $5 = $4 << $6;
      $2 = 0;
     } else {
      $5 = (1 << $6) - 1 & $4 >>> 32 - $6 | $5 << $6;
      $2 = $4 << $6;
     }
     $6 = $2 | $3 & 255;
     $2 = HEAP32[$0 + 4 >> 2];
     label$41 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$41;
      }
      $2 = __shgetc($0);
     }
     if (($5 | 0) == ($7 | 0) & $6 >>> 0 > $12 >>> 0 | $5 >>> 0 > $7 >>> 0) {
      break label$3;
     }
     $3 = HEAPU8[$2 + 15473 | 0];
     if ($1 >>> 0 > $3 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($1 >>> 0 <= HEAPU8[$2 + 15473 | 0]) {
    break label$2;
   }
   while (1) {
    $2 = $1;
    $5 = HEAP32[$0 + 4 >> 2];
    label$44 : {
     if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $5 + 1;
      $4 = HEAPU8[$5 | 0];
      break label$44;
     }
     $4 = __shgetc($0);
    }
    if ($2 >>> 0 > HEAPU8[$4 + 15473 | 0]) {
     continue;
    }
    break;
   }
   HEAP32[8356] = 68;
   $13 = 0;
   $6 = -1;
   $5 = -1;
  }
  if (HEAP32[$0 + 104 >> 2]) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  }
  label$47 : {
   if (($5 | 0) == -1 & $6 >>> 0 < 4294967295 | $5 >>> 0 < 4294967295) {
    break label$47;
   }
   if (!($13 | 1)) {
    HEAP32[8356] = 68;
    $9 = -2;
    break label$1;
   }
   if (($5 | 0) == -1 & $6 >>> 0 <= 4294967295 | $5 >>> 0 < 4294967295) {
    break label$47;
   }
   HEAP32[8356] = 68;
   break label$1;
  }
  $0 = $13;
  $1 = $0 ^ $6;
  $9 = $1 - $0 | 0;
  $2 = $0 >> 31;
  $10 = ($2 ^ $5) - ($2 + ($1 >>> 0 < $0 >>> 0) | 0) | 0;
 }
 global$0 = $11 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $10;
 return $9;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 83)) {
   break label$1;
  }
  $3 = $1;
  $6 = $0;
  label$2 : {
   label$3 : {
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    if ($4 + -97 >>> 0 < 26) {
     $5 = $4 + -97 | 0;
     if ($5 >>> 0 <= 8) {
      break label$3;
     }
     $4 = $4 + -111 | 0;
     if ($4 >>> 0 > 4) {
      break label$1;
     }
     label$5 : {
      switch ($4 - 1 | 0) {
      case 3:
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       HEAP32[$1 + 12 >> 2] = 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
       break label$2;
      case 0:
      case 1:
      case 2:
       break label$1;
      default:
       break label$5;
      }
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 4;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     $0 = $0 + 148 | 0;
     if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($0)) {
      break label$1;
     }
     $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0) >> 2];
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1 + 12 | 0)) {
     break label$1;
    }
    $3 = HEAP32[$1 + 12 >> 2] + 1 | 0;
    HEAP32[$1 + 12 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $0 = $0 + 148 | 0;
    if ($3 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) >>> 0) {
     break label$1;
    }
    $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $3) >> 2];
    break label$1;
   }
   label$8 : {
    switch ($5 - 1 | 0) {
    case 2:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 5;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 7:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 3;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 0:
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 1;
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$2;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
     break label$1;
    default:
     break label$8;
    }
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP32[$1 + 12 >> 2] = 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
  }
  $4 = $3;
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($6, $2);
  HEAP32[$4 + 12 >> 2] = $3;
  if (($3 | 0) == ($2 | 0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $1 + 12 | 0);
  $2 = $3;
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 96 | 0, 20312);
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 36 >> 2] = $2;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 32 | 0), HEAP8[wasm2js_i32$0 + 111 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 97, HEAP8[wasm2js_i32$0 + 95 | 0] = wasm2js_i32$1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 80 | 0, 24192);
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 28 >> 2] = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 72 | 0, 24195);
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 20 >> 2] = $2;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
    break label$1;
   }
  }
  $3 = $0 + 8 | 0;
  $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
  label$3 : {
   while (1) {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$1 + 64 >> 2] = $2;
    if ($2) {
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $1 - -64 | 0);
     continue;
    }
    break;
   }
   $4 = 0;
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 - -64 | 0, $0, $4);
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 60 >> 2] = $2;
  $4 = 0;
  if (!$2) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 24198);
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $5;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 40 >> 2] = $5;
     if (!$5) {
      break label$1;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $1 + 40 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 40 | 0, $0, $2);
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $1 + 40 | 0, $1 + 111 | 0, $1 + 95 | 0);
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 40 | 0), $1 + 111 | 0, $1 + 95 | 0);
 }
 global$0 = $1 + 112 | 0;
 return $4;
}
function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $11 = global$0 - 112 | 0;
 global$0 = $11;
 $12 = $7;
 $13 = $8 & 2147483647;
 $10 = $2 + -1 | 0;
 $9 = $1 + -1 | 0;
 if ($9 >>> 0 < 4294967295) {
  $10 = $10 + 1 | 0;
 }
 $14 = $9;
 $17 = ($9 | 0) == -1 & ($10 | 0) == -1;
 $15 = $4 & 2147483647;
 $9 = $15;
 $16 = $3;
 $10 = ($2 | 0) == ($10 | 0) & $14 >>> 0 < $1 >>> 0 | $10 >>> 0 < $2 >>> 0;
 $14 = $3 + $10 | 0;
 if ($14 >>> 0 < $10 >>> 0) {
  $9 = $9 + 1 | 0;
 }
 $10 = $14 + -1 | 0;
 $9 = $9 + -1 | 0;
 $9 = $10 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
 label$1 : {
  label$2 : {
   if (!(($10 | 0) == -1 & ($9 | 0) == 2147418111 ? $17 : ($9 | 0) == 2147418111 & $10 >>> 0 > 4294967295 | $9 >>> 0 > 2147418111)) {
    $10 = $6 + -1 | 0;
    $9 = $5 + -1 | 0;
    if ($9 >>> 0 < 4294967295) {
     $10 = $10 + 1 | 0;
    }
    $14 = $9;
    $17 = ($9 | 0) != -1 | ($10 | 0) != -1;
    $9 = $13;
    $10 = ($6 | 0) == ($10 | 0) & $14 >>> 0 < $5 >>> 0 | $10 >>> 0 < $6 >>> 0;
    $14 = $10 + $12 | 0;
    if ($14 >>> 0 < $10 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $10 = $14 + -1 | 0;
    $9 = $9 + -1 | 0;
    $9 = $10 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
    if (($10 | 0) == -1 & ($9 | 0) == 2147418111 ? $17 : ($9 | 0) == 2147418111 & $10 >>> 0 < 4294967295 | $9 >>> 0 < 2147418111) {
     break label$2;
    }
   }
   if (!(!$16 & ($15 | 0) == 2147418112 ? !($1 | $2) : ($15 | 0) == 2147418112 & $16 >>> 0 < 0 | $15 >>> 0 < 2147418112)) {
    $7 = $3;
    $8 = $4 | 32768;
    $5 = $1;
    $6 = $2;
    break label$1;
   }
   if (!(!$12 & ($13 | 0) == 2147418112 ? !($5 | $6) : ($13 | 0) == 2147418112 & $12 >>> 0 < 0 | $13 >>> 0 < 2147418112)) {
    $8 = $8 | 32768;
    break label$1;
   }
   if (!($1 | $16 | ($15 ^ 2147418112 | $2))) {
    $9 = $3;
    $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
    $7 = $3 ? 0 : $9;
    $8 = $3 ? 2147450880 : $4;
    $5 = $3 ? 0 : $1;
    $6 = $3 ? 0 : $2;
    break label$1;
   }
   if (!($5 | $12 | ($13 ^ 2147418112 | $6))) {
    break label$1;
   }
   if (!($1 | $16 | ($2 | $15))) {
    if ($5 | $12 | ($6 | $13)) {
     break label$1;
    }
    $5 = $1 & $5;
    $6 = $2 & $6;
    $7 = $3 & $7;
    $8 = $4 & $8;
    break label$1;
   }
   if ($5 | $12 | ($6 | $13)) {
    break label$2;
   }
   $5 = $1;
   $6 = $2;
   $7 = $3;
   $8 = $4;
   break label$1;
  }
  $9 = ($12 | 0) == ($16 | 0) & ($13 | 0) == ($15 | 0) ? ($2 | 0) == ($6 | 0) & $5 >>> 0 > $1 >>> 0 | $6 >>> 0 > $2 >>> 0 : ($13 | 0) == ($15 | 0) & $12 >>> 0 > $16 >>> 0 | $13 >>> 0 > $15 >>> 0;
  $15 = $9 ? $5 : $1;
  $10 = $9 ? $6 : $2;
  $12 = $9 ? $8 : $4;
  $16 = $12;
  $18 = $9 ? $7 : $3;
  $14 = $18;
  $12 = $12 & 65535;
  $8 = $9 ? $4 : $8;
  $19 = $8;
  $4 = $9 ? $3 : $7;
  $17 = $8 >>> 16 & 32767;
  $13 = $16 >>> 16 & 32767;
  if (!$13) {
   $3 = !($12 | $14);
   $7 = $3 << 6;
   $8 = Math_clz32($3 ? $15 : $14) + 32 | 0;
   $3 = Math_clz32($3 ? $10 : $12);
   $3 = $7 + (($3 | 0) == 32 ? $8 : $3) | 0;
   __ashlti3($11 + 96 | 0, $15, $10, $14, $12, $3 + -15 | 0);
   $14 = HEAP32[$11 + 104 >> 2];
   $12 = HEAP32[$11 + 108 >> 2];
   $15 = HEAP32[$11 + 96 >> 2];
   $13 = 16 - $3 | 0;
   $10 = HEAP32[$11 + 100 >> 2];
  }
  $5 = $9 ? $1 : $5;
  $6 = $9 ? $2 : $6;
  $1 = $4;
  $2 = $19 & 65535;
  if ($17) {
   $3 = $1;
   $1 = $2;
  } else {
   $8 = $1;
   $3 = !($1 | $2);
   $7 = $3 << 6;
   $9 = Math_clz32($3 ? $5 : $1) + 32 | 0;
   $1 = Math_clz32($3 ? $6 : $2);
   $1 = $7 + (($1 | 0) == 32 ? $9 : $1) | 0;
   __ashlti3($11 + 80 | 0, $5, $6, $8, $2, $1 + -15 | 0);
   $17 = 16 - $1 | 0;
   $5 = HEAP32[$11 + 80 >> 2];
   $6 = HEAP32[$11 + 84 >> 2];
   $3 = HEAP32[$11 + 88 >> 2];
   $1 = HEAP32[$11 + 92 >> 2];
  }
  $2 = $3;
  $9 = $1 << 3 | $2 >>> 29;
  $7 = $2 << 3 | $6 >>> 29;
  $8 = $9 | 524288;
  $1 = $14;
  $3 = $12 << 3 | $1 >>> 29;
  $9 = $1 << 3 | $10 >>> 29;
  $14 = $3;
  $18 = $4 ^ $18;
  $12 = $16 ^ $19;
  $2 = $5;
  $1 = $6 << 3 | $2 >>> 29;
  $2 = $2 << 3;
  $4 = $1;
  $5 = $13 - $17 | 0;
  $3 = $2;
  label$11 : {
   if (!$5) {
    break label$11;
   }
   if ($5 >>> 0 > 127) {
    $7 = 0;
    $8 = 0;
    $1 = 0;
    $3 = 1;
    break label$11;
   }
   __ashlti3($11 - -64 | 0, $2, $4, $7, $8, 128 - $5 | 0);
   __lshrti3($11 + 48 | 0, $2, $4, $7, $8, $5);
   $7 = HEAP32[$11 + 56 >> 2];
   $8 = HEAP32[$11 + 60 >> 2];
   $1 = HEAP32[$11 + 52 >> 2];
   $3 = HEAP32[$11 + 48 >> 2] | ((HEAP32[$11 + 64 >> 2] | HEAP32[$11 + 72 >> 2]) != 0 | (HEAP32[$11 + 68 >> 2] | HEAP32[$11 + 76 >> 2]) != 0);
  }
  $6 = $1;
  $4 = $9;
  $14 = $14 | 524288;
  $2 = $15;
  $1 = $10 << 3 | $2 >>> 29;
  $5 = $2 << 3;
  $2 = $1;
  label$13 : {
   if (($12 | 0) < -1 ? 1 : ($12 | 0) <= -1 ? $18 >>> 0 > 4294967295 ? 0 : 1 : 0) {
    $9 = $5;
    $10 = $3;
    $1 = $5 - $3 | 0;
    $12 = $4 - $7 | 0;
    $3 = ($2 | 0) == ($6 | 0) & $5 >>> 0 < $3 >>> 0 | $2 >>> 0 < $6 >>> 0;
    $5 = $12 - $3 | 0;
    $2 = $2 - (($9 >>> 0 < $10 >>> 0) + $6 | 0) | 0;
    $6 = ($14 - (($4 >>> 0 < $7 >>> 0) + $8 | 0) | 0) - ($12 >>> 0 < $3 >>> 0) | 0;
    if (!($1 | $5 | ($2 | $6))) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     break label$1;
    }
    if (($6 | 0) == 524287 & $5 >>> 0 > 4294967295 | $6 >>> 0 > 524287) {
     break label$13;
    }
    $7 = $1;
    $3 = !($5 | $6);
    $4 = $3 << 6;
    $8 = Math_clz32($3 ? $1 : $5) + 32 | 0;
    $1 = Math_clz32($3 ? $2 : $6);
    $1 = $4 + (($1 | 0) == 32 ? $8 : $1) | 0;
    $1 = $1 + -12 | 0;
    __ashlti3($11 + 32 | 0, $7, $2, $5, $6, $1);
    $13 = $13 - $1 | 0;
    $5 = HEAP32[$11 + 40 >> 2];
    $6 = HEAP32[$11 + 44 >> 2];
    $1 = HEAP32[$11 + 32 >> 2];
    $2 = HEAP32[$11 + 36 >> 2];
    break label$13;
   }
   $9 = $2 + $6 | 0;
   $1 = $3;
   $2 = $1 + $5 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $1 = $2;
   $2 = $9;
   $6 = ($6 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $6 >>> 0;
   $10 = $8 + $14 | 0;
   $3 = $4 + $7 | 0;
   if ($3 >>> 0 < $4 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $5 = $3;
   $4 = $6 + $3 | 0;
   $3 = $10;
   $3 = $4 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
   $5 = $4;
   $6 = $3;
   if (!($3 & 1048576)) {
    break label$13;
   }
   $1 = $1 & 1 | (($2 & 1) << 31 | $1 >>> 1);
   $2 = $5 << 31 | $2 >>> 1;
   $13 = $13 + 1 | 0;
   $5 = ($6 & 1) << 31 | $5 >>> 1;
   $6 = $6 >>> 1;
  }
  $7 = 0;
  $8 = $16 & -2147483648;
  if (($13 | 0) >= 32767) {
   $8 = $8 | 2147418112;
   $5 = 0;
   $6 = 0;
   break label$1;
  }
  $4 = 0;
  label$17 : {
   if (($13 | 0) > 0) {
    $4 = $13;
    break label$17;
   }
   __ashlti3($11 + 16 | 0, $1, $2, $5, $6, $13 + 127 | 0);
   __lshrti3($11, $1, $2, $5, $6, 1 - $13 | 0);
   $1 = HEAP32[$11 >> 2] | ((HEAP32[$11 + 16 >> 2] | HEAP32[$11 + 24 >> 2]) != 0 | (HEAP32[$11 + 20 >> 2] | HEAP32[$11 + 28 >> 2]) != 0);
   $2 = HEAP32[$11 + 4 >> 2];
   $5 = HEAP32[$11 + 8 >> 2];
   $6 = HEAP32[$11 + 12 >> 2];
  }
  $9 = $2 >>> 3;
  $2 = ($2 & 7) << 29 | $1 >>> 3;
  $10 = $9 | $5 << 29;
  $9 = $10;
  $12 = $1 & 7;
  $1 = $12 >>> 0 > 4;
  $3 = $1 + $2 | 0;
  if ($3 >>> 0 < $1 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $13 = $3;
  $1 = $3;
  $3 = $9;
  $1 = ($10 | 0) == ($3 | 0) & $1 >>> 0 < $2 >>> 0 | $3 >>> 0 < $10 >>> 0;
  $2 = $7 | (($6 & 7) << 29 | $5 >>> 3);
  $5 = $8 | $6 >>> 3 & 65535;
  $9 = $4 << 16;
  $4 = $2;
  $2 = $2 + $1 | 0;
  $1 = $5 | $9;
  $1 = $2 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
  $4 = $2;
  $5 = ($12 | 0) == 4;
  $2 = $5 ? $13 & 1 : 0;
  $10 = $1;
  $7 = $4;
  $4 = 0;
  $3 = $4 + $3 | 0;
  $5 = $2 + $13 | 0;
  if ($5 >>> 0 < $2 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  $1 = $5;
  $6 = $3;
  $1 = ($4 | 0) == ($3 | 0) & $1 >>> 0 < $2 >>> 0 | $3 >>> 0 < $4 >>> 0;
  $2 = $7 + $1 | 0;
  if ($2 >>> 0 < $1 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $7 = $2;
  $8 = $10;
 }
 HEAP32[$0 >> 2] = $5;
 HEAP32[$0 + 4 >> 2] = $6;
 HEAP32[$0 + 8 >> 2] = $7;
 HEAP32[$0 + 12 >> 2] = $8;
 global$0 = $11 + 112 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0);
 label$1 : {
  if ($1) {
   $3 = $0;
   $5 = $1;
   if (1073741823 < $1 >>> 0) {
    std____2____throw_length_error_28char_20const__29(12275);
    abort();
   }
   std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______29($3, operator_20new_28unsigned_20long_29($5 << 2));
   wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0), wasm2js_i32$1 = $5, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   while (1) {
    if (($2 | 0) == ($5 | 0)) {
     $1 = $0 + 8 | 0;
     $3 = HEAP32[$1 >> 2];
     if (!$3) {
      break label$1;
     }
     $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$3 + 4 >> 2], $5);
     wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $6), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     while (1) {
      $1 = HEAP32[$3 >> 2];
      if (!$1) {
       break label$1;
      }
      label$8 : {
       $4 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$1 + 4 >> 2], $5);
       if (($6 | 0) == ($4 | 0)) {
        break label$8;
       }
       $2 = $1;
       if (!HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $4) >> 2]) {
        wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $4), wasm2js_i32$1 = $3, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $6 = $4;
        break label$8;
       }
       label$10 : {
        while (1) {
         $7 = HEAP32[$2 >> 2];
         if (!$7) {
          break label$10;
         }
         std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29($0);
         if (std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($1 + 8 | 0, HEAP32[$2 >> 2] + 8 | 0)) {
          $2 = HEAP32[$2 >> 2];
          continue;
         }
         break;
        }
        $7 = HEAP32[$2 >> 2];
       }
       HEAP32[$3 >> 2] = $7;
       wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $4) >> 2] >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       wasm2js_i32$0 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $4) >> 2], wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       continue;
      }
      $3 = $1;
      continue;
     }
    }
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2 = $2 + 1 | 0;
    continue;
   }
  }
  std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______29($0, 0);
  wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
}
function __rem_pio2_large($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $7 = global$0 - 560 | 0;
 global$0 = $7;
 $5 = $2;
 $2 = ($2 + -3 | 0) / 24 | 0;
 $16 = ($2 | 0) > 0 ? $2 : 0;
 $12 = $5 + Math_imul($16, -24) | 0;
 $11 = HEAP32[3961];
 $8 = $3 + -1 | 0;
 if (($11 + $8 | 0) >= 0) {
  $5 = $3 + $11 | 0;
  $2 = $16 - $8 | 0;
  while (1) {
   HEAPF64[($7 + 320 | 0) + ($6 << 3) >> 3] = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 15856 >> 2];
   $2 = $2 + 1 | 0;
   $6 = $6 + 1 | 0;
   if (($5 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $10 = $12 + -24 | 0;
 $5 = 0;
 $6 = ($3 | 0) < 1;
 while (1) {
  label$6 : {
   if ($6) {
    $4 = 0;
    break label$6;
   }
   $9 = $5 + $8 | 0;
   $2 = 0;
   $4 = 0;
   while (1) {
    $4 = $4 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($9 - $2 << 3) >> 3];
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($5 << 3) + $7 >> 3] = $4;
  $2 = ($5 | 0) < ($11 | 0);
  $5 = $5 + 1 | 0;
  if ($2) {
   continue;
  }
  break;
 }
 $20 = 23 - $10 | 0;
 $17 = 24 - $10 | 0;
 $5 = $11;
 label$9 : {
  while (1) {
   $4 = HEAPF64[($5 << 3) + $7 >> 3];
   $2 = 0;
   $6 = $5;
   $14 = ($5 | 0) < 1;
   if (!$14) {
    while (1) {
     $8 = ($7 + 480 | 0) + ($2 << 2) | 0;
     $13 = $4;
     $4 = $4 * 5.960464477539063e-8;
     label$14 : {
      if (Math_abs($4) < 2147483648) {
       $9 = ~~$4;
       break label$14;
      }
      $9 = -2147483648;
     }
     $4 = +($9 | 0);
     $13 = $13 + $4 * -16777216;
     label$13 : {
      if (Math_abs($13) < 2147483648) {
       $9 = ~~$13;
       break label$13;
      }
      $9 = -2147483648;
     }
     HEAP32[$8 >> 2] = $9;
     $6 = $6 + -1 | 0;
     $4 = HEAPF64[($6 << 3) + $7 >> 3] + $4;
     $2 = $2 + 1 | 0;
     if (($5 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = scalbn($4, $10);
   $4 = $4 + Math_floor($4 * .125) * -8;
   label$17 : {
    if (Math_abs($4) < 2147483648) {
     $9 = ~~$4;
     break label$17;
    }
    $9 = -2147483648;
   }
   $4 = $4 - +($9 | 0);
   label$19 : {
    label$20 : {
     label$21 : {
      $18 = ($10 | 0) < 1;
      label$22 : {
       if (!$18) {
        $6 = ($5 << 2) + $7 | 0;
        $8 = HEAP32[$6 + 476 >> 2];
        $2 = $8 >> $17;
        $15 = $6;
        $6 = $8 - ($2 << $17) | 0;
        HEAP32[$15 + 476 >> 2] = $6;
        $9 = $2 + $9 | 0;
        $8 = $6 >> $20;
        break label$22;
       }
       if ($10) {
        break label$21;
       }
       $8 = HEAP32[(($5 << 2) + $7 | 0) + 476 >> 2] >> 23;
      }
      if (($8 | 0) < 1) {
       break label$19;
      }
      break label$20;
     }
     $8 = 2;
     if (!!($4 >= .5)) {
      break label$20;
     }
     $8 = 0;
     break label$19;
    }
    $2 = 0;
    $6 = 0;
    if (!$14) {
     while (1) {
      $19 = ($7 + 480 | 0) + ($2 << 2) | 0;
      $14 = HEAP32[$19 >> 2];
      $15 = 16777215;
      label$26 : {
       label$27 : {
        if (!$6) {
         if (!$14) {
          break label$27;
         }
         $15 = 16777216;
         $6 = 1;
        }
        HEAP32[$19 >> 2] = $15 - $14;
        break label$26;
       }
       $6 = 0;
      }
      $2 = $2 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$29 : {
     if ($18) {
      break label$29;
     }
     $2 = $10 + -1 | 0;
     if ($2 >>> 0 > 1) {
      break label$29;
     }
     if ($2 - 1) {
      $2 = ($5 << 2) + $7 | 0;
      HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 8388607;
      break label$29;
     }
     $2 = ($5 << 2) + $7 | 0;
     HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 4194303;
    }
    $9 = $9 + 1 | 0;
    if (($8 | 0) != 2) {
     break label$19;
    }
    $4 = 1 - $4;
    $8 = 2;
    if (!$6) {
     break label$19;
    }
    $4 = $4 - scalbn(1, $10);
   }
   if ($4 == 0) {
    $6 = 0;
    label$32 : {
     $2 = $5;
     if (($2 | 0) <= ($11 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 + -1 | 0;
      $6 = HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2] | $6;
      if (($2 | 0) > ($11 | 0)) {
       continue;
      }
      break;
     }
     if (!$6) {
      break label$32;
     }
     $12 = $10;
     while (1) {
      $12 = $12 + -24 | 0;
      $5 = $5 + -1 | 0;
      if (!HEAP32[($7 + 480 | 0) + ($5 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $6 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($7 + 480 | 0) + ($11 - $6 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $6 = $5 + $6 | 0;
    while (1) {
     $8 = $3 + $5 | 0;
     $5 = $5 + 1 | 0;
     HEAPF64[($7 + 320 | 0) + ($8 << 3) >> 3] = HEAP32[($16 + $5 << 2) + 15856 >> 2];
     $2 = 0;
     $4 = 0;
     if (($3 | 0) >= 1) {
      while (1) {
       $4 = $4 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($8 - $2 << 3) >> 3];
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($5 << 3) + $7 >> 3] = $4;
     if (($5 | 0) < ($6 | 0)) {
      continue;
     }
     break;
    }
    $5 = $6;
    continue;
   }
   break;
  }
  $4 = scalbn($4, 0 - $10 | 0);
  label$39 : {
   if (!!($4 >= 16777216)) {
    $0 = ($7 + 480 | 0) + ($5 << 2) | 0;
    $13 = $4;
    $4 = $4 * 5.960464477539063e-8;
    label$42 : {
     if (Math_abs($4) < 2147483648) {
      $2 = ~~$4;
      break label$42;
     }
     $2 = -2147483648;
    }
    $4 = $13 + +($2 | 0) * -16777216;
    label$41 : {
     if (Math_abs($4) < 2147483648) {
      $3 = ~~$4;
      break label$41;
     }
     $3 = -2147483648;
    }
    HEAP32[$0 >> 2] = $3;
    $5 = $5 + 1 | 0;
    break label$39;
   }
   if (Math_abs($4) < 2147483648) {
    $2 = ~~$4;
   } else {
    $2 = -2147483648;
   }
   $12 = $10;
  }
  HEAP32[($7 + 480 | 0) + ($5 << 2) >> 2] = $2;
 }
 $4 = scalbn(1, $12);
 label$47 : {
  if (($5 | 0) <= -1) {
   break label$47;
  }
  $2 = $5;
  while (1) {
   HEAPF64[($2 << 3) + $7 >> 3] = $4 * +HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2];
   $4 = $4 * 5.960464477539063e-8;
   $0 = ($2 | 0) > 0;
   $2 = $2 + -1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
  if (($5 | 0) <= -1) {
   break label$47;
  }
  $2 = $5;
  while (1) {
   $0 = $2;
   $3 = $5 - $2 | 0;
   $4 = 0;
   $2 = 0;
   while (1) {
    $4 = $4 + HEAPF64[($2 << 3) + 18624 >> 3] * HEAPF64[($0 + $2 << 3) + $7 >> 3];
    label$51 : {
     if (($2 | 0) >= ($11 | 0)) {
      break label$51;
     }
     $10 = $2 >>> 0 < $3 >>> 0;
     $2 = $2 + 1 | 0;
     if ($10) {
      continue;
     }
    }
    break;
   }
   HEAPF64[($7 + 160 | 0) + ($3 << 3) >> 3] = $4;
   $2 = $0 + -1 | 0;
   if (($0 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 $4 = 0;
 if (($5 | 0) >= 0) {
  $2 = $5;
  while (1) {
   $4 = $4 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
   $0 = ($2 | 0) > 0;
   $2 = $2 + -1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
 }
 HEAPF64[$1 >> 3] = $8 ? -$4 : $4;
 $4 = HEAPF64[$7 + 160 >> 3] - $4;
 $2 = 1;
 if (($5 | 0) >= 1) {
  while (1) {
   $4 = $4 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
   $0 = ($2 | 0) != ($5 | 0);
   $2 = $2 + 1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
 }
 HEAPF64[$1 + 8 >> 3] = $8 ? -$4 : $4;
 global$0 = $7 + 560 | 0;
 return $9 & 7;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 90)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
  HEAP32[$2 + 12 >> 2] = $4;
  if (!$4) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 115)) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 25928), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
   break label$1;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 100)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2, $0, 1);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
    HEAP32[$2 >> 2] = $1;
    if (!$1) {
     break label$3;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
   HEAP32[$2 >> 2] = $1;
   if (!$1) {
    break label$3;
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
  }
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function get_matrix_code($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $9 = global$0 - 48 | 0;
 global$0 = $9;
 label$1 : {
  if ($1 + -3 >>> 0 >= 6) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = -1074790400;
   $0 = -1;
   break label$1;
  }
  HEAP32[$9 + 16 >> 2] = 0;
  $13 = $1 + -1 | 0;
  HEAP32[$9 + 28 >> 2] = $13;
  $16 = Math_imul($1, $1);
  HEAP32[$9 + 24 >> 2] = $16 + -1;
  HEAP32[$9 + 20 >> 2] = Math_imul($1, $13);
  $10 = 255;
  while (1) {
   if (($7 | 0) != 4) {
    $8 = HEAPU8[HEAP32[($9 + 16 | 0) + ($7 << 2) >> 2] + $0 | 0];
    $10 = $8 >>> 0 < ($10 & 255) >>> 0 ? $8 : $10;
    $11 = $8 >>> 0 > ($11 & 255) >>> 0 ? $8 : $11;
    $7 = $7 + 1 | 0;
    continue;
   }
   break;
  }
  $7 = $11 & 255;
  $8 = $10 & 255;
  if (($7 - $8 | 0) <= 29) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = -1074790400;
   $0 = -2;
   break label$1;
  }
  $10 = $7 + $8 >>> 1;
  $8 = 0;
  $7 = 0;
  label$6 : {
   label$7 : {
    label$8 : {
     while (1) {
      if (($7 | 0) == 4) {
       label$11 : {
        label$12 : {
         while (1) {
          $7 = $8;
          if (($7 | 0) == 4) {
           break label$12;
          }
          $8 = $7 + 1 | 0;
          if (HEAPU8[($9 + 44 | 0) + ($7 + 2 & 3) | 0] | (HEAPU8[$7 + ($9 + 44 | 0) | 0] != 1 | HEAPU8[($9 + 44 | 0) + ($8 & 3) | 0] != 1)) {
           continue;
          }
          break;
         }
         HEAP32[$3 >> 2] = $7;
         $7 = 0;
         $15 = 255;
         while (1) {
          if (($7 | 0) != ($16 | 0)) {
           $11 = $0 + $7 | 0;
           $8 = HEAPU8[$11 | 0];
           HEAP8[$11 | 0] = $8 >>> 0 < $10 >>> 0;
           $11 = $8 - $10 | 0;
           $8 = $11 >> 31;
           $8 = $8 ^ $8 + $11;
           $15 = ($8 | 0) < ($15 | 0) ? $8 : $15;
           $7 = $7 + 1 | 0;
           continue;
          }
          break;
         }
         $10 = HEAP32[$3 >> 2];
         if ($10 >>> 0 > 3) {
          break label$6;
         }
         $11 = 0;
         $3 = $13;
         $8 = $3;
         label$16 : {
          switch ($10 - 1 | 0) {
          case 2:
           break label$11;
          case 0:
           break label$7;
          case 1:
           break label$8;
          default:
           break label$16;
          }
         }
         while (1) {
          if (($10 | 0) >= ($1 | 0)) {
           break label$6;
          }
          $8 = Math_imul($1, $10);
          $7 = 0;
          while (1) {
           if (($1 | 0) != ($7 | 0)) {
            if (!(!($7 | $10) | (!$7 | ($7 | 0) == ($13 | 0) ? ($10 | 0) == ($13 | 0) : 0))) {
             $3 = $12;
             $14 = $14 << 1 | $3 >>> 31;
             $12 = $3 << 1 | HEAPU8[($7 + $8 | 0) + $0 | 0] != 0;
            }
            $7 = $7 + 1 | 0;
            continue;
           }
           break;
          }
          $10 = $10 + 1 | 0;
          continue;
         }
        }
        HEAP32[$2 >> 2] = -1;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = -1074790400;
        $0 = -3;
        break label$1;
       }
      } else {
       HEAP8[($9 + 44 | 0) + $7 | 0] = $10 >>> 0 > HEAPU8[HEAP32[($9 + 16 | 0) + ($7 << 2) >> 2] + $0 | 0];
       $7 = $7 + 1 | 0;
       continue;
      }
      break;
     }
     while (1) {
      $7 = 0;
      if (($8 | 0) < 0) {
       break label$6;
      }
      while (1) {
       if (($7 | 0) < ($1 | 0)) {
        if (!(!$8 & ($7 | 0) == ($13 | 0) | (!($7 | $8) | !$7 & ($8 | 0) == ($13 | 0)))) {
         $3 = $12;
         $14 = $14 << 1 | $3 >>> 31;
         $12 = $3 << 1 | HEAPU8[(Math_imul($1, $7) + $8 | 0) + $0 | 0] != 0;
        }
        $7 = $7 + 1 | 0;
        continue;
       }
       break;
      }
      $8 = $8 + -1 | 0;
      continue;
     }
    }
    while (1) {
     if (($3 | 0) < 0) {
      break label$6;
     }
     $8 = Math_imul($1, $3);
     $10 = !$3 | ($3 | 0) == ($13 | 0);
     $7 = $13;
     while (1) {
      if (($7 | 0) >= 0) {
       if (!(!($3 | $7) | $10 & ($7 | 0) == ($13 | 0))) {
        $14 = $14 << 1 | $12 >>> 31;
        $12 = $12 << 1 | HEAPU8[($7 + $8 | 0) + $0 | 0] != 0;
       }
       $7 = $7 + -1 | 0;
       continue;
      }
      break;
     }
     $3 = $3 + -1 | 0;
     continue;
    }
   }
   while (1) {
    if (($11 | 0) >= ($1 | 0)) {
     break label$6;
    }
    $7 = $13;
    while (1) {
     if (($7 | 0) >= 0) {
      if (!((($7 | 0) == ($13 | 0) ? !$11 : 0) | (!$7 | ($7 | 0) == ($13 | 0) ? ($11 | 0) == ($13 | 0) : 0))) {
       $3 = $12;
       $14 = $14 << 1 | $3 >>> 31;
       $12 = $3 << 1 | HEAPU8[(Math_imul($1, $7) + $11 | 0) + $0 | 0] != 0;
      }
      $7 = $7 + -1 | 0;
      continue;
     }
     break;
    }
    $11 = $11 + 1 | 0;
    continue;
   }
  }
  HEAPF64[$4 >> 3] = ($15 | 0) <= 30 ? +($15 | 0) / 30 : 1;
  label$34 : {
   label$35 : {
    label$36 : {
     if (($5 | 0) == 1285 | $5 + -1028 >>> 0 < 2) {
      break label$36;
     }
     if (($5 | 0) != 515) {
      if (($5 | 0) == 772) {
       break label$36;
      }
      if (($5 | 0) != 259) {
       break label$35;
      }
      $0 = HEAP8[$12 + 5792 | 0];
      HEAP32[$9 + 8 >> 2] = $0;
      HEAP32[$9 + 12 >> 2] = $0 >> 31;
      $0 = $12 & 31;
      if (!((32 <= ($12 & 63) >>> 0 ? 1771476585 >>> $0 : ((1 << $0) - 1 & 1771476585) << 32 - $0 | -1771476586 >>> $0) & 1)) {
       break label$34;
      }
      HEAP32[$2 >> 2] = -1;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = -1074790400;
      $0 = -4;
      break label$1;
     }
     $0 = HEAP8[$12 + 5728 | 0];
     HEAP32[$9 + 8 >> 2] = $0;
     HEAP32[$9 + 12 >> 2] = $0 >> 31;
     $0 = $12;
     if ($6) {
      $3 = $0 & 31;
      HEAP32[$6 >> 2] = (32 <= ($0 & 63) >>> 0 ? 2129124285 >>> $3 : ((1 << $3) - 1 & 2129124285) << 32 - $3 | -1109661826 >>> $3) & 1;
     }
     $1 = $0 & 31;
     if (!((32 <= ($0 & 63) >>> 0 ? -2130706366 >>> $1 : ((1 << $1) - 1 & -2130706366) << 32 - $1 | 2365440 >>> $1) & 1)) {
      break label$34;
     }
     HEAP32[$2 >> 2] = -1;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = -1074790400;
     $0 = -4;
     break label$1;
    }
    $0 = decode_bch($5, $12, $14, 0, $9 + 8 | 0);
    if (($0 | 0) <= -1) {
     HEAP32[$2 >> 2] = -1;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = -1074790400;
     $0 = -4;
     break label$1;
    }
    if (!$6 | !$0) {
     break label$34;
    }
    HEAP32[$6 >> 2] = $0;
    break label$34;
   }
   HEAP32[$9 + 8 >> 2] = $12;
   HEAP32[$9 + 12 >> 2] = $14;
  }
  HEAP32[$2 >> 2] = HEAP32[$9 + 8 >> 2];
  $0 = 0;
 }
 global$0 = $9 + 48 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    if (($2 | 0) != 90) {
     $2 = $2 & 255;
     if (($2 | 0) == 83) {
      break label$3;
     }
     if (($2 | 0) != 78) {
      break label$2;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 116) {
    break label$2;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
   HEAP32[$3 + 12 >> 2] = $4;
   $2 = 0;
   if (!$4) {
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, ($1 | 0) != 0);
   HEAP32[$3 + 8 >> 2] = $4;
   if (!$4) {
    break label$1;
   }
   if ($1) {
    HEAP8[$1 + 1 | 0] = 1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 12 | 0, $3 + 8 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
  HEAP32[$3 + 12 >> 2] = $2;
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $3 + 12 | 0);
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, ($1 | 0) != 0);
  HEAP32[$3 + 8 >> 2] = $2;
  if ($2) {
   if ($1) {
    HEAP8[$1 + 1 | 0] = 1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 12 | 0, $3 + 8 | 0);
  } else {
   $2 = 0;
  }
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 56 | 0, 19305);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $4;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
   HEAP32[$1 + 52 >> 2] = $3;
   if (!$3) {
    $3 = 0;
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 46) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___29($0 + 368 | 0, $1 + 52 | 0, $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($1 + 40 | 0, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]));
    HEAP32[$1 + 52 >> 2] = $3;
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) ? 0 : $3;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 19308);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
   HEAP32[$1 + 52 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 19313);
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 40 | 0, $0, 0);
   if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 40 | 0) ? $2 : 0) {
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 46) {
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0)) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 19327, $1 + 52 | 0);
   break label$1;
  }
  $3 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0), wasm2js_i32$2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
 }
 global$0 = $1 - -64 | 0;
 return $3;
}
function icpGetInitXw2Xc_from_PlanarData($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 $7 = global$0 - 80 | 0;
 global$0 = $7;
 $32 = -1;
 label$1 : {
  while (1) {
   if (($4 | 0) != 4) {
    $5 = Math_imul($4, 24);
    $4 = $4 + 1 | 0;
    if (HEAPF64[($2 + $5 | 0) + 16 >> 3] == 0) {
     continue;
    }
    break label$1;
   }
   break;
  }
  if (HEAPF64[$0 >> 3] == 0 | HEAPF64[$0 + 32 >> 3] != 0 | (HEAPF64[$0 + 40 >> 3] == 0 | HEAPF64[$0 + 64 >> 3] != 0)) {
   break label$1;
  }
  if (HEAPF64[$0 + 72 >> 3] != 0 | HEAPF64[$0 + 80 >> 3] != 1 | (HEAPF64[$0 + 24 >> 3] != 0 | HEAPF64[$0 + 56 >> 3] != 0)) {
   break label$1;
  }
  if (HEAPF64[$0 + 88 >> 3] != 0) {
   break label$1;
  }
  $13 = arMatrixAlloc(8, 8);
  if (!$13) {
   arLog(3, 1782, 0);
   break label$1;
  }
  $16 = arMatrixAlloc(8, 1);
  if ($16) {
   while (1) {
    if (($21 | 0) != 4) {
     $8 = Math_imul($21, 24) + $2 | 0;
     $17 = HEAP32[$8 + 4 >> 2];
     $4 = HEAP32[$13 >> 2];
     $5 = $21 << 7;
     $6 = $4 + $5 | 0;
     HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6 + 4 >> 2] = $17;
     $17 = HEAP32[$8 + 12 >> 2];
     $6 = $4 + ($5 | 8) | 0;
     HEAP32[$6 >> 2] = HEAP32[$8 + 8 >> 2];
     HEAP32[$6 + 4 >> 2] = $17;
     $6 = $4 + ($5 | 16) | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 1072693248;
     $6 = $4 + ($5 | 24) | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $4 + ($5 | 32) | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $6 = $4 + ($5 | 40) | 0;
     HEAP32[$6 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = 0;
     $17 = $21 << 4;
     $6 = $17 + $1 | 0;
     HEAPF64[$4 + ($5 | 48) >> 3] = HEAPF64[$6 >> 3] * -HEAPF64[$8 >> 3];
     HEAPF64[$4 + ($5 | 56) >> 3] = HEAPF64[$6 >> 3] * -HEAPF64[$8 + 8 >> 3];
     $33 = $17 | 8;
     $9 = $4 + ($33 << 3) | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $4 + ($5 | 72) | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $4 + ($5 | 80) | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $26 = HEAP32[$8 + 4 >> 2];
     $9 = $4 + ($5 | 88) | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$9 + 4 >> 2] = $26;
     $26 = HEAP32[$8 + 12 >> 2];
     $9 = $4 + ($5 | 96) | 0;
     HEAP32[$9 >> 2] = HEAP32[$8 + 8 >> 2];
     HEAP32[$9 + 4 >> 2] = $26;
     $9 = $4 + ($5 | 104) | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 1072693248;
     HEAPF64[$4 + ($5 | 112) >> 3] = HEAPF64[$6 + 8 >> 3] * -HEAPF64[$8 >> 3];
     HEAPF64[$4 + ($5 | 120) >> 3] = HEAPF64[$6 + 8 >> 3] * -HEAPF64[$8 + 8 >> 3];
     $8 = HEAP32[$6 + 4 >> 2];
     $4 = HEAP32[$16 >> 2];
     $5 = $4 + $17 | 0;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$5 + 4 >> 2] = $8;
     $5 = HEAP32[$6 + 12 >> 2];
     $4 = $4 + $33 | 0;
     HEAP32[$4 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$4 + 4 >> 2] = $5;
     $21 = $21 + 1 | 0;
     continue;
    }
    break;
   }
   $1 = arMatrixAllocTrans($13);
   if (!$1) {
    arMatrixFree($13);
    arMatrixFree($16);
    arLog(3, 2502, 0);
    break label$1;
   }
   $4 = arMatrixAllocMul($1, $13);
   if (!$4) {
    arMatrixFree($13);
    arMatrixFree($16);
    arMatrixFree($1);
    arLog(3, 2778, 0);
    break label$1;
   }
   $5 = arMatrixAllocMul($1, $16);
   if (!$5) {
    arMatrixFree($13);
    arMatrixFree($16);
    arMatrixFree($1);
    arMatrixFree($4);
    arLog(3, 3041, 0);
    break label$1;
   }
   if ((arMatrixSelfInv($4) | 0) <= -1) {
    arMatrixFree($13);
    arMatrixFree($16);
    arMatrixFree($1);
    arMatrixFree($4);
    arMatrixFree($5);
    arLog(3, 3400, 0);
    break label$1;
   }
   $8 = arMatrixAllocMul($4, $5);
   if (!$8) {
    arMatrixFree($13);
    arMatrixFree($16);
    arMatrixFree($1);
    arMatrixFree($4);
    arMatrixFree($5);
    arLog(3, 3760, 0);
    break label$1;
   }
   $18 = HEAPF64[$0 + 48 >> 3];
   $2 = HEAP32[$8 >> 2];
   $34 = HEAPF64[$2 + 40 >> 3];
   $35 = HEAPF64[$2 + 16 >> 3];
   $22 = HEAPF64[$2 + 24 >> 3];
   $23 = HEAPF64[$2 >> 3];
   $11 = HEAPF64[$2 + 48 >> 3];
   $27 = HEAPF64[$0 >> 3];
   $28 = HEAPF64[$0 + 8 >> 3];
   $29 = HEAPF64[$0 + 40 >> 3];
   $10 = HEAPF64[$2 + 32 >> 3];
   $12 = HEAPF64[$2 + 8 >> 3];
   $30 = HEAPF64[$0 + 16 >> 3];
   $15 = HEAPF64[$2 + 56 >> 3];
   arMatrixFree($13);
   arMatrixFree($16);
   arMatrixFree($1);
   arMatrixFree($4);
   arMatrixFree($5);
   arMatrixFree($8);
   $10 = ($10 - $18 * $15) / $29;
   $12 = ($12 - $30 * $15 - $28 * $10) / $27;
   $14 = $15;
   $15 = Math_sqrt($15 * $15 + ($10 * $10 + $12 * $12));
   HEAPF64[$7 + 40 >> 3] = $14 / $15;
   HEAPF64[$7 + 32 >> 3] = $10 / $15;
   HEAPF64[$7 + 24 >> 3] = $12 / $15;
   $10 = ($22 - $11 * $18) / $29;
   $12 = ($23 - $11 * $30 - $10 * $28) / $27;
   $14 = $11;
   $11 = Math_sqrt($11 * $11 + ($10 * $10 + $12 * $12));
   HEAPF64[$7 + 16 >> 3] = $14 / $11;
   HEAPF64[$7 + 8 >> 3] = $10 / $11;
   HEAPF64[$7 >> 3] = $12 / $11;
   check_rotation($7);
   $10 = HEAPF64[$7 + 32 >> 3];
   $12 = HEAPF64[$7 >> 3];
   $22 = HEAPF64[$7 + 8 >> 3];
   $23 = HEAPF64[$7 + 24 >> 3];
   $14 = $10 * $12 - $22 * $23;
   $25 = $14;
   $24 = $14 * $14;
   $14 = HEAPF64[$7 + 40 >> 3];
   $31 = HEAPF64[$7 + 16 >> 3];
   $19 = $22 * $14 - $31 * $10;
   $20 = $31 * $23 - $14 * $12;
   $24 = Math_sqrt($24 + ($19 * $19 + $20 * $20));
   $25 = $25 / $24;
   HEAPF64[$7 - -64 >> 3] = $25;
   $20 = $20 / $24;
   HEAPF64[$7 + 56 >> 3] = $20;
   $19 = $19 / $24;
   HEAPF64[$7 + 48 >> 3] = $19;
   $18 = ($34 - $18) / $29;
   $11 = ($11 + $15) * .5;
   HEAPF64[$3 + 24 >> 3] = ($35 - $30 - $28 * $18) / $27 / $11;
   HEAPF64[$3 + 56 >> 3] = $18 / $11;
   HEAPF64[$3 + 88 >> 3] = 1 / $11;
   HEAPF64[$3 + 16 >> 3] = $19;
   HEAPF64[$3 + 48 >> 3] = $20;
   HEAPF64[$3 + 80 >> 3] = $25;
   HEAPF64[$3 + 8 >> 3] = $23;
   HEAPF64[$3 + 40 >> 3] = $10;
   HEAPF64[$3 + 72 >> 3] = $14;
   HEAPF64[$3 + 32 >> 3] = $22;
   HEAPF64[$3 - -64 >> 3] = $31;
   HEAPF64[$3 >> 3] = $12;
   $32 = 0;
   break label$1;
  }
  arMatrixFree($13);
  arLog(3, 2172, 0);
 }
 global$0 = $7 + 80 | 0;
 return $32;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 100) {
     break label$3;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
    if (($1 | 0) != 88) {
     if (($1 | 0) != 120) {
      if (($1 | 0) != 105) {
       break label$3;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
      HEAP32[$2 + 12 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
      HEAP32[$2 + 8 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      HEAP8[$2 + 4 | 0] = 0;
      $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$2 + 12 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
     HEAP32[$2 + 8 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     HEAP8[$2 + 4 | 0] = 1;
     $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$2 + 8 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0);
    HEAP32[$2 + 4 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $2 + 12 | 0;
    $3 = $2 + 8 | 0;
    $4 = $2 + 4 | 0;
    $0 = $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$3 >> 2], HEAP32[$4 >> 2]);
    break label$1;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 28128);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 4 >> 2] = $4;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
   break label$1;
  }
  label$2 : {
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -49 & 255) >>> 0 <= 8) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 16 | 0, $0, 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 16 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 12 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1 + 12 | 0, $1 + 16 | 0);
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
    HEAP32[$1 + 16 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 12 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 12 | 0, $1 + 16 | 0);
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 12 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1 + 12 | 0, $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 16 | 0));
   break label$1;
  }
  $2 = 0;
 }
 global$0 = $1 + 32 | 0;
 return $2;
}
function get_global_id_code($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = global$0 - 176 | 0;
 global$0 = $9;
 HEAP32[$9 + 152 >> 2] = 195;
 HEAP32[$9 + 156 >> 2] = 13;
 HEAP32[$9 + 144 >> 2] = 0;
 HEAP32[$9 + 148 >> 2] = 182;
 $10 = 255;
 while (1) {
  if (($5 | 0) != 4) {
   $11 = HEAPU8[HEAP32[($9 + 144 | 0) + ($5 << 2) >> 2] + $0 | 0];
   $10 = $11 >>> 0 < ($10 & 255) >>> 0 ? $11 : $10;
   $7 = $11 >>> 0 > ($7 & 255) >>> 0 ? $11 : $7;
   $5 = $5 + 1 | 0;
   continue;
  }
  break;
 }
 $11 = $7 & 255;
 $7 = $10 & 255;
 label$3 : {
  if (($11 - $7 | 0) <= 29) {
   HEAP32[$2 >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = -1074790400;
   $0 = -2;
   break label$3;
  }
  $14 = $7 + $11 >>> 1;
  $7 = 0;
  $5 = 0;
  $17 = $3;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      while (1) {
       if (($5 | 0) == 4) {
        label$11 : {
         label$12 : {
          label$13 : {
           while (1) {
            $11 = $7;
            if (($7 | 0) == 4) {
             break label$13;
            }
            $7 = $11 + 1 | 0;
            if (HEAPU8[($9 + 172 | 0) + ($11 + 2 & 3) | 0] | (HEAPU8[$11 + ($9 + 172 | 0) | 0] != 1 | HEAPU8[($9 + 172 | 0) + ($7 & 3) | 0] != 1)) {
             continue;
            }
            break;
           }
           if ($11 >>> 0 <= 3) {
            $10 = 119;
            $6 = 13;
            $7 = 255;
            $3 = $11;
            switch ($3 - 1 | 0) {
            case 2:
             break label$11;
            case 0:
             break label$7;
            case 1:
             break label$8;
            default:
             break label$12;
            }
           }
           HEAP32[$2 >> 2] = $11;
           $15 = 1;
           break label$5;
          }
          HEAP32[$2 >> 2] = 0;
          HEAP32[$3 >> 2] = 0;
          HEAP32[$3 + 4 >> 2] = -1074790400;
          $0 = -3;
          break label$3;
         }
         while (1) {
          if (($3 | 0) == 14) {
           break label$6;
          }
          $8 = Math_imul($3, 14);
          $12 = $3 & 2147483646;
          $16 = $3 + -3 | 0;
          $5 = 0;
          while (1) {
           if (($5 | 0) != 14) {
            label$19 : {
             if (!(($3 | $5) & 2147483646) | ($16 | $5 + -3) >>> 0 < 8) {
              break label$19;
             }
             if (($12 | 0) == 12) {
              $6 = $5 & 2147483646;
              if (!$6 | ($6 | 0) == 12) {
               break label$19;
              }
             }
             $6 = HEAPU8[($5 + $8 | 0) + $0 | 0] - $14 | 0;
             HEAP8[$9 + $10 | 0] = $6 >>> 31;
             $13 = $6;
             $6 = $6 >> 31;
             $6 = $13 + $6 ^ $6;
             $7 = ($6 | 0) < ($7 | 0) ? $6 : $7;
             $10 = $10 + -1 | 0;
            }
            $5 = $5 + 1 | 0;
            continue;
           }
           break;
          }
          $3 = $3 + 1 | 0;
          continue;
         }
        }
       } else {
        HEAP8[($9 + 172 | 0) + $5 | 0] = $14 >>> 0 > HEAPU8[HEAP32[($9 + 144 | 0) + ($5 << 2) >> 2] + $0 | 0];
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      }
      while (1) {
       $5 = 0;
       if (($6 | 0) < 0) {
        break label$6;
       }
       $3 = $6 & -2;
       $12 = $6 + -3 | 0;
       while (1) {
        if (($5 | 0) != 14) {
         label$25 : {
          if (($12 | $5 + -3) >>> 0 < 8) {
           break label$25;
          }
          $8 = $5 & 2147483646;
          if (($8 ? 0 : ($3 | 0) == 12) | (!($3 | $8) | !$3 & ($8 | 0) == 12)) {
           break label$25;
          }
          $8 = HEAPU8[(Math_imul($5, 14) + $6 | 0) + $0 | 0] - $14 | 0;
          HEAP8[$9 + $10 | 0] = $8 >>> 31;
          $13 = $8;
          $8 = $8 >> 31;
          $8 = $13 + $8 ^ $8;
          $7 = ($8 | 0) < ($7 | 0) ? $8 : $7;
          $10 = $10 + -1 | 0;
         }
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       }
       $6 = $6 + -1 | 0;
       continue;
      }
     }
     while (1) {
      if (($6 | 0) < 0) {
       break label$6;
      }
      $8 = ($6 & -2) == 12 | $6 >>> 0 < 2;
      $12 = Math_imul($6, 14);
      $16 = $6 + -3 | 0;
      $5 = 13;
      while (1) {
       if (($5 | 0) >= 0) {
        if (!($8 & ($5 & -2) == 12 | (($16 | $5 + -3) >>> 0 < 8 | ($5 | $6) >>> 0 < 2))) {
         $3 = HEAPU8[($5 + $12 | 0) + $0 | 0] - $14 | 0;
         HEAP8[$9 + $10 | 0] = $3 >>> 31;
         $10 = $10 + -1 | 0;
         $13 = $3;
         $3 = $3 >> 31;
         $3 = $13 + $3 ^ $3;
         $7 = ($3 | 0) < ($7 | 0) ? $3 : $7;
        }
        $5 = $5 + -1 | 0;
        continue;
       }
       break;
      }
      $6 = $6 + -1 | 0;
      continue;
     }
    }
    while (1) {
     if (($8 | 0) == 14) {
      break label$6;
     }
     $3 = $8 & 2147483646;
     $12 = $8 + -3 | 0;
     $5 = 13;
     while (1) {
      if (($5 | 0) >= 0) {
       label$33 : {
        if (($12 | $5 + -3) >>> 0 < 8) {
         break label$33;
        }
        $6 = $5 & -2;
        if ((($6 | 0) == 12 ? !$3 : 0) | (($6 | 0) == 12 | $5 >>> 0 < 2 ? ($3 | 0) == 12 : 0)) {
         break label$33;
        }
        $6 = HEAPU8[(Math_imul($5, 14) + $8 | 0) + $0 | 0] - $14 | 0;
        HEAP8[$9 + $10 | 0] = $6 >>> 31;
        $13 = $6;
        $6 = $6 >> 31;
        $6 = $13 + $6 ^ $6;
        $7 = ($6 | 0) < ($7 | 0) ? $6 : $7;
        $10 = $10 + -1 | 0;
       }
       $5 = $5 + -1 | 0;
       continue;
      }
      break;
     }
     $8 = $8 + 1 | 0;
     continue;
    }
   }
   HEAP32[$2 >> 2] = $11;
   $15 = 1;
   if (($7 | 0) > 30) {
    break label$5;
   }
   $15 = +($7 | 0) / 30;
  }
  HEAPF64[$17 >> 3] = $15;
  $2 = decode_bch(2830, 0, 0, $9, $9 + 136 | 0);
  $0 = -4;
  if (($2 | 0) < 0) {
   break label$3;
  }
  if ($4) {
   HEAP32[$4 >> 2] = $2;
  }
  $0 = HEAP32[$9 + 140 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$9 + 136 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
  $0 = 0;
 }
 global$0 = $9 + 176 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 72 | 0, 25561);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 28 >> 2] = $4;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 24 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 - -64 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 - -64 | 0);
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 56 | 0, 25564);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 20 >> 2] = $4;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 - -64 | 0);
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($1 + 48 | 0, $0 + 362 | 0, 1);
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 25567);
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $5;
  label$3 : {
   label$4 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
     $2 = $0 + 8 | 0;
     $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
     while (1) {
      $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
      HEAP32[$1 + 32 >> 2] = $6;
      if (!$6) {
       break label$4;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 32 | 0);
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 32 | 0, $0, $5);
     $2 = HEAP32[$1 + 36 >> 2];
     HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$1 + 68 >> 2] = $2;
    }
    $2 = 0;
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $3, $1 + 32 | 0);
    break label$3;
   }
   $2 = 0;
  }
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($4);
 }
 global$0 = $1 + 80 | 0;
 return $2;
}
function arMultiReadConfigFile($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 2624 | 0;
 global$0 = $2;
 label$1 : {
  $7 = fopen($0, 1842);
  label$2 : {
   if (!$7) {
    HEAP32[$2 + 16 >> 2] = $0;
    arLog(3, 2198, $2 + 16 | 0);
    wasm2js_i32$0 = $2, wasm2js_i32$1 = __strerror_l(HEAP32[8356]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
    HEAP32[$2 >> 2] = 2804;
    arLog(3, 2528, $2);
    break label$2;
   }
   get_buff($2 + 2304 | 0, $7);
   HEAP32[$2 + 224 >> 2] = $2 + 248;
   if ((sscanf($2 + 2304 | 0, 3067, $2 + 224 | 0) | 0) != 1) {
    HEAP32[$2 + 208 >> 2] = $0;
    arLog(3, 3426, $2 + 208 | 0);
    fclose($7);
    break label$2;
   }
   $3 = HEAP32[$2 + 248 >> 2];
   $11 = dlmalloc(Math_imul($3, 320));
   if (!$11) {
    break label$1;
   }
   while (1) {
    label$6 : {
     label$7 : {
      label$8 : {
       if (($10 | 0) < ($3 | 0)) {
        get_buff($2 + 2304 | 0, $7);
        $4 = Math_imul($10, 320) + $11 | 0;
        $3 = $4;
        HEAP32[$2 + 192 >> 2] = $3 + 312;
        HEAP32[$2 + 196 >> 2] = $2 + 255;
        $8 = $3;
        label$10 : {
         if ((sscanf($2 + 2304 | 0, 4037, $2 + 192 | 0) | 0) != 1) {
          if (!$1) {
           HEAP32[$2 + 144 >> 2] = $0;
           HEAP32[$2 + 148 >> 2] = $2 + 2304;
           arLog(3, 4234, $2 + 144 | 0);
           break label$6;
          }
          if (!arUtilGetDirectoryNameFromPath($2 + 256 | 0, $0)) {
           HEAP32[$2 + 160 >> 2] = $0;
           arLog(3, 4531, $2 + 160 | 0);
           break label$6;
          }
          $3 = strncat($2 + 256 | 0, $2 + 2304 | 0, 2047 - strlen($2 + 256 | 0) | 0);
          $5 = arPattLoad($1, $3);
          HEAP32[$4 >> 2] = $5;
          if (($5 | 0) <= -1) {
           break label$8;
          }
          $5 = 1;
          $3 = 0;
          break label$10;
         }
         $3 = HEAP32[$3 + 312 >> 2];
         HEAP32[$4 >> 2] = $3 & -32768 ? 0 : $3 & 32767;
         $5 = 2;
         $3 = 1;
        }
        HEAP32[$8 + 4 >> 2] = $3;
        get_buff($2 + 2304 | 0, $7);
        HEAP32[$2 + 128 >> 2] = $4 + 8;
        if ((sscanf($2 + 2304 | 0, 5167, $2 + 128 | 0) | 0) != 1) {
         HEAP32[$2 + 112 >> 2] = $0;
         HEAP32[$2 + 116 >> 2] = $10 + 1;
         arLog(3, 5368, $2 + 112 | 0);
         break label$6;
        }
        get_buff($2 + 2304 | 0, $7);
        HEAP32[$2 + 108 >> 2] = $4 + 40;
        HEAP32[$2 + 104 >> 2] = $4 + 32;
        HEAP32[$2 + 100 >> 2] = $4 + 24;
        $8 = $4 + 16 | 0;
        HEAP32[$2 + 96 >> 2] = $8;
        $3 = 1;
        if ((sscanf($2 + 2304 | 0, 5571, $2 + 96 | 0) | 0) == 4) {
         break label$7;
        }
        HEAP32[$2 + 80 >> 2] = $2 + 244;
        HEAP32[$2 + 84 >> 2] = $2 + 240;
        if ((sscanf($2 + 2304 | 0, 5613, $2 + 80 | 0) | 0) == 2) {
         $3 = 0;
         break label$7;
        }
        HEAP32[$2 + 64 >> 2] = $0;
        HEAP32[$2 + 68 >> 2] = $10 + 1;
        arLog(3, 7285, $2 - -64 | 0);
        break label$6;
       }
       fclose($7);
       $3 = dlmalloc(136);
       if (!$3) {
        break label$1;
       }
       HEAP32[$3 >> 2] = $11;
       $0 = HEAP32[$2 + 248 >> 2];
       HEAP32[$3 + 128 >> 2] = 0;
       HEAP32[$3 + 4 >> 2] = $0;
       HEAP32[$3 + 104 >> 2] = 0;
       label$16 : {
        if (($12 & 3) == 3) {
         HEAP32[$3 + 108 >> 2] = 2;
         break label$16;
        }
        if ($12 & 1) {
         HEAP32[$3 + 108 >> 2] = 0;
         break label$16;
        }
        HEAP32[$3 + 108 >> 2] = 1;
       }
       HEAP32[$3 + 120 >> 2] = 0;
       HEAP32[$3 + 124 >> 2] = 1071644672;
       HEAP32[$3 + 112 >> 2] = 0;
       HEAP32[$3 + 116 >> 2] = 1071644672;
       break label$2;
      }
      HEAP32[$2 + 180 >> 2] = $3;
      HEAP32[$2 + 176 >> 2] = $0;
      arLog(3, 4904, $2 + 176 | 0);
      break label$6;
     }
     $12 = $5 | $12;
     while (1) {
      get_buff($2 + 2304 | 0, $7);
      $5 = ($3 << 5) + $4 | 0;
      HEAP32[$2 + 60 >> 2] = $5 + 40;
      HEAP32[$2 + 56 >> 2] = $5 + 32;
      HEAP32[$2 + 52 >> 2] = $5 + 24;
      HEAP32[$2 + 48 >> 2] = $5 + 16;
      if ((sscanf($2 + 2304 | 0, 5571, $2 + 48 | 0) | 0) != 4) {
       HEAP32[$2 + 32 >> 2] = $0;
       HEAP32[$2 + 36 >> 2] = $10 + 1;
       arLog(3, 7285, $2 + 32 | 0);
       break label$6;
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) != 3) {
       continue;
      }
      break;
     }
     arUtilMatInv($8, $4 + 112 | 0);
     $6 = HEAPF64[$4 + 8 >> 3];
     $9 = $6 * -.5;
     HEAPF64[$2 + 2616 >> 3] = $9;
     HEAPF64[$2 + 2608 >> 3] = $9;
     HEAPF64[$2 + 2600 >> 3] = $9;
     $6 = $6 * .5;
     HEAPF64[$2 + 2592 >> 3] = $6;
     HEAPF64[$2 + 2584 >> 3] = $6;
     HEAPF64[$2 + 2576 >> 3] = $6;
     HEAPF64[$2 + 2568 >> 3] = $6;
     HEAPF64[$2 + 2560 >> 3] = $9;
     $13 = HEAPF64[$4 + 104 >> 3];
     $14 = HEAPF64[$4 + 88 >> 3];
     $15 = HEAPF64[$4 + 80 >> 3];
     $16 = HEAPF64[$4 + 72 >> 3];
     $17 = HEAPF64[$4 + 56 >> 3];
     $18 = HEAPF64[$4 + 48 >> 3];
     $19 = HEAPF64[$4 + 40 >> 3];
     $20 = HEAPF64[$4 + 24 >> 3];
     $21 = HEAPF64[$8 >> 3];
     $3 = 0;
     while (1) {
      if (($3 | 0) != 4) {
       $5 = Math_imul($3, 24) + $4 | 0;
       $8 = ($2 + 2560 | 0) + ($3 << 4) | 0;
       $9 = HEAPF64[$8 >> 3];
       $6 = HEAPF64[$8 + 8 >> 3];
       HEAPF64[$5 + 224 >> 3] = $13 + ($9 * $15 + $6 * $14);
       HEAPF64[$5 + 216 >> 3] = $16 + ($9 * $18 + $6 * $17);
       HEAPF64[$5 + 208 >> 3] = $19 + ($21 * $9 + $20 * $6);
       $3 = $3 + 1 | 0;
       continue;
      }
      break;
     }
     $10 = $10 + 1 | 0;
     $3 = HEAP32[$2 + 248 >> 2];
     continue;
    }
    break;
   }
   fclose($7);
   dlfree($11);
   $3 = 0;
  }
  global$0 = $2 + 2624 | 0;
  return $3;
 }
 arLog(3, 3786, 0);
 exit(1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    label$4 : {
     label$5 : {
      if (($2 | 0) == 85) {
       $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
       break label$5;
      }
      if (($2 + -49 & 255) >>> 0 <= 8) {
       $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
       break label$5;
      }
      $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, 25558);
      $2 = HEAP32[$4 + 4 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$3 + 12 >> 2] = $2;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $3 + 8 | 0)) {
       $4 = $0 + 8 | 0;
       $2 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($4);
       $1 = $0;
       while (1) {
        $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($1);
        HEAP32[$3 + 16 >> 2] = $0;
        if (!$0) {
         break label$4;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $3 + 16 | 0);
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($1, 69)) {
         continue;
        }
        break;
       }
       $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($3 + 16 | 0, $1, $2);
       $2 = $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($1 + 368 | 0, $3 + 16 | 0);
       break label$2;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
     }
     if ($2) {
      break label$3;
     }
    }
    $0 = 0;
    break label$1;
   }
   $1 = $0;
  }
  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($1, $2);
 }
 global$0 = $3 + 32 | 0;
 return $0;
}
function pattern_match($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 label$1 : {
  label$2 : {
   if (!(($3 | 0) > 0 ? $0 : 0)) {
    HEAP32[$4 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = -1074790400;
    break label$2;
   }
   if ($1 >>> 0 <= 1) {
    break label$1;
   }
  }
  return -1;
 }
 label$4 : {
  label$5 : {
   label$6 : {
    label$7 : {
     if ($1 - 1) {
      $1 = Math_imul($3, $3);
      $9 = dlmalloc(Math_imul($1, 12));
      if (!$9) {
       break label$4;
      }
      $11 = Math_imul($1, 3);
      $1 = 0;
      while (1) {
       if (($1 | 0) != ($11 | 0)) {
        $7 = (HEAPU8[$1 + $2 | 0] ^ 255) + $7 | 0;
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      }
      $10 = ($7 >>> 0) / ($11 >>> 0) | 0;
      $7 = 0;
      $1 = 0;
      while (1) {
       if (($1 | 0) != ($11 | 0)) {
        $8 = (HEAPU8[$1 + $2 | 0] ^ 255) - $10 | 0;
        HEAP32[$9 + ($1 << 2) >> 2] = $8;
        $1 = $1 + 1 | 0;
        $7 = Math_imul($8, $8) + $7 | 0;
        continue;
       }
       break;
      }
      $14 = Math_sqrt(+($7 | 0));
      if ($14 / (+($3 | 0) * 1.7320508) < 15) {
       break label$6;
      }
      $18 = HEAP32[$0 >> 2];
      $7 = 0;
      $8 = -1;
      $10 = -1;
      $12 = -1;
      while (1) {
       if (($7 | 0) < ($18 | 0)) {
        $1 = HEAP32[$0 + 8 >> 2];
        label$15 : {
         while (1) {
          label$17 : {
           $12 = $12 + 1 | 0;
           $15 = $12 << 2;
           $2 = HEAP32[$15 + $1 >> 2];
           if ($2 >>> 0 > 2) {
            break label$17;
           }
           switch ($2 - 1 | 0) {
           case 1:
            break label$15;
           case 0:
            break label$17;
           default:
            continue;
           }
          }
          break;
         }
         $19 = HEAP32[$0 + 16 >> 2];
         $3 = 0;
         while (1) {
          if (($3 | 0) == 4) {
           break label$15;
          }
          $16 = $3 + $15 | 0;
          $2 = 0;
          $1 = 0;
          while (1) {
           if (($1 | 0) != ($11 | 0)) {
            $20 = $2;
            $2 = $1 << 2;
            $2 = $20 + Math_imul(HEAP32[$2 + HEAP32[HEAP32[$0 + 12 >> 2] + ($16 << 2) >> 2] >> 2], HEAP32[$2 + $9 >> 2]) | 0;
            $1 = $1 + 1 | 0;
            continue;
           }
           break;
          }
          $17 = +($2 | 0) / HEAPF64[$19 + ($16 << 3) >> 3] / $14;
          $1 = $17 > $13;
          $13 = $1 ? $17 : $13;
          $10 = $1 ? $12 : $10;
          $8 = $1 ? $3 : $8;
          $3 = $3 + 1 | 0;
          continue;
         }
        }
        $7 = $7 + 1 | 0;
        continue;
       }
       break;
      }
      HEAP32[$5 >> 2] = $8;
      HEAP32[$4 >> 2] = $10;
      HEAPF64[$6 >> 3] = $13;
      dlfree($9);
      break label$7;
     }
     $9 = Math_imul($3, $3);
     $11 = dlmalloc($9 << 2);
     if (!$11) {
      break label$4;
     }
     $1 = 0;
     while (1) {
      if (($1 | 0) != ($9 | 0)) {
       $7 = (HEAPU8[$1 + $2 | 0] ^ 255) + $7 | 0;
       $1 = $1 + 1 | 0;
       continue;
      }
      break;
     }
     $10 = ($7 >>> 0) / ($9 >>> 0) | 0;
     $7 = 0;
     $1 = 0;
     while (1) {
      if (($1 | 0) != ($9 | 0)) {
       $8 = (HEAPU8[$1 + $2 | 0] ^ 255) - $10 | 0;
       HEAP32[$11 + ($1 << 2) >> 2] = $8;
       $1 = $1 + 1 | 0;
       $7 = Math_imul($8, $8) + $7 | 0;
       continue;
      }
      break;
     }
     $14 = Math_sqrt(+($7 | 0));
     if ($14 / +($3 | 0) < 15) {
      break label$5;
     }
     $18 = HEAP32[$0 >> 2];
     $7 = 0;
     $8 = -1;
     $10 = -1;
     $12 = -1;
     while (1) {
      if (($7 | 0) < ($18 | 0)) {
       $1 = HEAP32[$0 + 8 >> 2];
       label$27 : {
        while (1) {
         label$29 : {
          $12 = $12 + 1 | 0;
          $15 = $12 << 2;
          $2 = HEAP32[$15 + $1 >> 2];
          if ($2 >>> 0 > 2) {
           break label$29;
          }
          switch ($2 - 1 | 0) {
          case 1:
           break label$27;
          case 0:
           break label$29;
          default:
           continue;
          }
         }
         break;
        }
        $19 = HEAP32[$0 + 24 >> 2];
        $3 = 0;
        while (1) {
         if (($3 | 0) == 4) {
          break label$27;
         }
         $16 = $3 + $15 | 0;
         $2 = 0;
         $1 = 0;
         while (1) {
          if (($1 | 0) != ($9 | 0)) {
           $20 = $2;
           $2 = $1 << 2;
           $2 = $20 + Math_imul(HEAP32[$2 + HEAP32[HEAP32[$0 + 20 >> 2] + ($16 << 2) >> 2] >> 2], HEAP32[$2 + $11 >> 2]) | 0;
           $1 = $1 + 1 | 0;
           continue;
          }
          break;
         }
         $17 = +($2 | 0) / HEAPF64[$19 + ($16 << 3) >> 3] / $14;
         $1 = $17 > $13;
         $13 = $1 ? $17 : $13;
         $10 = $1 ? $12 : $10;
         $8 = $1 ? $3 : $8;
         $3 = $3 + 1 | 0;
         continue;
        }
       }
       $7 = $7 + 1 | 0;
       continue;
      }
      break;
     }
     HEAP32[$5 >> 2] = $8;
     HEAP32[$4 >> 2] = $10;
     HEAPF64[$6 >> 3] = $13;
     dlfree($11);
    }
    return 0;
   }
   HEAP32[$4 >> 2] = 0;
   HEAP32[$5 >> 2] = 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = -1074790400;
   dlfree($9);
   return -2;
  }
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = -1074790400;
  dlfree($11);
  return -2;
 }
 arLog(3, 1511, 0);
 exit(1);
 abort();
}
function check_rotation($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 label$1 : {
  label$2 : {
   $6 = HEAPF64[$0 >> 3];
   $16 = HEAPF64[$0 + 32 >> 3];
   $11 = HEAPF64[$0 + 8 >> 3];
   $14 = HEAPF64[$0 + 24 >> 3];
   $2 = $6 * $16 - $11 * $14;
   $21 = HEAPF64[$0 + 40 >> 3];
   $9 = HEAPF64[$0 + 16 >> 3];
   $8 = $11 * $21 - $9 * $16;
   $5 = $9 * $14 - $6 * $21;
   $1 = Math_sqrt($2 * $2 + ($8 * $8 + $5 * $5));
   label$3 : {
    if ($1 == 0) {
     break label$3;
    }
    $7 = $2 / $1;
    $2 = $5 / $1;
    $10 = $6 * $2;
    $1 = $8 / $1;
    $15 = $11 * $1;
    $4 = $10 - $15;
    label$4 : {
     if ($4 != 0) {
      $12 = $11;
      $8 = $6;
      $5 = $2;
      $3 = $1;
      $2 = $9;
      break label$4;
     }
     $13 = $6 * $7 - $9 * $1 != 0;
     $8 = $13 ? $6 : $9;
     $5 = $13 ? $7 : $2;
     $10 = $8 * $5;
     $12 = $13 ? $9 : $11;
     $3 = $13 ? $1 : $7;
     $15 = $12 * $3;
     $4 = $10 - $15;
     $20 = $13 ? 1 : 2;
     $7 = $13 ? $2 : $1;
     $2 = $13 ? $11 : $6;
    }
    if ($4 == 0) {
     break label$3;
    }
    $17 = ($12 * $7 - $2 * $5) / $4;
    $1 = $6 * $14 + $11 * $16 + $9 * $21;
    $1 = $1 < 0 ? -$1 : $1;
    $22 = (Math_sqrt($1 + 1) + Math_sqrt(1 - $1)) * .5;
    $18 = $22 * $5 / $4;
    $1 = $8 * $7 - $2 * $3;
    $2 = $15 - $10;
    $4 = $1 / $2;
    $10 = $22 * $3 / $2;
    $9 = $17 * $18 + $4 * $10;
    $8 = $17 * $17 + $4 * $4 + 1;
    $2 = $9 * $9 - $8 * ($18 * $18 + $10 * $10 + -1);
    if ($2 < 0) {
     break label$3;
    }
    $2 = Math_sqrt($2);
    $1 = (-$9 - $2) / $8;
    $11 = $10 + $4 * $1;
    $6 = $18 + $17 * $1;
    $8 = ($2 - $9) / $8;
    $10 = $10 + $4 * $8;
    $4 = $18 + $17 * $8;
    $20 = $20 + -1 | 0;
    label$6 : {
     if ($20 >>> 0 <= 1) {
      $2 = $5;
      $18 = $4;
      $9 = $8;
      $17 = $6;
      $8 = $1;
      $1 = $7;
      if ($20 - 1) {
       break label$6;
      }
      $2 = $3;
      $3 = $7;
      $18 = $9;
      $9 = $10;
      $10 = $4;
      $17 = $8;
      $8 = $11;
      $11 = $6;
      $1 = $5;
      break label$6;
     }
     $2 = $7;
     $18 = $4;
     $9 = $10;
     $10 = $8;
     $17 = $6;
     $8 = $11;
     $11 = $1;
     $1 = $5;
    }
    $20 = 0;
    $6 = $1;
    $7 = $14 * $1;
    $4 = $16 * $3;
    $1 = $7 - $4;
    label$8 : {
     if ($1 != 0) {
      $12 = $16;
      $19 = $14;
      $5 = $6;
      $15 = $3;
      break label$8;
     }
     $13 = $14 * $2 - $21 * $3 != 0;
     $19 = $13 ? $14 : $21;
     $5 = $13 ? $2 : $6;
     $7 = $19 * $5;
     $12 = $13 ? $21 : $16;
     $15 = $13 ? $3 : $2;
     $4 = $12 * $15;
     $1 = $7 - $4;
     $20 = $13 ? 1 : 2;
     $2 = $13 ? $6 : $3;
     $21 = $13 ? $16 : $14;
    }
    if ($1 == 0) {
     break label$3;
    }
    $14 = ($12 * $2 - $21 * $5) / $1;
    $16 = $22 * $5 / $1;
    $5 = $4 - $7;
    $6 = ($19 * $2 - $21 * $15) / $5;
    $7 = $22 * $15 / $5;
    $4 = $14 * $16 + $6 * $7;
    $1 = $14 * $14 + $6 * $6 + 1;
    $5 = $4 * $4 - $1 * ($16 * $16 + $7 * $7 + -1);
    if ($5 < 0) {
     break label$3;
    }
    $2 = Math_sqrt($5);
    $12 = (-$4 - $2) / $1;
    $5 = $7 + $6 * $12;
    $3 = $16 + $14 * $12;
    $1 = ($2 - $4) / $1;
    $2 = $7 + $6 * $1;
    $19 = $16 + $14 * $1;
    $7 = $19;
    $20 = $20 + -1 | 0;
    label$10 : {
     if ($20 >>> 0 <= 1) {
      $4 = $1;
      $6 = $3;
      $1 = $12;
      if ($20 - 1) {
       break label$10;
      }
      $7 = $4;
      $4 = $2;
      $2 = $19;
      $6 = $1;
      $1 = $5;
      $5 = $3;
      break label$10;
     }
     $4 = $2;
     $2 = $1;
     $6 = $3;
     $1 = $5;
     $5 = $12;
    }
    $3 = $17 * $6 + $8 * $1 + $11 * $5;
    $15 = $3 < 0 ? -$3 : $3;
    $3 = $17 * $7 + $8 * $4 + $11 * $2;
    $19 = $3 < 0 ? -$3 : $3;
    label$12 : {
     label$13 : {
      label$14 : {
       $3 = $18 * $7 + $9 * $4 + $10 * $2;
       $12 = $3 < 0 ? -$3 : $3;
       $3 = $18 * $6 + $9 * $1 + $10 * $5;
       $3 = $3 < 0 ? -$3 : $3;
       if (!!($12 < $3)) {
        if (!!($12 < $19)) {
         if (!($12 < $15)) {
          break label$14;
         }
         HEAPF64[$0 + 40 >> 3] = $2;
         HEAPF64[$0 + 32 >> 3] = $4;
         HEAPF64[$0 + 24 >> 3] = $7;
         break label$1;
        }
        HEAPF64[$0 + 16 >> 3] = $11;
        HEAPF64[$0 + 8 >> 3] = $8;
        HEAPF64[$0 >> 3] = $17;
        if (!($19 < $15)) {
         break label$12;
        }
        break label$2;
       }
       if (!($3 < $19)) {
        break label$13;
       }
       if (!($3 < $15)) {
        break label$14;
       }
       HEAPF64[$0 + 40 >> 3] = $5;
       HEAPF64[$0 + 32 >> 3] = $1;
       HEAPF64[$0 + 24 >> 3] = $6;
       break label$1;
      }
      HEAPF64[$0 + 40 >> 3] = $5;
      HEAPF64[$0 + 32 >> 3] = $1;
      HEAPF64[$0 + 24 >> 3] = $6;
      HEAPF64[$0 + 16 >> 3] = $11;
      HEAPF64[$0 + 8 >> 3] = $8;
      HEAPF64[$0 >> 3] = $17;
      return;
     }
     HEAPF64[$0 + 16 >> 3] = $11;
     HEAPF64[$0 + 8 >> 3] = $8;
     HEAPF64[$0 >> 3] = $17;
     if (!!($19 < $15)) {
      break label$2;
     }
    }
    HEAPF64[$0 + 40 >> 3] = $5;
    HEAPF64[$0 + 32 >> 3] = $1;
    HEAPF64[$0 + 24 >> 3] = $6;
   }
   return;
  }
  HEAPF64[$0 + 40 >> 3] = $2;
  HEAPF64[$0 + 32 >> 3] = $4;
  HEAPF64[$0 + 24 >> 3] = $7;
  return;
 }
 HEAPF64[$0 + 16 >> 3] = $10;
 HEAPF64[$0 + 8 >> 3] = $9;
 HEAPF64[$0 >> 3] = $18;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 85)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 72 | 0, $0);
    if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 72 | 0)) {
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 - -64 | 0, 27796);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($1 + 72 | 0, $1)) {
     $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($1 + 56 | 0, $1 + 72 | 0, 9);
     $3 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 48 | 0);
     $2 = $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 32 | 0, $0, HEAP32[$1 + 56 >> 2]);
     $4 = $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 16 | 0, $0 + 4 | 0, HEAP32[$1 + 60 >> 2]);
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 8 | 0, $0);
     $5 = HEAP32[$1 + 12 >> 2];
     HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 52 >> 2] = $5;
     $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($4);
     $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($2);
     $2 = 0;
     if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($3)) {
      break label$1;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
     HEAP32[$1 + 32 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 32 | 0, $3);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0);
    HEAP32[$1 + 32 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1 + 32 | 0, $1 + 72 | 0);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   HEAP32[$1 + 32 >> 2] = $3;
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$1 + 16 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (!$3) {
    break label$1;
   }
   $2 = $1 + 16 | 0;
   $3 = $1 + 32 | 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$2 >> 2], HEAP32[$3 >> 2]);
   HEAP32[$1 + 16 >> 2] = $2;
   break label$1;
  }
  $2 = 0;
 }
 global$0 = $1 + 80 | 0;
 return $2;
}
function icpPointRobust($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $13 = global$0 - 160 | 0;
 global$0 = $13;
 $6 = -1;
 $8 = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if (($8 | 0) < 4) {
   break label$1;
  }
  $9 = HEAPF64[$0 + 128 >> 3] * +($8 | 0);
  label$2 : {
   if (Math_abs($9) < 2147483648) {
    $5 = ~~$9;
    break label$2;
   }
   $5 = -2147483648;
  }
  $14 = dlmalloc(Math_imul($8, 96));
  if (!$14) {
   arLog(3, 1737, 0);
   break label$1;
  }
  $12 = dlmalloc($8 << 4);
  if (!$12) {
   arLog(3, 1737, 0);
   dlfree($14);
   break label$1;
  }
  $6 = $8 << 3;
  $18 = dlmalloc($6);
  if (!$18) {
   arLog(3, 1737, 0);
   dlfree($14);
   dlfree($12);
   $6 = -1;
   break label$1;
  }
  $15 = dlmalloc($6);
  if ($15) {
   $5 = ($5 | 0) > 3 ? $5 + -1 | 0 : 3;
   $8 = 0;
   while (1) {
    $6 = 0;
    if (($8 | 0) == 3) {
     $16 = ($5 << 3) + $15 | 0;
     $2 = 0;
     label$10 : {
      while (1) {
       arUtilMatMul($0, $3, $13 + 48 | 0);
       $6 = 0;
       while (1) {
        $5 = HEAP32[$1 + 8 >> 2];
        if (($6 | 0) < ($5 | 0)) {
         if ((icpGetU_from_X_by_MatX2U($13 + 144 | 0, $13 + 48 | 0, HEAP32[$1 + 4 >> 2] + Math_imul($6, 24) | 0) | 0) <= -1) {
          break label$10;
         }
         $5 = $6 << 4;
         $8 = $5 + HEAP32[$1 >> 2] | 0;
         $11 = HEAPF64[$8 + 8 >> 3];
         $17 = HEAPF64[$13 + 152 >> 3];
         $9 = HEAPF64[$8 >> 3] - HEAPF64[$13 + 144 >> 3];
         HEAPF64[$5 + $12 >> 3] = $9;
         $11 = $11 - $17;
         HEAPF64[($5 | 8) + $12 >> 3] = $11;
         $5 = $6 << 3;
         $9 = $9 * $9 + $11 * $11;
         HEAPF64[$5 + $15 >> 3] = $9;
         HEAPF64[$5 + $18 >> 3] = $9;
         $6 = $6 + 1 | 0;
         continue;
        }
        break;
       }
       qsort($15, $5);
       $17 = Math_max(HEAPF64[$16 >> 3] * 4, 16);
       $9 = $17 / 6;
       $5 = HEAP32[$1 + 8 >> 2];
       $6 = 0;
       $19 = 0;
       while (1) {
        if (($6 | 0) < ($5 | 0)) {
         $11 = $9;
         $20 = HEAPF64[($6 << 3) + $15 >> 3];
         if (!($20 > $17)) {
          $11 = 1 - $20 / $17;
          $11 = $9 * (1 - $11 * ($11 * $11));
         }
         $6 = $6 + 1 | 0;
         $19 = $19 + $11;
         continue;
        }
        break;
       }
       label$17 : {
        $9 = $19 / +($5 | 0);
        if ($9 < HEAPF64[$0 + 104 >> 3] | ($9 / $7 > HEAPF64[$0 + 112 >> 3] ? !(!$2 | $9 < HEAPF64[$0 + 120 >> 3] ^ 1) : 0)) {
         break label$17;
        }
        $6 = 0;
        $8 = 0;
        if (HEAP32[$0 + 96 >> 2] == ($2 | 0)) {
         break label$17;
        }
        while (1) {
         if (($6 | 0) < ($5 | 0)) {
          $7 = HEAPF64[($6 << 3) + $18 >> 3];
          if (!!($7 <= $17)) {
           $10 = Math_imul($8, 6) << 3;
           $5 = $10 + $14 | 0;
           if ((icpGetJ_U_S($5, $0, $3, HEAP32[$1 + 4 >> 2] + Math_imul($6, 24) | 0) | 0) <= -1) {
            break label$10;
           }
           $7 = 1 - $7 / $17;
           $7 = $7 * $7;
           HEAPF64[$5 >> 3] = $7 * HEAPF64[$5 >> 3];
           $10 = ($10 | 8) + $14 | 0;
           HEAPF64[$10 >> 3] = $7 * HEAPF64[$10 >> 3];
           HEAPF64[$5 + 16 >> 3] = $7 * HEAPF64[$5 + 16 >> 3];
           HEAPF64[$5 + 24 >> 3] = $7 * HEAPF64[$5 + 24 >> 3];
           HEAPF64[$5 + 32 >> 3] = $7 * HEAPF64[$5 + 32 >> 3];
           HEAPF64[$5 + 40 >> 3] = $7 * HEAPF64[$5 + 40 >> 3];
           HEAPF64[$5 + 48 >> 3] = $7 * HEAPF64[$5 + 48 >> 3];
           HEAPF64[$5 + 56 >> 3] = $7 * HEAPF64[$5 + 56 >> 3];
           $10 = $5 - -64 | 0;
           HEAPF64[$10 >> 3] = $7 * HEAPF64[$10 >> 3];
           HEAPF64[$5 + 72 >> 3] = $7 * HEAPF64[$5 + 72 >> 3];
           HEAPF64[$5 + 80 >> 3] = $7 * HEAPF64[$5 + 80 >> 3];
           HEAPF64[$5 + 88 >> 3] = $7 * HEAPF64[$5 + 88 >> 3];
           $5 = ($8 << 3) + $12 | 0;
           $10 = $6 << 4;
           HEAPF64[$5 >> 3] = $7 * HEAPF64[$10 + $12 >> 3];
           HEAPF64[$5 + 8 >> 3] = $7 * HEAPF64[($10 | 8) + $12 >> 3];
           $8 = $8 + 2 | 0;
           $5 = HEAP32[$1 + 8 >> 2];
          }
          $6 = $6 + 1 | 0;
          continue;
         }
         break;
        }
        if (($8 | 0) <= 5) {
         break label$10;
        }
        if ((icpGetDeltaS($13, $12, $14, $8) | 0) <= -1) {
         break label$10;
        }
        icpUpdateMat($3, $13);
        $2 = $2 + 1 | 0;
        $7 = $9;
        continue;
       }
       break;
      }
      HEAPF64[$4 >> 3] = $9;
      dlfree($14);
      dlfree($12);
      dlfree($18);
      dlfree($15);
      $6 = 0;
      break label$1;
     }
     dlfree($14);
     dlfree($12);
     dlfree($18);
     dlfree($15);
     $6 = -1;
     break label$1;
    } else {
     while (1) {
      if (($6 | 0) != 4) {
       $10 = $6 << 3;
       $16 = $8 << 5;
       $21 = $10 + ($16 + $3 | 0) | 0;
       $16 = $10 + ($2 + $16 | 0) | 0;
       $10 = HEAP32[$16 + 4 >> 2];
       HEAP32[$21 >> 2] = HEAP32[$16 >> 2];
       HEAP32[$21 + 4 >> 2] = $10;
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     }
     $8 = $8 + 1 | 0;
     continue;
    }
   }
  }
  arLog(3, 1737, 0);
  dlfree($14);
  dlfree($12);
  dlfree($18);
  $6 = -1;
 }
 global$0 = $13 + 160 | 0;
 return $6;
}
function __floatscan($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 label$1 : {
  if ($2 >>> 0 <= 2) {
   $2 = $2 << 2;
   $8 = HEAP32[$2 + 15820 >> 2];
   $9 = HEAP32[$2 + 15808 >> 2];
   while (1) {
    $2 = HEAP32[$1 + 4 >> 2];
    label$4 : {
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$4;
     }
     $2 = __shgetc($1);
    }
    if (isspace($2)) {
     continue;
    }
    break;
   }
   $3 = $2 + -43 | 0;
   label$6 : {
    if ($3 >>> 0 > 2) {
     $5 = 1;
     break label$6;
    }
    $5 = 1;
    if (!($3 - 1)) {
     break label$6;
    }
    $5 = ($2 | 0) == 45 ? -1 : 1;
    $2 = HEAP32[$1 + 4 >> 2];
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$6;
    }
    $2 = __shgetc($1);
   }
   $3 = 0;
   label$9 : {
    label$10 : {
     while (1) {
      if (HEAP8[$3 + 15738 | 0] == ($2 | 32)) {
       label$13 : {
        if ($3 >>> 0 > 6) {
         break label$13;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$1 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$13;
        }
        $2 = __shgetc($1);
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) != 8) {
        continue;
       }
       break label$10;
      }
      break;
     }
     if (($3 | 0) != 3) {
      if (($3 | 0) == 8) {
       break label$10;
      }
      if ($3 >>> 0 < 4 | 1) {
       break label$9;
      }
      if (($3 | 0) == 8) {
       break label$10;
      }
     }
     $2 = HEAP32[$1 + 104 >> 2];
     if ($2) {
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     if ($3 >>> 0 < 4 | 1) {
      break label$10;
     }
     while (1) {
      if ($2) {
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
      }
      $3 = $3 + -1 | 0;
      if ($3 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    __extendsftf2($4, Math_fround(Math_fround($5 | 0) * Math_fround(infinity)));
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $6 = HEAP32[$4 >> 2];
    $7 = HEAP32[$4 + 4 >> 2];
    break label$1;
   }
   label$19 : {
    label$20 : {
     label$21 : {
      if ($3) {
       break label$21;
      }
      $3 = 0;
      while (1) {
       if (HEAP8[$3 + 15747 | 0] != ($2 | 32)) {
        break label$21;
       }
       label$23 : {
        if ($3 >>> 0 > 1) {
         break label$23;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$1 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$23;
        }
        $2 = __shgetc($1);
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$20;
     }
     if ($3 >>> 0 > 3) {
      break label$19;
     }
     label$25 : {
      switch ($3 - 1 | 0) {
      case 0:
      case 1:
       break label$19;
      case 2:
       break label$20;
      default:
       break label$25;
      }
     }
     label$26 : {
      if (($2 | 0) != 48) {
       break label$26;
      }
      $3 = HEAP32[$1 + 4 >> 2];
      label$27 : {
       if ($3 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$1 + 4 >> 2] = $3 + 1;
        $3 = HEAPU8[$3 | 0];
        break label$27;
       }
       $3 = __shgetc($1);
      }
      if (($3 | 32) == 120) {
       hexfloat($4 + 16 | 0, $1, $9, $8, $5);
       $3 = HEAP32[$4 + 24 >> 2];
       $5 = HEAP32[$4 + 28 >> 2];
       $6 = HEAP32[$4 + 16 >> 2];
       $7 = HEAP32[$4 + 20 >> 2];
       break label$1;
      }
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$26;
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     decfloat($4 + 32 | 0, $1, $2, $9, $8, $5);
     $3 = HEAP32[$4 + 40 >> 2];
     $5 = HEAP32[$4 + 44 >> 2];
     $6 = HEAP32[$4 + 32 >> 2];
     $7 = HEAP32[$4 + 36 >> 2];
     break label$1;
    }
    label$30 : {
     $2 = HEAP32[$1 + 4 >> 2];
     label$31 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$31;
      }
      $2 = __shgetc($1);
     }
     if (($2 | 0) == 40) {
      $3 = 1;
      break label$30;
     }
     $3 = 0;
     $5 = 2147450880;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$1;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     break label$1;
    }
    while (1) {
     $2 = HEAP32[$1 + 4 >> 2];
     label$35 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$35;
      }
      $2 = __shgetc($1);
     }
     if (!($2 + -97 >>> 0 >= 26 ? !($2 + -48 >>> 0 < 10 | $2 + -65 >>> 0 < 26 | ($2 | 0) == 95) : 0)) {
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    }
    $3 = 0;
    $5 = 2147450880;
    if (($2 | 0) == 41) {
     break label$1;
    }
   }
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
   }
   HEAP32[8356] = 28;
   __shlim($1, 0, 0);
  }
  $3 = 0;
  $5 = 0;
 }
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $7;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $5;
 global$0 = $4 + 48 | 0;
}
function try_realloc_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1 : {
  label$2 : {
   $6 = HEAP32[$0 + 4 >> 2];
   $2 = $6 & 3;
   if (($2 | 0) == 1) {
    break label$2;
   }
   $7 = HEAP32[8384];
   if ($7 >>> 0 > $0 >>> 0) {
    break label$2;
   }
   $3 = $6 & -8;
   $5 = $3 + $0 | 0;
   if ($5 >>> 0 <= $0 >>> 0) {
    break label$2;
   }
   $4 = HEAP32[$5 + 4 >> 2];
   if (!($4 & 1)) {
    break label$2;
   }
   if (!$2) {
    $2 = 0;
    if ($1 >>> 0 < 256) {
     break label$1;
    }
    if ($3 >>> 0 >= $1 + 4 >>> 0) {
     $2 = $0;
     if ($3 - $1 >>> 0 <= HEAP32[8500] << 1 >>> 0) {
      break label$1;
     }
    }
    $2 = 0;
    break label$1;
   }
   if ($3 >>> 0 >= $1 >>> 0) {
    $2 = $3 - $1 | 0;
    if ($2 >>> 0 >= 16) {
     HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
     $1 = $0 + $1 | 0;
     HEAP32[$1 + 4 >> 2] = $2 | 3;
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
     dispose_chunk($1, $2);
    }
    return $0;
   }
   $2 = 0;
   if (HEAP32[8386] == ($5 | 0)) {
    $3 = $3 + HEAP32[8383] | 0;
    if ($3 >>> 0 <= $1 >>> 0) {
     break label$1;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $2 = $0 + $1 | 0;
    $1 = $3 - $1 | 0;
    HEAP32[$2 + 4 >> 2] = $1 | 1;
    HEAP32[8383] = $1;
    HEAP32[8386] = $2;
    return $0;
   }
   if (HEAP32[8385] == ($5 | 0)) {
    $3 = $3 + HEAP32[8382] | 0;
    if ($3 >>> 0 < $1 >>> 0) {
     break label$1;
    }
    $4 = $3 - $1 | 0;
    label$9 : {
     if ($4 >>> 0 >= 16) {
      HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = $4 | 1;
      $2 = $0 + $3 | 0;
      HEAP32[$2 >> 2] = $4;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
      break label$9;
     }
     HEAP32[$0 + 4 >> 2] = $3 | $6 & 1 | 2;
     $1 = $0 + $3 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     $4 = 0;
     $1 = 0;
    }
    HEAP32[8385] = $1;
    HEAP32[8382] = $4;
    return $0;
   }
   if ($4 & 2) {
    break label$1;
   }
   $8 = $3 + ($4 & -8) | 0;
   if ($8 >>> 0 < $1 >>> 0) {
    break label$1;
   }
   label$11 : {
    if ($4 >>> 0 <= 255) {
     $2 = HEAP32[$5 + 12 >> 2];
     $3 = HEAP32[$5 + 8 >> 2];
     $4 = $4 >>> 3;
     $9 = ($4 << 3) + 33560 | 0;
     if (HEAP32[$3 + 12 >> 2] != ($5 | 0) | $7 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($9 | 0) : 0) {
      break label$2;
     }
     if (($2 | 0) == ($3 | 0)) {
      wasm2js_i32$0 = 33520, wasm2js_i32$1 = HEAP32[8380] & __wasm_rotl_i32($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$11;
     }
     if (HEAP32[$2 + 8 >> 2] != ($5 | 0) | $7 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($9 | 0) : 0) {
      break label$2;
     }
     HEAP32[$3 + 12 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $3;
     break label$11;
    }
    $10 = HEAP32[$5 + 24 >> 2];
    $3 = HEAP32[$5 + 12 >> 2];
    label$16 : {
     if (($5 | 0) != ($3 | 0)) {
      $2 = HEAP32[$5 + 8 >> 2];
      if ($7 >>> 0 > $2 >>> 0 | HEAP32[$2 + 12 >> 2] != ($5 | 0) | HEAP32[$3 + 8 >> 2] != ($5 | 0)) {
       break label$2;
      }
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$16;
     }
     label$18 : {
      $4 = $5 + 20 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       break label$18;
      }
      $4 = $5 + 16 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       break label$18;
      }
      $3 = 0;
      break label$16;
     }
     while (1) {
      $9 = $4;
      $3 = $2;
      $4 = $3 + 20 | 0;
      $2 = HEAP32[$4 >> 2];
      if ($2) {
       continue;
      }
      $4 = $3 + 16 | 0;
      $2 = HEAP32[$3 + 16 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     if ($7 >>> 0 > $9 >>> 0) {
      break label$2;
     }
     HEAP32[$9 >> 2] = 0;
    }
    if (!$10) {
     break label$11;
    }
    $2 = HEAP32[$5 + 28 >> 2];
    $4 = ($2 << 2) + 33824 | 0;
    label$20 : {
     if (HEAP32[$4 >> 2] == ($5 | 0)) {
      HEAP32[$4 >> 2] = $3;
      if ($3) {
       break label$20;
      }
      wasm2js_i32$0 = 33524, wasm2js_i32$1 = HEAP32[8381] & __wasm_rotl_i32($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$11;
     }
     if (HEAPU32[8384] > $10 >>> 0) {
      break label$2;
     }
     HEAP32[(HEAP32[$10 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $10 >> 2] = $3;
     if (!$3) {
      break label$11;
     }
    }
    $4 = HEAP32[8384];
    if ($4 >>> 0 > $3 >>> 0) {
     break label$2;
    }
    HEAP32[$3 + 24 >> 2] = $10;
    $2 = HEAP32[$5 + 16 >> 2];
    if ($2) {
     if ($4 >>> 0 > $2 >>> 0) {
      break label$2;
     }
     HEAP32[$3 + 16 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    $2 = HEAP32[$5 + 20 >> 2];
    if (!$2) {
     break label$11;
    }
    if (HEAPU32[8384] > $2 >>> 0) {
     break label$2;
    }
    HEAP32[$3 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $3;
   }
   $2 = $8 - $1 | 0;
   if ($2 >>> 0 <= 15) {
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $8 | 2;
    $1 = $0 + $8 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
    return $0;
   }
   HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
   $1 = $0 + $1 | 0;
   HEAP32[$1 + 4 >> 2] = $2 | 3;
   $3 = $0 + $8 | 0;
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 1;
   dispose_chunk($1, $2);
   return $0;
  }
  abort();
  abort();
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 22192);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 12 >> 2] = $3;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($1 + 24 | 0, $0 + 360 | 0, 0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($2);
  if (!$3) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   $2 = $0 + 8 | 0;
   $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
     HEAP32[$1 + 24 >> 2] = $5;
     if (!$5) {
      break label$1;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 24 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 24 | 0, $0, $3);
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 36 | 0, $1 + 24 | 0);
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 20 >> 2] = $4;
  if (!$4) {
   $4 = 0;
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($1 + 24 | 0, $0, $1 + 20 | 0, $1 + 24 | 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 36 | 0, $1 + 24 | 0);
 }
 global$0 = $1 + 48 | 0;
 return $4;
}
function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 wasm2js_scratch_store_f64(+$0);
 $5 = wasm2js_scratch_load_i32(1) | 0;
 $9 = wasm2js_scratch_load_i32(0) | 0;
 label$1 : {
  label$2 : {
   $4 = $5;
   $5 = $4;
   $7 = $4 & 2147483647;
   label$3 : {
    if ($7 >>> 0 <= 1074752122) {
     if (($5 & 1048575) == 598523) {
      break label$3;
     }
     if ($7 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6.077100506506192e-11;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
     $3 = -2;
     break label$1;
    }
    if ($7 >>> 0 <= 1075594811) {
     if ($7 >>> 0 <= 1075183036) {
      if (($7 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
      $3 = -3;
      break label$1;
     }
     if (($7 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
     $3 = -4;
     break label$1;
    }
    if ($7 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $10 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $2 = $0 + $10 * -1.5707963267341256;
   $8 = $10 * 6.077100506506192e-11;
   $0 = $2 - $8;
   HEAPF64[$1 >> 3] = $0;
   $4 = $7 >>> 20;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $9 = ($4 - ($3 >>> 20 & 2047) | 0) < 17;
   if (Math_abs($10) < 2147483648) {
    $3 = ~~$10;
   } else {
    $3 = -2147483648;
   }
   label$14 : {
    if ($9) {
     break label$14;
    }
    $8 = $2;
    $0 = $10 * 6.077100506303966e-11;
    $2 = $2 - $0;
    $8 = $10 * 2.0222662487959506e-21 - ($8 - $2 - $0);
    $0 = $2 - $8;
    HEAPF64[$1 >> 3] = $0;
    $5 = $4;
    wasm2js_scratch_store_f64(+$0);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($5 - ($4 >>> 20 & 2047) | 0) < 50) {
     break label$14;
    }
    $8 = $2;
    $0 = $10 * 2.0222662487111665e-21;
    $2 = $2 - $0;
    $8 = $10 * 8.4784276603689e-32 - ($8 - $2 - $0);
    $0 = $2 - $8;
    HEAPF64[$1 >> 3] = $0;
   }
   HEAPF64[$1 + 8 >> 3] = $2 - $0 - $8;
   break label$1;
  }
  if ($7 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = $0;
   break label$1;
  }
  $5 = $4 & 1048575 | 1096810496;
  wasm2js_scratch_store_i32(0, $9 | 0);
  wasm2js_scratch_store_i32(1, $5 | 0);
  $0 = +wasm2js_scratch_load_f64();
  while (1) {
   $5 = ($6 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $11 = ~~$0;
   } else {
    $11 = -2147483648;
   }
   $2 = +($11 | 0);
   HEAPF64[$5 >> 3] = $2;
   $0 = ($0 - $2) * 16777216;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue;
   }
   break;
  }
  HEAPF64[$6 + 32 >> 3] = $0;
  label$20 : {
   if ($0 != 0) {
    $3 = 2;
    break label$20;
   }
   $5 = 1;
   while (1) {
    $3 = $5;
    $5 = $3 + -1 | 0;
    if (HEAPF64[($6 + 16 | 0) + ($3 << 3) >> 3] == 0) {
     continue;
    }
    break;
   }
  }
  $3 = __rem_pio2_large($6 + 16 | 0, $6, ($7 >>> 20) + -1046 | 0, $3 + 1 | 0);
  $0 = HEAPF64[$6 >> 3];
  if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
   HEAPF64[$1 >> 3] = -$0;
   HEAPF64[$1 + 8 >> 3] = -HEAPF64[$6 + 8 >> 3];
   $3 = 0 - $3 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $0;
  $4 = HEAP32[$6 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $4;
 }
 global$0 = $6 + 48 | 0;
 return $3;
}
function QRM($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 $17 = global$0 - 16 | 0;
 global$0 = $17;
 $2 = -1;
 label$1 : {
  $9 = HEAP32[$0 + 4 >> 2];
  if (($9 | 0) < 2 | HEAP32[$0 + 8 >> 2] != ($9 | 0) | HEAP32[$1 + 4 >> 2] != ($9 | 0)) {
   break label$1;
  }
  $18 = arVecAlloc($9);
  if (!$18) {
   break label$1;
  }
  $22 = $9 + -1 | 0;
  HEAP32[$17 + 12 >> 2] = $22;
  HEAP32[$17 + 8 >> 2] = HEAP32[$18 >> 2] + 8;
  if ((arVecTridiagonalize($0, $1, $17 + 8 | 0) | 0) <= -1) {
   arVecFree($18);
   break label$1;
  }
  $14 = HEAP32[$18 >> 2];
  $4 = $14;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $5 = $22;
  label$3 : while (1) {
   $10 = $5;
   $2 = $5;
   if (($2 | 0) < 1) {
    $4 = 0;
    label$5 : while (1) {
     if (($4 | 0) != ($22 | 0)) {
      $10 = HEAP32[$1 >> 2];
      $16 = $10 + ($4 << 3) | 0;
      $6 = HEAPF64[$16 >> 3];
      $3 = $6;
      $11 = $4 + 1 | 0;
      $2 = $11;
      $5 = $4;
      while (1) {
       if (($2 | 0) < ($9 | 0)) {
        $8 = HEAPF64[$10 + ($2 << 3) >> 3];
        $12 = $8 > $3;
        $3 = $12 ? $8 : $3;
        $5 = $12 ? $2 : $5;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      }
      HEAPF64[$10 + ($5 << 3) >> 3] = $6;
      HEAPF64[$16 >> 3] = $3;
      $2 = Math_imul($4, $9) << 3;
      $4 = HEAP32[$0 >> 2];
      $2 = $2 + $4 | 0;
      $5 = $4 + (Math_imul($5, $9) << 3) | 0;
      $4 = 0;
      while (1) if (($4 | 0) == ($9 | 0)) {
       $4 = $11;
       continue label$5;
      } else {
       $10 = HEAP32[$5 >> 2];
       $12 = HEAP32[$5 + 4 >> 2];
       $16 = HEAP32[$2 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$5 + 4 >> 2] = $16;
       HEAP32[$2 >> 2] = $10;
       HEAP32[$2 + 4 >> 2] = $12;
       $4 = $4 + 1 | 0;
       $2 = $2 + 8 | 0;
       $5 = $5 + 8 | 0;
       continue;
      }
     }
     break;
    }
    arVecFree($18);
    $2 = 0;
    break label$1;
   }
   while (1) {
    $11 = $2;
    if (($2 | 0) >= 1) {
     $4 = $11 << 3;
     $5 = HEAP32[$1 >> 2];
     $2 = $11 + -1 | 0;
     if (Math_abs(HEAPF64[$4 + $14 >> 3]) > (Math_abs(HEAPF64[$5 + ($2 << 3) >> 3]) + Math_abs(HEAPF64[$4 + $5 >> 3])) * 1e-6) {
      continue;
     }
    }
    break;
   }
   $5 = $10 + -1 | 0;
   if (($10 | 0) == ($11 | 0)) {
    continue;
   }
   $24 = $10 << 3;
   $25 = $24 + $14 | 0;
   $26 = $11 << 3;
   $32 = $26 + $14 | 0;
   $2 = 0;
   while (1) {
    if (($2 | 0) == 100) {
     continue label$3;
    }
    $16 = $2 + 1 | 0;
    $19 = HEAP32[$1 >> 2];
    $27 = $24 + $19 | 0;
    $6 = HEAPF64[$27 >> 3];
    $3 = HEAPF64[$25 >> 3];
    $7 = $3 * $3;
    $28 = ($5 << 3) + $19 | 0;
    $3 = (HEAPF64[$28 >> 3] - $6) * .5;
    $8 = Math_sqrt($7 + $3 * $3);
    $8 = HEAPF64[$19 + $26 >> 3] - $6 + $7 / ($3 + ($3 < 0 ? -$8 : $8));
    $7 = HEAPF64[$32 + 8 >> 3];
    $4 = $11;
    while (1) {
     if (($4 | 0) < ($10 | 0)) {
      $3 = Math_abs($8);
      label$17 : {
       if (!!($3 >= Math_abs($7))) {
        if (!($3 > 1e-16)) {
         $6 = 1;
         $3 = 0;
         break label$17;
        }
        $3 = -$7 / $8;
        $6 = 1 / Math_sqrt($3 * $3 + 1);
        $3 = $3 * $6;
        break label$17;
       }
       $6 = -$8 / $7;
       $3 = 1 / Math_sqrt($6 * $6 + 1);
       $6 = $6 * $3;
      }
      $23 = $4 << 3;
      $2 = $23 + $19 | 0;
      $13 = HEAPF64[$2 >> 3];
      $12 = $4 + 1 | 0;
      $15 = $12 << 3;
      $21 = $15 + $19 | 0;
      $29 = HEAPF64[$21 >> 3];
      $30 = $13 - $29;
      $33 = $13;
      $15 = $14 + $15 | 0;
      $13 = $3 * ($3 * $30 + ($6 + $6) * HEAPF64[$15 >> 3]);
      HEAPF64[$2 >> 3] = $33 - $13;
      HEAPF64[$21 >> 3] = $29 + $13;
      if (($4 | 0) > ($11 | 0)) {
       $2 = $14 + $23 | 0;
       HEAPF64[$2 >> 3] = $6 * HEAPF64[$2 >> 3] - $7 * $3;
      }
      $13 = HEAPF64[$15 >> 3];
      HEAPF64[$15 >> 3] = $13 + $3 * ($6 * $30 - $13 * ($3 + $3));
      $21 = Math_imul($9, $12);
      $34 = Math_imul($4, $9);
      $2 = 0;
      while (1) {
       if (($2 | 0) != ($9 | 0)) {
        $20 = HEAP32[$0 >> 2];
        $31 = $20 + ($2 + $34 << 3) | 0;
        $8 = HEAPF64[$31 >> 3];
        $20 = $20 + ($2 + $21 << 3) | 0;
        $7 = HEAPF64[$20 >> 3];
        HEAPF64[$31 >> 3] = $6 * $8 - $3 * $7;
        HEAPF64[$20 >> 3] = $3 * $8 + $6 * $7;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      }
      $2 = ($4 | 0) >= ($5 | 0);
      $4 = $12;
      if ($2) {
       continue;
      }
      $8 = HEAPF64[$15 >> 3];
      $2 = $14 + $23 | 0;
      $7 = HEAPF64[$2 + 16 >> 3];
      HEAPF64[$2 + 16 >> 3] = $6 * $7;
      $7 = $7 * -$3;
      continue;
     }
     break;
    }
    $2 = $16;
    if (Math_abs(HEAPF64[$25 >> 3]) > (Math_abs(HEAPF64[$28 >> 3]) + Math_abs(HEAPF64[$27 >> 3])) * 1e-6) {
     continue;
    }
    break;
   }
   continue;
  }
 }
 global$0 = $17 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAP32[$1 >> 2];
 label$1 : {
  if (HEAPU8[$4 + 4 | 0] != 36) {
   break label$1;
  }
  $4 = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  if ($4 + -2 >>> 0 > 3) {
   break label$1;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0 + 368 | 0, $3 + 28 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 67)) {
   $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73);
   $4 = 0;
   $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
   $7 = ($5 & 255) + -49 | 0;
   if ($7 >>> 0 > 4 | ($7 | 0) == 3) {
    break label$2;
   }
   HEAP32[$3 + 24 >> 2] = ($5 & 255) + -48;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   if ($2) {
    HEAP8[$2 | 0] = 1;
   }
   label$5 : {
    if (!$6) {
     break label$5;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $2)) {
     break label$5;
    }
    break label$2;
   }
   HEAP8[$3 + 23 | 0] = 0;
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $3 + 23 | 0, $3 + 24 | 0);
   break label$2;
  }
  $4 = 0;
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 68) {
   break label$2;
  }
  $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
  $5 = ($6 & 255) + -48 | 0;
  if ($5 >>> 0 > 5 | !(1 << $5 & 39)) {
   break label$2;
  }
  HEAP32[$3 + 16 >> 2] = ($6 & 255) + -48;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
  if ($2) {
   HEAP8[$2 | 0] = 1;
  }
  HEAP8[$3 + 15 | 0] = 1;
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $3 + 15 | 0, $3 + 16 | 0);
 }
 global$0 = $3 + 32 | 0;
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73)) {
   break label$1;
  }
  if ($1) {
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($0 + 288 | 0);
  }
  $4 = $0 + 288 | 0;
  $5 = $0 + 8 | 0;
  $7 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($5);
  while (1) {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
    if ($1) {
     $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($2 + 16 | 0, $4);
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
     HEAP32[$2 + 12 >> 2] = $3;
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($4, $6);
     if ($3) {
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 12 | 0);
      HEAP32[$2 + 8 >> 2] = $3;
      if (HEAPU8[$3 + 4 | 0] == 28) {
       $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($2, $3);
       wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $2 + 8 | 0);
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($6);
      continue;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($6);
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
    HEAP32[$2 + 16 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 16 | 0);
    continue;
   }
   break;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 16 | 0, $0, $7);
  $8 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 368 | 0, $2 + 16 | 0);
 }
 global$0 = $2 - -64 | 0;
 return $8;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
      $3 = $1 + -74 | 0;
      if ($3 >>> 0 > 2) {
       if (($1 | 0) != 88) {
        break label$5;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
       if (!$1) {
        break label$2;
       }
       $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69);
       global$0 = $2 + 16 | 0;
       return $0 ? $1 : 0;
      }
      switch ($3 - 1 | 0) {
      case 1:
       break label$4;
      case 0:
       break label$5;
      default:
       break label$3;
      }
     }
     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
     break label$1;
    }
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 90) {
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0);
     if (!$1) {
      break label$2;
     }
     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69) ? $1 : 0;
     break label$1;
    }
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   $1 = $0 + 8 | 0;
   $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1);
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0);
     HEAP32[$2 + 12 >> 2] = $4;
     if (!$4) {
      break label$2;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($1, $2 + 12 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2, $0, $3);
   $0 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 368 | 0, $2);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function arVecTridiagonalize($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 $3 = -1;
 label$1 : {
  $5 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) != HEAP32[$0 + 4 >> 2] | HEAP32[$1 + 4 >> 2] != ($5 | 0) | (HEAP32[$2 + 4 >> 2] + 1 | 0) != ($5 | 0)) {
   break label$1;
  }
  $14 = $5 + -2 | 0;
  label$2 : while (1) {
   label$3 : {
    $8 = $6;
    if (($6 | 0) < ($14 | 0)) {
     $4 = $8 << 3;
     $3 = $4 + HEAP32[$1 >> 2] | 0;
     $11 = HEAP32[$0 >> 2] + (Math_imul($5, $8) << 3) | 0;
     $6 = $11 + $4 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$3 + 4 >> 2] = $9;
     $6 = $8 + 1 | 0;
     $12 = $6 << 3;
     $13 = $12 + $11 | 0;
     HEAP32[$7 + 8 >> 2] = $13;
     $9 = ($8 ^ -1) + $5 | 0;
     HEAP32[$7 + 12 >> 2] = $9;
     $10 = arVecHousehold($7 + 8 | 0);
     HEAPF64[$4 + HEAP32[$2 >> 2] >> 3] = $10;
     $4 = $6;
     if ($10 == 0) {
      continue;
     }
     label$5 : while (1) {
      $10 = 0;
      $3 = $6;
      if (($4 | 0) >= ($5 | 0)) {
       break label$3;
      }
      while (1) if ($3 >>> 0 >= $4 >>> 0) {
       $15 = Math_imul($4, $5);
       $3 = $4;
       while (1) {
        if (($3 | 0) < ($5 | 0)) {
         $10 = $10 + HEAPF64[HEAP32[$0 >> 2] + ($3 + $15 << 3) >> 3] * HEAPF64[$11 + ($3 << 3) >> 3];
         $3 = $3 + 1 | 0;
         continue;
        }
        break;
       }
       HEAPF64[HEAP32[$1 >> 2] + ($4 << 3) >> 3] = $10;
       $4 = $4 + 1 | 0;
       continue label$5;
      } else {
       $10 = $10 + HEAPF64[HEAP32[$0 >> 2] + (Math_imul($3, $5) + $4 << 3) >> 3] * HEAPF64[$11 + ($3 << 3) >> 3];
       $3 = $3 + 1 | 0;
       continue;
      }
     }
    }
    label$11 : {
     label$12 : {
      if (($5 | 0) >= 2) {
       $4 = HEAP32[$1 >> 2];
       $3 = $14 << 3;
       $6 = $4 + $3 | 0;
       $1 = HEAP32[$0 >> 2];
       $8 = Math_imul($5, $14);
       $11 = $1 + ($8 + $14 << 3) | 0;
       $9 = HEAP32[$11 + 4 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
       HEAP32[$6 + 4 >> 2] = $9;
       $2 = $3 + HEAP32[$2 >> 2] | 0;
       $3 = $5 + -1 | 0;
       $6 = ($8 + $3 << 3) + $1 | 0;
       $8 = HEAP32[$6 + 4 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$2 + 4 >> 2] = $8;
       break label$12;
      }
      if (($5 | 0) != 1) {
       break label$11;
      }
      $4 = HEAP32[$1 >> 2];
      $1 = HEAP32[$0 >> 2];
      $3 = 0;
     }
     $2 = ($3 << 3) + $4 | 0;
     $1 = (Math_imul($3, $5) + $3 << 3) + $1 | 0;
     $4 = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = $4;
    }
    $4 = $5;
    while (1) {
     if (($4 | 0) < 1) {
      $3 = 0;
      break label$1;
     }
     $1 = $4 + -1 | 0;
     $6 = HEAP32[$0 >> 2] + (Math_imul($1, $5) << 3) | 0;
     label$16 : {
      if (($4 | 0) > ($14 | 0)) {
       break label$16;
      }
      $8 = $5 - $4 | 0;
      $11 = $6 + ($4 << 3) | 0;
      $2 = $4;
      while (1) {
       if (($2 | 0) >= ($5 | 0)) {
        break label$16;
       }
       HEAP32[$7 + 12 >> 2] = $8;
       HEAP32[$7 + 4 >> 2] = $8;
       HEAP32[$7 + 8 >> 2] = $11;
       $9 = Math_imul($2, $5);
       HEAP32[$7 >> 2] = HEAP32[$0 >> 2] + ($9 + $4 << 3);
       $10 = arVecInnerproduct($7 + 8 | 0, $7);
       $3 = $4;
       while (1) {
        if (($3 | 0) < ($5 | 0)) {
         $12 = HEAP32[$0 >> 2] + ($3 + $9 << 3) | 0;
         HEAPF64[$12 >> 3] = HEAPF64[$12 >> 3] - $10 * HEAPF64[$6 + ($3 << 3) >> 3];
         $3 = $3 + 1 | 0;
         continue;
        }
        break;
       }
       $2 = $2 + 1 | 0;
       continue;
      }
     }
     $3 = 0;
     while (1) {
      if (($3 | 0) < ($5 | 0)) {
       $2 = $6 + ($3 << 3) | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $3 = $3 + 1 | 0;
       continue;
      }
      break;
     }
     $2 = $6 + ($1 << 3) | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 1072693248;
     $4 = $1;
     continue;
    }
   }
   HEAP32[$7 + 12 >> 2] = $9;
   HEAP32[$7 + 4 >> 2] = $9;
   HEAP32[$7 + 8 >> 2] = $13;
   HEAP32[$7 >> 2] = $12 + HEAP32[$1 >> 2];
   $10 = arVecInnerproduct($7 + 8 | 0, $7) * .5;
   $4 = $5;
   label$22 : while (1) {
    $4 = $4 + -1 | 0;
    if (($4 | 0) <= ($8 | 0)) {
     continue label$2;
    }
    $9 = HEAP32[$1 >> 2];
    $3 = $4 << 3;
    $12 = $9 + $3 | 0;
    $16 = HEAPF64[$3 + $11 >> 3];
    $17 = HEAPF64[$12 >> 3] - $10 * $16;
    HEAPF64[$12 >> 3] = $17;
    $12 = Math_imul($4, $5);
    $3 = $4;
    while (1) {
     if (($3 | 0) >= ($5 | 0)) {
      continue label$22;
     }
     $13 = HEAP32[$0 >> 2] + ($3 + $12 << 3) | 0;
     $15 = $13;
     $18 = HEAPF64[$13 >> 3];
     $13 = $3 << 3;
     HEAPF64[$15 >> 3] = $18 - ($16 * HEAPF64[$13 + $9 >> 3] + $17 * HEAPF64[$11 + $13 >> 3]);
     $3 = $3 + 1 | 0;
     continue;
    }
   }
  }
 }
 global$0 = $7 + 16 | 0;
 return $3;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___remove_28std____2____hash_const_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $5 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const(31944);
 $4 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$1 + 4 >> 2], $5);
 $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $4) >> 2];
 while (1) {
  $3 = $2;
  $2 = HEAP32[$2 >> 2];
  if (($2 | 0) != ($1 | 0)) {
   continue;
  }
  break;
 }
 label$2 : {
  if (($3 | 0) != 31952) {
   if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$3 + 4 >> 2], $5) | 0) == ($4 | 0)) {
    break label$2;
   }
  }
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$2 + 4 >> 2], $5) | 0) == ($4 | 0)) {
    break label$2;
   }
  }
  wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $4), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 $2 = HEAP32[$1 >> 2];
 label$5 : {
  if (!$2) {
   break label$5;
  }
  $2 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$2 + 4 >> 2], $5);
  if (($2 | 0) == ($4 | 0)) {
   break label$5;
  }
  wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const(31944, $2), wasm2js_i32$1 = $3, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = 0;
 $3 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29(31944);
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
 std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, $1, std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20bool_29($6 + 8 | 0, std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29(31944), 1));
 global$0 = $6 + 16 | 0;
}
function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $9 = global$0 - 128 | 0;
 global$0 = $9;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!__letf2($5, $6, $7, $8, 0, 0, 0, 0)) {
     break label$3;
    }
    $10 = __fpclassifyl($5, $6, $7, $8);
    $19 = $4 >>> 16;
    $15 = $19 & 32767;
    if (($15 | 0) == 32767) {
     break label$3;
    }
    if ($10) {
     break label$2;
    }
   }
   __multf3($9 + 16 | 0, $1, $2, $3, $4, $5, $6, $7, $8);
   $1 = HEAP32[$9 + 16 >> 2];
   $2 = HEAP32[$9 + 20 >> 2];
   $3 = HEAP32[$9 + 24 >> 2];
   $4 = HEAP32[$9 + 28 >> 2];
   __divtf3($9, $1, $2, $3, $4, $1, $2, $3, $4);
   $3 = HEAP32[$9 + 8 >> 2];
   $4 = HEAP32[$9 + 12 >> 2];
   $7 = HEAP32[$9 >> 2];
   $8 = HEAP32[$9 + 4 >> 2];
   break label$1;
  }
  $12 = $4 & 65535 | $15 << 16;
  $13 = $12;
  $11 = $3;
  $14 = $7;
  $17 = $8 >>> 16 & 32767;
  $12 = $8 & 65535 | $17 << 16;
  if ((__letf2($1, $2, $11, $13, $5, $6, $7, $12) | 0) <= 0) {
   if (__letf2($1, $2, $11, $13, $5, $6, $14, $12)) {
    $7 = $1;
    $8 = $2;
    break label$1;
   }
   __multf3($9 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
   $3 = HEAP32[$9 + 120 >> 2];
   $4 = HEAP32[$9 + 124 >> 2];
   $7 = HEAP32[$9 + 112 >> 2];
   $8 = HEAP32[$9 + 116 >> 2];
   break label$1;
  }
  if ($15) {
   $8 = $2;
   $7 = $1;
  } else {
   __multf3($9 + 96 | 0, $1, $2, $11, $13, 0, 0, 0, 1081540608);
   $7 = HEAP32[$9 + 108 >> 2];
   $13 = $7;
   $11 = HEAP32[$9 + 104 >> 2];
   $15 = ($7 >>> 16) + -120 | 0;
   $8 = HEAP32[$9 + 100 >> 2];
   $7 = HEAP32[$9 + 96 >> 2];
  }
  if (!$17) {
   __multf3($9 + 80 | 0, $5, $6, $14, $12, 0, 0, 0, 1081540608);
   $5 = HEAP32[$9 + 92 >> 2];
   $12 = $5;
   $14 = HEAP32[$9 + 88 >> 2];
   $17 = ($12 >>> 16) + -120 | 0;
   $6 = HEAP32[$9 + 84 >> 2];
   $5 = HEAP32[$9 + 80 >> 2];
  }
  $10 = $11;
  $21 = $14;
  $16 = $14;
  $14 = $10 - $14 | 0;
  $13 = $13 & 65535 | 65536;
  $20 = $12 & 65535 | 65536;
  $12 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
  $10 = ($13 - ($20 + ($10 >>> 0 < $16 >>> 0) | 0) | 0) - ($14 >>> 0 < $12 >>> 0) | 0;
  $16 = $14 - $12 | 0;
  $18 = ($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? $16 >>> 0 <= 4294967295 ? 0 : 1 : 0;
  $14 = $7 - $5 | 0;
  $12 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
  if (($15 | 0) > ($17 | 0)) {
   while (1) {
    label$11 : {
     if ($18) {
      if (!($14 | $16 | ($10 | $12))) {
       __multf3($9 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
       $3 = HEAP32[$9 + 40 >> 2];
       $4 = HEAP32[$9 + 44 >> 2];
       $7 = HEAP32[$9 + 32 >> 2];
       $8 = HEAP32[$9 + 36 >> 2];
       break label$1;
      }
      $11 = $12 >>> 31;
      $13 = 0;
      $7 = $16;
      $10 = $10 << 1 | $7 >>> 31;
      $7 = $7 << 1;
      $8 = $10;
      break label$11;
     }
     $10 = $13 << 1 | $11 >>> 31;
     $11 = $11 << 1;
     $13 = $10;
     $14 = $7;
     $12 = $8;
     $7 = $8 >>> 31;
     $8 = 0;
    }
    $11 = $7 | $11;
    $7 = $21;
    $10 = $11 - $7 | 0;
    $13 = $8 | $13;
    $16 = $13 - (($11 >>> 0 < $7 >>> 0) + $20 | 0) | 0;
    $7 = $14;
    $8 = $12 << 1 | $7 >>> 31;
    $7 = $7 << 1;
    $12 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
    $14 = $16 - ($10 >>> 0 < $12 >>> 0) | 0;
    $16 = $10 - $12 | 0;
    $10 = $14;
    $18 = ($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? $16 >>> 0 <= 4294967295 ? 0 : 1 : 0;
    $14 = $7 - $5 | 0;
    $12 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
    $15 = $15 + -1 | 0;
    if (($15 | 0) > ($17 | 0)) {
     continue;
    }
    break;
   }
   $15 = $17;
  }
  label$14 : {
   if (!$18) {
    break label$14;
   }
   $7 = $14;
   $11 = $16;
   $8 = $12;
   $13 = $10;
   if ($7 | $11 | ($8 | $10)) {
    break label$14;
   }
   __multf3($9 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
   $3 = HEAP32[$9 + 56 >> 2];
   $4 = HEAP32[$9 + 60 >> 2];
   $7 = HEAP32[$9 + 48 >> 2];
   $8 = HEAP32[$9 + 52 >> 2];
   break label$1;
  }
  if (($13 | 0) == 65535 & $11 >>> 0 <= 4294967295 | $13 >>> 0 < 65535) {
   while (1) {
    $3 = $8 >>> 31;
    $15 = $15 + -1 | 0;
    $10 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1;
    $8 = $10;
    $10 = $13 << 1 | $11 >>> 31;
    $11 = $11 << 1 | $3;
    $13 = $10;
    if (($10 | 0) == 65536 & $11 >>> 0 < 0 | $10 >>> 0 < 65536) {
     continue;
    }
    break;
   }
  }
  $1 = $19 & 32768;
  if (($15 | 0) <= 0) {
   __multf3($9 - -64 | 0, $7, $8, $11, $13 & 65535 | ($1 | $15 + 120) << 16, 0, 0, 0, 1065811968);
   $3 = HEAP32[$9 + 72 >> 2];
   $4 = HEAP32[$9 + 76 >> 2];
   $7 = HEAP32[$9 + 64 >> 2];
   $8 = HEAP32[$9 + 68 >> 2];
   break label$1;
  }
  $3 = $11;
  $4 = $13 & 65535 | ($1 | $15) << 16;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
 global$0 = $9 + 128 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 21324);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $3;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1 + 32 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 21327);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 32 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1 + 32 | 0);
 }
 global$0 = $1 + 48 | 0;
 return $4;
}
function arParamObserv2Ideal($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 $5 = $5 + -1 | 0;
 if ($5 >>> 0 <= 3) {
  label$2 : {
   label$3 : {
    switch ($5 - 1 | 0) {
    case 2:
     $9 = HEAPF64[$0 + 16 >> 3];
     $25 = $9 * 6;
     $11 = HEAPF64[$0 + 24 >> 3];
     $26 = $11 * 6;
     $16 = HEAPF64[$0 + 56 >> 3];
     $17 = HEAPF64[$0 + 40 >> 3];
     $13 = ($2 - $16) / $17;
     $2 = $13 * $13;
     $18 = HEAPF64[$0 + 48 >> 3];
     $19 = HEAPF64[$0 + 32 >> 3];
     $10 = ($1 - $18) / $19;
     $1 = $10 * $10;
     $20 = HEAPF64[$0 + 64 >> 3];
     $14 = HEAPF64[$0 + 8 >> 3];
     $15 = HEAPF64[$0 >> 3];
     $27 = $11 + $11;
     $21 = $9 + $9;
     $5 = 1;
     $6 = $13;
     $7 = $10;
     while (1) {
      label$8 : {
       label$9 : {
        if (!($2 != 0 | $1 != 0)) {
         $7 = 0;
         break label$9;
        }
        $8 = $2 + $1;
        $22 = $15 * $8 + 1 + $8 * ($14 * $8);
        $23 = $1 * 3;
        $24 = $2 * $23;
        $28 = $9 * ($2 + $2 + $8) + $6 * $22;
        $7 = $7 - ($11 * ($8 + ($1 + $1)) + ($6 * ($21 * $7) + $7 * $22) - $10) / ($26 * $7 + ($21 * $6 + ($15 * ($2 + $23) + 1 + $14 * ($2 * $2 + ($1 * ($1 * 5) + $24)))));
        $8 = $27 * $7;
        $6 = $6 - ($28 + $6 * $8 - $13) / ($25 * $6 + ($15 * ($1 + $2 * 3) + 1 + $14 * ($2 * ($2 * 5) + ($1 * $1 + $24))) + $8);
        if (($5 | 0) != 4) {
         break label$8;
        }
        $12 = $6;
       }
       HEAPF64[$3 >> 3] = $18 + $19 * $7 / $20;
       $2 = $16 + $17 * $12 / $20;
       break label$2;
      }
      $5 = $5 + 1 | 0;
      $2 = $6 * $6;
      $1 = $7 * $7;
      continue;
     }
    default:
     $10 = HEAPF64[$0 + 24 >> 3] / 1e8;
     $8 = $10 * 3;
     $9 = HEAPF64[$0 >> 3];
     $1 = $1 - $9;
     $6 = $2 - HEAPF64[$0 + 8 >> 3];
     $7 = $1 * $1 + $6 * $6;
     $11 = Math_sqrt($7);
     $2 = $11;
     $5 = 1;
     while (1) {
      $12 = 0;
      label$12 : {
       if ($2 != 0) {
        $12 = $2 - ($2 * (1 - $10 * $7) - $11) / (1 - $8 * $7);
        $6 = $6 * $12 / $2;
        $1 = $1 * $12 / $2;
        if (($5 | 0) != 3) {
         break label$12;
        }
        $13 = $1;
        $12 = $6;
       }
       HEAPF64[$3 >> 3] = $9 + $13 / HEAPF64[$0 + 16 >> 3];
       $2 = $12 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
       break label$2;
      }
      $5 = $5 + 1 | 0;
      $7 = $1 * $1 + $6 * $6;
      $2 = Math_sqrt($7);
      continue;
     }
    case 0:
     $10 = HEAPF64[$0 + 24 >> 3] / 1e8;
     $8 = $10 * 3;
     $9 = HEAPF64[$0 + 32 >> 3] / 1e8 / 1e5;
     $11 = $9 * 5;
     $14 = HEAPF64[$0 >> 3];
     $6 = $1 - $14;
     $7 = $2 - HEAPF64[$0 + 8 >> 3];
     $2 = $6 * $6 + $7 * $7;
     $15 = Math_sqrt($2);
     $1 = $15;
     $5 = 1;
     while (1) {
      label$15 : {
       if ($1 != 0) {
        $2 = $1 - ($1 * (1 - $10 * $2 - $2 * ($9 * $2)) - $15) / (1 - $8 * $2 - $2 * ($11 * $2));
        $7 = $7 * $2 / $1;
        $6 = $6 * $2 / $1;
        if (($5 | 0) != 3) {
         break label$15;
        }
        $13 = $6;
        $12 = $7;
       }
       HEAPF64[$3 >> 3] = $14 + $13 / HEAPF64[$0 + 16 >> 3];
       $2 = $12 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
       break label$2;
      }
      $5 = $5 + 1 | 0;
      $2 = $6 * $6 + $7 * $7;
      $1 = Math_sqrt($2);
      continue;
     }
    case 1:
     break label$3;
    }
   }
   $10 = HEAPF64[$0 + 32 >> 3] / 1e8;
   $8 = $10 * 3;
   $9 = HEAPF64[$0 + 40 >> 3] / 1e8 / 1e5;
   $11 = $9 * 5;
   $14 = HEAPF64[$0 >> 3];
   $6 = ($1 - $14) / HEAPF64[$0 + 24 >> 3];
   $7 = $2 - HEAPF64[$0 + 8 >> 3];
   $2 = $6 * $6 + $7 * $7;
   $15 = Math_sqrt($2);
   $1 = $15;
   $5 = 1;
   while (1) {
    label$18 : {
     if ($1 != 0) {
      $2 = $1 - ($1 * (1 - $10 * $2 - $2 * ($9 * $2)) - $15) / (1 - $8 * $2 - $2 * ($11 * $2));
      $7 = $7 * $2 / $1;
      $6 = $6 * $2 / $1;
      if (($5 | 0) != 3) {
       break label$18;
      }
      $13 = $6;
      $12 = $7;
     }
     HEAPF64[$3 >> 3] = $14 + $13 / HEAPF64[$0 + 16 >> 3];
     $2 = $12 / HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 8 >> 3];
     break label$2;
    }
    $5 = $5 + 1 | 0;
    $2 = $6 * $6 + $7 * $7;
    $1 = Math_sqrt($2);
    continue;
   }
  }
  HEAPF64[$4 >> 3] = $2;
 }
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___find_int__28int_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($0);
 $4 = HEAP32[$1 >> 2];
 label$1 : {
  label$2 : {
   $5 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const($0);
   if (!$5) {
    break label$2;
   }
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($4, $5);
   $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $6) >> 2];
   if (!$2) {
    break label$2;
   }
   while (1) {
    $2 = HEAP32[$2 >> 2];
    if (!$2) {
     break label$2;
    }
    if (HEAP32[$2 + 4 >> 2] != ($4 | 0)) {
     if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$2 + 4 >> 2], $5) | 0) != ($6 | 0)) {
      break label$2;
     }
    }
    if (HEAP32[$2 + 4 >> 2] != ($4 | 0)) {
     continue;
    }
    if (!std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arController__20const__2c_20int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29($0), $2 + 8 | 0, $1)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($3 + 8 | 0, $2) >> 2];
   break label$1;
  }
  $2 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___end_28_29();
  HEAP32[$3 + 8 >> 2] = $2;
 }
 global$0 = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 >>> 0 <= 9) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 22572);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 20 >> 2] = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 22575);
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0);
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
  HEAP32[$1 + 28 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  $3 = $2;
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
  HEAP32[$1 + 24 >> 2] = $3;
  if ($3) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 28 | 0, $1 + 24 | 0);
  } else {
   $3 = 0;
  }
 }
 global$0 = $1 + 48 | 0;
 return $3;
}
function getMarkerInfo($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 256 | 0;
 global$0 = $2;
 HEAP32[$2 + 252 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 252 | 0), HEAP32[wasm2js_i32$0 + 248 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 240 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 248 | 0, $2 + 240 | 0)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $3 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 252 | 0) + 216 >> 2];
  if (HEAP32[$3 + 44 >> 2] <= ($1 | 0)) {
   $0 = HEAP32[7840];
   break label$1;
  }
  $0 = 0;
  $1 = ($1 | 0) < 0 ? 31992 : ($3 + ($1 << 8) | 0) + 48 | 0;
  $3 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $5 = HEAP32[$1 + 8 >> 2];
  $6 = HEAP32[$1 + 12 >> 2];
  $7 = HEAP32[$1 + 20 >> 2];
  $8 = HEAP32[$1 + 16 >> 2];
  $9 = HEAP32[$1 + 24 >> 2];
  $10 = HEAPF64[$1 + 32 >> 3];
  $11 = HEAPF64[$1 + 40 >> 3];
  $12 = HEAPF64[$1 + 48 >> 3];
  $13 = HEAPF64[$1 + 56 >> 3];
  $14 = HEAPF64[$1 - -64 >> 3];
  $15 = HEAPF64[$1 + 72 >> 3];
  $16 = HEAPF64[$1 + 80 >> 3];
  $17 = HEAPF64[$1 + 88 >> 3];
  $18 = HEAPF64[$1 + 96 >> 3];
  $19 = HEAPF64[$1 + 104 >> 3];
  $20 = HEAPF64[$1 + 112 >> 3];
  $21 = HEAPF64[$1 + 120 >> 3];
  $22 = HEAPF64[$1 + 128 >> 3];
  $23 = HEAPF64[$1 + 136 >> 3];
  $24 = HEAPF64[$1 + 144 >> 3];
  $25 = HEAPF64[$1 + 152 >> 3];
  $26 = HEAPF64[$1 + 160 >> 3];
  $27 = HEAPF64[$1 + 168 >> 3];
  $28 = HEAPF64[$1 + 176 >> 3];
  $29 = HEAPF64[$1 + 184 >> 3];
  $30 = HEAPF64[$1 + 192 >> 3];
  $31 = HEAPF64[$1 + 200 >> 3];
  $32 = HEAPF64[$1 + 208 >> 3];
  $33 = HEAPF64[$1 + 216 >> 3];
  $34 = HEAPF64[$1 + 224 >> 3];
  HEAP32[$2 + 232 >> 2] = HEAP32[$1 + 240 >> 2];
  HEAPF64[$2 + 224 >> 3] = $34;
  HEAPF64[$2 + 216 >> 3] = $33;
  HEAPF64[$2 + 208 >> 3] = $32;
  HEAPF64[$2 + 200 >> 3] = $31;
  HEAPF64[$2 + 192 >> 3] = $30;
  HEAPF64[$2 + 184 >> 3] = $29;
  HEAPF64[$2 + 176 >> 3] = $28;
  HEAPF64[$2 + 168 >> 3] = $27;
  HEAPF64[$2 + 160 >> 3] = $26;
  HEAPF64[$2 + 152 >> 3] = $25;
  HEAPF64[$2 + 144 >> 3] = $24;
  HEAPF64[$2 + 136 >> 3] = $23;
  HEAPF64[$2 + 128 >> 3] = $22;
  HEAPF64[$2 + 120 >> 3] = $21;
  HEAPF64[$2 + 112 >> 3] = $20;
  HEAPF64[$2 + 104 >> 3] = $19;
  HEAPF64[$2 + 96 >> 3] = $18;
  HEAPF64[$2 + 88 >> 3] = $17;
  HEAPF64[$2 + 80 >> 3] = $16;
  HEAPF64[$2 + 72 >> 3] = $15;
  HEAPF64[$2 - -64 >> 3] = $14;
  HEAPF64[$2 + 56 >> 3] = $13;
  HEAPF64[$2 + 48 >> 3] = $12;
  HEAPF64[$2 + 40 >> 3] = $11;
  HEAPF64[$2 + 32 >> 3] = $10;
  HEAP32[$2 + 24 >> 2] = $9;
  HEAP32[$2 + 16 >> 2] = $8;
  HEAP32[$2 + 20 >> 2] = $7;
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $6;
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $4;
  emscripten_asm_const_iii(1, 9632, $2 | 0) | 0;
 }
 global$0 = $2 + 256 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 65)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 24 | 0);
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 >>> 0 <= 9) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 0);
    $3 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 4 >> 2] = $3;
    $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($1 + 16 | 0, $1);
    $3 = HEAP32[$1 + 20 >> 2];
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$1 + 28 >> 2] = $3;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$2;
    }
    break label$1;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   if (!$3) {
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__itanium_demangle__Node__29($1 + 16 | 0, $3);
   $2 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 + 28 >> 2] = $2;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$1 + 16 >> 2] = $2;
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString__29($0 + 368 | 0, $1 + 16 | 0, $4);
 }
 global$0 = $1 + 32 | 0;
 return $2;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $4 = $2;
 label$1 : {
  if (($1 | 0) == 1) {
   $1 = 2;
  } else {
   if (!($1 + -1 & $1)) {
    break label$1;
   }
   $1 = std____2____next_prime_28unsigned_20long_29($1);
  }
  HEAP32[$4 + 12 >> 2] = $1;
 }
 $3 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const($0);
 label$4 : {
  if ($1 >>> 0 > $3 >>> 0) {
   std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____rehash_28unsigned_20long_29($0, $1);
   break label$4;
  }
  if ($1 >>> 0 >= $3 >>> 0) {
   break label$4;
  }
  $6 = std____2____is_hash_power2_28unsigned_20long_29($3);
  $5 = Math_fround(Math_ceil(Math_fround(Math_fround(HEAPU32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($0) >> 2]) / HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29($0) >> 2])));
  label$6 : {
   if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
    $1 = ~~$5 >>> 0;
    break label$6;
   }
   $1 = 0;
  }
  $4 = $2;
  if ($6) {
   $1 = $1 >>> 0 >= 2 ? 1 << 32 - Math_clz32($1 + -1 | 0) : $1;
  } else {
   $1 = std____2____next_prime_28unsigned_20long_29($1);
  }
  HEAP32[$4 + 8 >> 2] = $1;
  $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 12 | 0, $2 + 8 | 0) >> 2];
  HEAP32[$2 + 12 >> 2] = $1;
  if ($1 >>> 0 >= $3 >>> 0) {
   break label$4;
  }
  std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____rehash_28unsigned_20long_29($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $8 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $9 = $1;
    label$7 : {
     label$8 : {
      while (1) {
       label$10 : {
        if ($5 >>> 0 >= $8 >>> 0) {
         break label$10;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$10;
        }
        label$11 : {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$11;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $3 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$8;
          }
          $7 = 1;
          $6 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $3 = $6;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $3 = $6;
      $0 = 4;
      if (!$7) {
       break label$7;
      }
     }
     $0 = 3;
    }
    HEAP32[$9 + 44 >> 2] = $0;
    if ($3 & 1) {
     break label$2;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $6 = HEAP32[$0 + 12 >> 2];
  $5 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
  if (($6 | 0) < 2) {
   break label$2;
  }
  $6 = $5 + ($6 << 3) | 0;
  $5 = $0 + 24 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
    break label$2;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function setMarkerInfoVertex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $4 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($4 + 8 | 0, $4)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($4 + 12 | 0) + 216 >> 2];
  if (HEAP32[$0 + 44 >> 2] <= ($1 | 0)) {
   $0 = HEAP32[7840];
   break label$1;
  }
  $0 = ($1 | 0) < 0 ? 31992 : ($0 + ($1 << 8) | 0) + 48 | 0;
  $1 = HEAP32[8065];
  $5 = HEAP32[8064];
  HEAP32[$0 + 168 >> 2] = $5;
  HEAP32[$0 + 172 >> 2] = $1;
  $2 = HEAP32[8067];
  $13 = $2;
  $6 = HEAP32[8066];
  HEAP32[$0 + 176 >> 2] = $6;
  HEAP32[$0 + 180 >> 2] = $2;
  $2 = HEAP32[8069];
  $14 = $2;
  $7 = HEAP32[8068];
  HEAP32[$0 + 184 >> 2] = $7;
  HEAP32[$0 + 188 >> 2] = $2;
  $2 = HEAP32[8071];
  $15 = $2;
  $8 = HEAP32[8070];
  HEAP32[$0 + 192 >> 2] = $8;
  HEAP32[$0 + 196 >> 2] = $2;
  $2 = HEAP32[8073];
  $16 = $2;
  $9 = HEAP32[8072];
  HEAP32[$0 + 200 >> 2] = $9;
  HEAP32[$0 + 204 >> 2] = $2;
  $2 = HEAP32[8075];
  $17 = $2;
  $10 = HEAP32[8074];
  HEAP32[$0 + 208 >> 2] = $10;
  HEAP32[$0 + 212 >> 2] = $2;
  $2 = HEAP32[8077];
  $18 = $2;
  $11 = HEAP32[8076];
  HEAP32[$0 + 216 >> 2] = $11;
  HEAP32[$0 + 220 >> 2] = $2;
  $2 = HEAP32[8079];
  $12 = HEAP32[8078];
  HEAP32[$0 + 224 >> 2] = $12;
  HEAP32[$0 + 228 >> 2] = $2;
  wasm2js_scratch_store_i32(0, $5 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $3 = +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $7 | 0);
  wasm2js_scratch_store_i32(1, $14 | 0);
  $3 = $3 + +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $9 | 0);
  wasm2js_scratch_store_i32(1, $16 | 0);
  $3 = $3 + +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $11 | 0);
  wasm2js_scratch_store_i32(1, $18 | 0);
  wasm2js_i32$0 = $0, wasm2js_f64$0 = ($3 + +wasm2js_scratch_load_f64()) * .25, HEAPF64[wasm2js_i32$0 + 56 >> 3] = wasm2js_f64$0;
  wasm2js_scratch_store_i32(0, $6 | 0);
  wasm2js_scratch_store_i32(1, $13 | 0);
  $0 = $0 - -64 | 0;
  $3 = +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $8 | 0);
  wasm2js_scratch_store_i32(1, $15 | 0);
  $3 = $3 + +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $10 | 0);
  wasm2js_scratch_store_i32(1, $17 | 0);
  $3 = $3 + +wasm2js_scratch_load_f64();
  wasm2js_scratch_store_i32(0, $12 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  wasm2js_i32$0 = $0, wasm2js_f64$0 = ($3 + +wasm2js_scratch_load_f64()) * .25, HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $0 = 0;
 }
 global$0 = $4 + 16 | 0;
 return $0 | 0;
}
function minv($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $10 = global$0 - 2e3 | 0;
 global$0 = $10;
 label$1 : {
  if (($1 | 0) > 500) {
   break label$1;
  }
  label$2 : {
   if ($1 >>> 0 > 1) {
    while (1) if (($3 | 0) >= ($1 | 0)) {
     while (1) {
      if (($7 | 0) >= ($1 | 0)) {
       $7 = 0;
       while (1) {
        $4 = $7;
        if (($4 | 0) >= ($1 | 0)) {
         break label$2;
        }
        while (1) {
         label$10 : {
          if (($1 | 0) == ($4 | 0)) {
           $4 = $1;
           break label$10;
          }
          if (HEAP32[($4 << 2) + $10 >> 2] == ($7 | 0)) {
           break label$10;
          }
          $4 = $4 + 1 | 0;
          continue;
         }
         break;
        }
        HEAP32[($4 << 2) + $10 >> 2] = HEAP32[($7 << 2) + $10 >> 2];
        $3 = ($7 << 3) + $0 | 0;
        $4 = ($4 << 3) + $0 | 0;
        $5 = 0;
        while (1) {
         if (($5 | 0) < ($1 | 0)) {
          $8 = HEAP32[$4 >> 2];
          $6 = HEAP32[$4 + 4 >> 2];
          $11 = HEAP32[$3 + 4 >> 2];
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
          HEAP32[$4 + 4 >> 2] = $11;
          HEAP32[$3 >> 2] = $8;
          HEAP32[$3 + 4 >> 2] = $6;
          $5 = $5 + 1 | 0;
          $8 = $2 << 3;
          $3 = $8 + $3 | 0;
          $4 = $4 + $8 | 0;
          continue;
         }
         break;
        }
        $7 = $7 + 1 | 0;
        continue;
       }
      }
      $9 = 0;
      $5 = -1;
      $3 = $7;
      $8 = (Math_imul($3, $2) << 3) + $0 | 0;
      $4 = $8;
      while (1) {
       if (($1 | 0) != ($3 | 0)) {
        $12 = Math_abs(HEAPF64[$4 >> 3]);
        $6 = $9 < $12;
        $9 = $6 ? $12 : $9;
        $5 = $6 ? $3 : $5;
        $3 = $3 + 1 | 0;
        $4 = ($2 << 3) + $4 | 0;
        continue;
       }
       break;
      }
      $3 = 0;
      if (($5 | 0) == -1 | $9 <= 1e-10) {
       break label$1;
      }
      $3 = ($5 << 2) + $10 | 0;
      $4 = HEAP32[$3 >> 2];
      $6 = $3;
      $3 = ($7 << 2) + $10 | 0;
      HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$3 >> 2] = $4;
      $3 = (Math_imul($2, $5) << 3) + $0 | 0;
      $5 = 0;
      $4 = $8;
      while (1) {
       if (($1 | 0) != ($5 | 0)) {
        $6 = HEAP32[$3 >> 2];
        $11 = HEAP32[$3 + 4 >> 2];
        $13 = HEAP32[$4 + 4 >> 2];
        HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$3 + 4 >> 2] = $13;
        HEAP32[$4 >> 2] = $6;
        HEAP32[$4 + 4 >> 2] = $11;
        $5 = $5 + 1 | 0;
        $4 = $4 + 8 | 0;
        $3 = $3 + 8 | 0;
        continue;
       }
       break;
      }
      $9 = HEAPF64[$8 >> 3];
      $4 = 1;
      $3 = $8;
      while (1) {
       if (($1 | 0) != ($4 | 0)) {
        HEAPF64[$3 >> 3] = HEAPF64[$3 + 8 >> 3] / $9;
        $4 = $4 + 1 | 0;
        $3 = $3 + 8 | 0;
        continue;
       }
       break;
      }
      HEAPF64[$3 >> 3] = 1 / $9;
      $6 = 0;
      while (1) {
       if (($1 | 0) != ($6 | 0)) {
        if (($7 | 0) != ($6 | 0)) {
         $3 = (Math_imul($2, $6) << 3) + $0 | 0;
         $9 = HEAPF64[$3 >> 3];
         $4 = 1;
         $5 = $8;
         while (1) {
          if (($1 | 0) != ($4 | 0)) {
           HEAPF64[$3 >> 3] = HEAPF64[$3 + 8 >> 3] - $9 * HEAPF64[$5 >> 3];
           $5 = $5 + 8 | 0;
           $4 = $4 + 1 | 0;
           $3 = $3 + 8 | 0;
           continue;
          }
          break;
         }
         HEAPF64[$3 >> 3] = HEAPF64[$5 >> 3] * -$9;
        }
        $6 = $6 + 1 | 0;
        continue;
       }
       break;
      }
      $7 = $7 + 1 | 0;
      continue;
     }
    } else {
     HEAP32[($3 << 2) + $10 >> 2] = $3;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
   if ($1 - 1) {
    break label$1;
   }
   HEAPF64[$0 >> 3] = 1 / HEAPF64[$0 >> 3];
  }
  $3 = $0;
 }
 global$0 = $10 + 2e3 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $4 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 56 | 0);
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 48 | 0, 28596);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 20 >> 2] = $3;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 28599);
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 60 >> 2] = $2;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 32 | 0, 28606);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 12 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1 + 8 | 0)) {
   $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 28609);
   $2 = HEAP32[$1 + 44 >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 60 >> 2] = $2;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 24 | 0, 28615);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1)) {
   break label$1;
  }
  $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 40 | 0, 28618);
  $2 = HEAP32[$1 + 44 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 60 >> 2] = $2;
 }
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
 HEAP32[$1 + 40 >> 2] = $2;
 label$4 : {
  if (!$2) {
   break label$4;
  }
  $5 = $2;
  if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($4)) {
   break label$4;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $4, $1 + 40 | 0);
 }
 global$0 = $1 - -64 | 0;
 return $5;
}
function arDetectMarker2($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = 70;
 $11 = 1e6;
 if (($3 | 0) == 1) {
  $1 = ($1 | 0) / 2 | 0;
  $11 = 25e4;
  $9 = 17;
  $0 = ($0 | 0) / 2 | 0;
 }
 HEAP32[$5 >> 2] = 0;
 $12 = $2 + 1179664 | 0;
 $14 = $1 + -2 | 0;
 $15 = $0 + -2 | 0;
 $1 = 0;
 while (1) {
  label$3 : {
   if (($1 | 0) >= HEAP32[$2 + 8 >> 2]) {
    $6 = HEAP32[$5 >> 2];
    break label$3;
   }
   $7 = ($1 << 2) + $2 | 0;
   $6 = HEAP32[$7 + 12 >> 2];
   label$5 : {
    if (($6 | 0) < ($9 | 0) | ($6 | 0) > ($11 | 0)) {
     break label$5;
    }
    $6 = ($1 << 4) + $2 | 0;
    $10 = $6 + 131084 | 0;
    if (HEAP32[$10 >> 2] == 1 | HEAP32[$6 + 131088 >> 2] == ($15 | 0) | (HEAP32[$6 + 131092 >> 2] == 1 | HEAP32[$6 + 131096 >> 2] == ($14 | 0))) {
     break label$5;
    }
    if ((arGetContour(HEAP32[$2 >> 2], $0, $12, $1 + 1 | 0, $10, Math_imul(HEAP32[$5 >> 2], 80048) + $4 | 0) | 0) < 0) {
     break label$5;
    }
    if ((check_square(HEAP32[$7 + 12 >> 2], Math_imul(HEAP32[$5 >> 2], 80048) + $4 | 0) | 0) < 0) {
     break label$5;
    }
    HEAP32[Math_imul(HEAP32[$5 >> 2], 80048) + $4 >> 2] = HEAP32[$7 + 12 >> 2];
    $13 = $6 + 655376 | 0;
    $16 = HEAP32[$13 + 4 >> 2];
    $10 = HEAP32[$5 >> 2];
    $7 = Math_imul($10, 80048) + $4 | 0;
    HEAP32[$7 + 8 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$7 + 12 >> 2] = $16;
    $6 = $6 + 655384 | 0;
    $13 = HEAP32[$6 + 4 >> 2];
    HEAP32[$7 + 16 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 20 >> 2] = $13;
    $7 = $10 + 1 | 0;
    HEAP32[$5 >> 2] = $7;
    $6 = 60;
    if (($7 | 0) == 60) {
     break label$3;
    }
   }
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 $2 = 0;
 $1 = 0;
 label$6 : while (1) {
  if (($1 | 0) >= ($6 | 0)) {
   while (1) {
    if (($2 | 0) < ($6 | 0)) {
     $1 = $2;
     if (!HEAP32[Math_imul($1, 80048) + $4 >> 2]) {
      while (1) {
       $0 = $1 + 1 | 0;
       if (($0 | 0) < ($6 | 0)) {
        memcpy(Math_imul($1, 80048) + $4 | 0, Math_imul($0, 80048) + $4 | 0, 80048);
        $6 = HEAP32[$5 >> 2];
        $1 = $0;
        continue;
       }
       break;
      }
      $6 = $6 + -1 | 0;
      HEAP32[$5 >> 2] = $6;
     }
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   }
   label$13 : {
    if (($3 | 0) != 1) {
     break label$13;
    }
    $0 = 0;
    while (1) {
     if (($0 | 0) >= ($6 | 0)) {
      break label$13;
     }
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] << 2;
     $8 = HEAPF64[$4 + 8 >> 3];
     HEAPF64[$4 + 8 >> 3] = $8 + $8;
     $8 = HEAPF64[$4 + 16 >> 3];
     HEAPF64[$4 + 16 >> 3] = $8 + $8;
     $3 = HEAP32[$4 + 24 >> 2];
     $1 = 0;
     while (1) {
      if (($1 | 0) < ($3 | 0)) {
       $2 = ($1 << 2) + $4 | 0;
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] << 1;
       $2 = $2 + 40028 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1;
       $1 = $1 + 1 | 0;
       continue;
      }
      break;
     }
     $0 = $0 + 1 | 0;
     $4 = $4 + 80048 | 0;
     $6 = HEAP32[$5 >> 2];
     continue;
    }
   }
   return 0;
  }
  $9 = Math_imul($1, 80048) + $4 | 0;
  $11 = $9;
  $0 = $1 + 1 | 0;
  $1 = $0;
  while (1) if (($1 | 0) >= ($6 | 0)) {
   $1 = $0;
   continue label$6;
  } else {
   $6 = Math_imul($1, 80048) + $4 | 0;
   $8 = HEAPF64[$9 + 8 >> 3] - HEAPF64[$6 + 8 >> 3];
   $17 = $8 * $8;
   $8 = HEAPF64[$11 + 16 >> 3] - HEAPF64[$6 + 16 >> 3];
   $8 = $17 + $8 * $8;
   $7 = HEAP32[$9 >> 2];
   $12 = HEAP32[$6 >> 2];
   label$20 : {
    if (($7 | 0) > ($12 | 0)) {
     if (!($8 < +(($7 | 0) / 4 | 0))) {
      break label$20;
     }
     HEAP32[$6 >> 2] = 0;
     break label$20;
    }
    if (!($8 < +(($12 | 0) / 4 | 0))) {
     break label$20;
    }
    HEAP32[$9 >> 2] = 0;
   }
   $1 = $1 + 1 | 0;
   $6 = HEAP32[$5 >> 2];
   continue;
  }
 }
}
function arGetContour($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $8 = global$0 - 8e4 | 0;
 global$0 = $8;
 $6 = HEAP32[$4 >> 2];
 $9 = HEAP32[$4 + 8 >> 2];
 $7 = ($6 + Math_imul($9, $1) << 1) + $0 | 0;
 $4 = HEAP32[$4 + 4 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    while (1) {
     if (($6 | 0) > ($4 | 0)) {
      break label$3;
     }
     $10 = HEAP16[$7 >> 1];
     if (!(HEAP32[((($10 & 65535) << 2) + $2 | 0) + -4 >> 2] == ($3 | 0) ? ($10 | 0) >= 1 : 0)) {
      $7 = $7 + 2 | 0;
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    }
    if (($6 | 0) != -1) {
     break label$2;
    }
   }
   arLog(3, 1453, 0);
   $0 = -1;
   break label$1;
  }
  HEAP32[$5 + 40028 >> 2] = $9;
  HEAP32[$5 + 28 >> 2] = $6;
  HEAP32[$5 + 24 >> 2] = 1;
  $10 = $5 + 28 | 0;
  $2 = $6;
  $4 = $9;
  $3 = 1;
  $7 = 5;
  while (1) {
   $7 = $7 + 5 | 0;
   $12 = (Math_imul($1, $4) + $2 << 1) + $0 | 0;
   $4 = 0;
   label$8 : {
    while (1) {
     label$10 : {
      $7 = ($7 | 0) % 8 | 0;
      if (($4 | 0) == 8) {
       break label$10;
      }
      $11 = $7 << 2;
      $13 = HEAP32[$11 + 5664 >> 2];
      $11 = HEAP32[$11 + 5632 >> 2];
      if (HEAP16[$12 + (Math_imul($13, $1) + $11 << 1) >> 1] > 0) {
       break label$8;
      }
      $4 = $4 + 1 | 0;
      $7 = $7 + 1 | 0;
      continue;
     }
     break;
    }
    arLog(3, 1957, 0);
    $0 = -1;
    break label$1;
   }
   HEAP32[$10 + ($3 << 2) >> 2] = $2 + $11;
   $2 = (HEAP32[$5 + 24 >> 2] << 2) + $5 | 0;
   HEAP32[$2 + 40028 >> 2] = HEAP32[$2 + 40024 >> 2] + $13;
   $4 = HEAP32[$5 + 24 >> 2];
   $2 = $4 << 2;
   $12 = $2 + $10 | 0;
   if (!(HEAP32[$12 >> 2] != ($6 | 0) | HEAP32[($2 + $5 | 0) + 40028 >> 2] != ($9 | 0))) {
    $0 = 1;
    $2 = 0;
    $7 = 0;
    while (1) if (($0 | 0) >= ($4 | 0)) {
     $6 = 0;
     while (1) if (($6 | 0) >= ($7 | 0)) {
      $0 = $5 + 28 | 0;
      $1 = $5 + 40028 | 0;
      $6 = $7;
      while (1) {
       if (($6 | 0) >= ($4 | 0)) {
        label$18 : {
         $6 = 0;
         while (1) {
          if (($6 | 0) >= ($7 | 0)) {
           break label$18;
          }
          $0 = $6 - $7 | 0;
          $1 = $6 << 2;
          HEAP32[(($0 + HEAP32[$5 + 24 >> 2] << 2) + $5 | 0) + 28 >> 2] = HEAP32[$1 + ($8 + 4e4 | 0) >> 2];
          HEAP32[(($0 + HEAP32[$5 + 24 >> 2] << 2) + $5 | 0) + 40028 >> 2] = HEAP32[$1 + $8 >> 2];
          $6 = $6 + 1 | 0;
          continue;
         }
        }
       } else {
        $2 = $6 - $7 << 2;
        $3 = $6 << 2;
        HEAP32[$2 + $0 >> 2] = HEAP32[$3 + $0 >> 2];
        HEAP32[$1 + $2 >> 2] = HEAP32[$1 + $3 >> 2];
        $6 = $6 + 1 | 0;
        $4 = HEAP32[$5 + 24 >> 2];
        continue;
       }
       break;
      }
      HEAP32[($5 + 28 | 0) + (HEAP32[$5 + 24 >> 2] << 2) >> 2] = HEAP32[$5 + 28 >> 2];
      HEAP32[($5 + 40028 | 0) + (HEAP32[$5 + 24 >> 2] << 2) >> 2] = HEAP32[$5 + 40028 >> 2];
      HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
      $0 = 0;
      break label$1;
     } else {
      $0 = $6 << 2;
      $1 = $0 + $5 | 0;
      HEAP32[$0 + ($8 + 4e4 | 0) >> 2] = HEAP32[$1 + 28 >> 2];
      HEAP32[$0 + $8 >> 2] = HEAP32[$1 + 40028 >> 2];
      $6 = $6 + 1 | 0;
      continue;
     }
    } else {
     $1 = ($0 << 2) + $5 | 0;
     $3 = HEAP32[$1 + 40028 >> 2] - $9 | 0;
     $1 = HEAP32[$1 + 28 >> 2] - $6 | 0;
     $3 = Math_imul($3, $3) + Math_imul($1, $1) | 0;
     $1 = ($3 | 0) > ($2 | 0);
     $2 = $1 ? $3 : $2;
     $7 = $1 ? $0 : $7;
     $0 = $0 + 1 | 0;
     continue;
    }
   }
   $3 = $4 + 1 | 0;
   HEAP32[$5 + 24 >> 2] = $3;
   if (($3 | 0) != 9999) {
    $4 = HEAP32[($2 + $5 | 0) + 40028 >> 2];
    $2 = HEAP32[$12 >> 2];
    continue;
   }
   break;
  }
  arLog(3, 2303, 0);
  $0 = -1;
 }
 global$0 = $8 + 8e4 | 0;
 return $0;
}
function arParamDecompMat($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $7 = global$0 - 96 | 0;
 global$0 = $7;
 label$1 : {
  if (!(HEAPF64[$0 + 88 >> 3] >= 0)) {
   while (1) {
    $5 = 0;
    if (($9 | 0) == 3) {
     break label$1;
    }
    while (1) {
     if (($5 | 0) != 4) {
      $11 = $5 << 3;
      $10 = $9 << 5;
      HEAPF64[$11 + ($10 + $7 | 0) >> 3] = -HEAPF64[$11 + ($0 + $10 | 0) >> 3];
      $5 = $5 + 1 | 0;
      continue;
     }
     break;
    }
    $9 = $9 + 1 | 0;
    continue;
   }
  }
  while (1) {
   $5 = 0;
   if (($9 | 0) == 3) {
    break label$1;
   }
   while (1) {
    if (($5 | 0) != 4) {
     $11 = $5 << 3;
     $10 = $9 << 5;
     $13 = $11 + ($10 + $7 | 0) | 0;
     $10 = $11 + ($0 + $10 | 0) | 0;
     $11 = HEAP32[$10 + 4 >> 2];
     HEAP32[$13 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$13 + 4 >> 2] = $11;
     $5 = $5 + 1 | 0;
     continue;
    }
    break;
   }
   $9 = $9 + 1 | 0;
   continue;
  }
 }
 $9 = 0;
 while (1) {
  $5 = 0;
  if (($9 | 0) == 3) {
   $3 = HEAPF64[$7 + 64 >> 3];
   $4 = HEAPF64[$7 + 72 >> 3];
   $6 = HEAPF64[$7 + 80 >> 3];
   $8 = norm($3, $4, $6);
   HEAPF64[$1 + 80 >> 3] = $8;
   $3 = $3 / $8;
   HEAPF64[$2 + 64 >> 3] = $3;
   $4 = $4 / HEAPF64[$1 + 80 >> 3];
   HEAPF64[$2 + 72 >> 3] = $4;
   $6 = $6 / HEAPF64[$1 + 80 >> 3];
   HEAPF64[$2 + 80 >> 3] = $6;
   HEAPF64[$2 + 88 >> 3] = HEAPF64[$7 + 88 >> 3] / HEAPF64[$1 + 80 >> 3];
   $12 = $4;
   $14 = $6;
   $4 = HEAPF64[$7 + 32 >> 3];
   $6 = HEAPF64[$7 + 40 >> 3];
   $8 = HEAPF64[$7 + 48 >> 3];
   $3 = dot($3, $12, $14, $4, $6, $8);
   HEAPF64[$1 + 48 >> 3] = $3;
   $4 = $4 - $3 * HEAPF64[$2 + 64 >> 3];
   $6 = $6 - $3 * HEAPF64[$2 + 72 >> 3];
   $3 = $8 - $3 * HEAPF64[$2 + 80 >> 3];
   $8 = norm($4, $6, $3);
   HEAPF64[$1 + 40 >> 3] = $8;
   HEAPF64[$2 + 32 >> 3] = $4 / $8;
   HEAPF64[$2 + 40 >> 3] = $6 / HEAPF64[$1 + 40 >> 3];
   HEAPF64[$2 + 48 >> 3] = $3 / HEAPF64[$1 + 40 >> 3];
   $6 = HEAPF64[$7 >> 3];
   $8 = HEAPF64[$7 + 8 >> 3];
   $12 = HEAPF64[$7 + 16 >> 3];
   $3 = dot(HEAPF64[$2 + 64 >> 3], HEAPF64[$2 + 72 >> 3], HEAPF64[$2 + 80 >> 3], $6, $8, $12);
   HEAPF64[$1 + 16 >> 3] = $3;
   $4 = dot(HEAPF64[$2 + 32 >> 3], HEAPF64[$2 + 40 >> 3], HEAPF64[$2 + 48 >> 3], $6, $8, $12);
   HEAPF64[$1 + 8 >> 3] = $4;
   $6 = $6 - $4 * HEAPF64[$2 + 32 >> 3] - $3 * HEAPF64[$2 + 64 >> 3];
   $8 = $8 - $4 * HEAPF64[$2 + 40 >> 3] - $3 * HEAPF64[$2 + 72 >> 3];
   $3 = $12 - $4 * HEAPF64[$2 + 48 >> 3] - $3 * HEAPF64[$2 + 80 >> 3];
   $4 = norm($6, $8, $3);
   HEAPF64[$1 >> 3] = $4;
   HEAPF64[$2 >> 3] = $6 / $4;
   HEAPF64[$2 + 8 >> 3] = $8 / HEAPF64[$1 >> 3];
   HEAPF64[$2 + 16 >> 3] = $3 / HEAPF64[$1 >> 3];
   $3 = HEAPF64[$2 + 88 >> 3];
   $4 = (HEAPF64[$7 + 56 >> 3] - HEAPF64[$1 + 48 >> 3] * $3) / HEAPF64[$1 + 40 >> 3];
   HEAPF64[$2 + 56 >> 3] = $4;
   HEAPF64[$2 + 24 >> 3] = (HEAPF64[$7 + 24 >> 3] - $4 * HEAPF64[$1 + 8 >> 3] - $3 * HEAPF64[$1 + 16 >> 3]) / HEAPF64[$1 >> 3];
   $0 = 0;
   while (1) {
    $5 = 0;
    if (($0 | 0) == 3) {
     global$0 = $7 + 96 | 0;
    } else {
     while (1) {
      if (($5 | 0) != 3) {
       $2 = (($0 << 5) + $1 | 0) + ($5 << 3) | 0;
       HEAPF64[$2 >> 3] = HEAPF64[$2 >> 3] / HEAPF64[$1 + 80 >> 3];
       $5 = $5 + 1 | 0;
       continue;
      }
      break;
     }
     $0 = $0 + 1 | 0;
     continue;
    }
    break;
   }
  } else {
   while (1) {
    if (($5 | 0) != 4) {
     $0 = (($9 << 5) + $1 | 0) + ($5 << 3) | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $5 = $5 + 1 | 0;
     continue;
    }
    break;
   }
   $9 = $9 + 1 | 0;
   continue;
  }
  break;
 }
 return 0;
}
function setCamera($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 16 | 0, $2 + 8 | 0)) {
   break label$1;
  }
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31964, $2 + 24 | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 16 | 0, $2 + 8 | 0)) {
   break label$1;
  }
  $1 = memcpy($0 + 8 | 0, std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam__20__20___operator_5b_5d_28int_20const__29($2 + 24 | 0), 184);
  $4 = HEAP32[$0 + 8 >> 2];
  $3 = HEAP32[$0 + 12 >> 2];
  if (!(($3 | 0) == HEAP32[$0 + 212 >> 2] ? ($4 | 0) == HEAP32[$0 + 208 >> 2] : 0)) {
   HEAP32[$2 + 4 >> 2] = $3;
   HEAP32[$2 >> 2] = $4;
   arLog(1, 7563, $2);
   arParamChangeSize($1, HEAP32[$0 + 208 >> 2], HEAP32[$0 + 212 >> 2], $1);
  }
  deleteHandle($0);
  $3 = arParamLTCreate($1);
  HEAP32[$0 + 192 >> 2] = $3;
  if (!$3) {
   arLog(3, 7610, 0);
   break label$1;
  }
  $3 = arCreateHandle($3);
  HEAP32[$0 + 216 >> 2] = $3;
  if (!$3) {
   arLog(3, 7648, 0);
   break label$1;
  }
  arSetPixelFormat($3, HEAP32[$0 + 392 >> 2]);
  $1 = ar3DCreateHandle2($1 + 8 | 0);
  HEAP32[$0 + 228 >> 2] = $1;
  if (!$1) {
   arLog(3, 7685, 0);
   break label$1;
  }
  $3 = HEAP32[$0 + 220 >> 2];
  $1 = HEAP32[$0 + 216 >> 2];
  if (!(!$1 | HEAP32[$1 + 7062384 >> 2])) {
   HEAP32[$1 + 7062384 >> 2] = $3;
  }
  arglCameraFrustumRH(HEAP32[$0 + 192 >> 2], HEAPF64[$0 + 232 >> 3], HEAPF64[$0 + 240 >> 3], $0 + 264 | 0);
 }
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 40);
 label$1 : {
  if (HEAPU8[$0 + 24 | 0]) {
   $3 = HEAP32[$0 + 12 >> 2];
   if ($3) {
    $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($3, $1);
    $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
    $3 = HEAP32[$0 + 20 >> 2];
    $4 = HEAP32[$0 + 16 >> 2];
    HEAP32[$2 + 48 >> 2] = $4;
    HEAP32[$2 + 52 >> 2] = $3;
    HEAP32[$2 + 96 >> 2] = $4;
    HEAP32[$2 + 100 >> 2] = $3;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
    $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 21636);
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 44 >> 2] = $4;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
   $3 = HEAP32[$0 + 20 >> 2];
   $0 = HEAP32[$0 + 16 >> 2];
   HEAP32[$2 + 32 >> 2] = $0;
   HEAP32[$2 + 36 >> 2] = $3;
   HEAP32[$2 + 80 >> 2] = $0;
   HEAP32[$2 + 84 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
   $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($2 + 104 | 0);
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($2 + 104 | 0);
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $3 = HEAP32[$0 + 20 >> 2];
  $4 = HEAP32[$0 + 16 >> 2];
  HEAP32[$2 + 24 >> 2] = $4;
  HEAP32[$2 + 28 >> 2] = $3;
  HEAP32[$2 + 72 >> 2] = $4;
  HEAP32[$2 + 76 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 21641);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  if (!HEAP32[$0 + 12 >> 2]) {
   break label$1;
  }
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $3 = HEAP32[$0 + 20 >> 2];
  $4 = HEAP32[$0 + 16 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $3;
  HEAP32[$2 + 56 >> 2] = $4;
  HEAP32[$2 + 60 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 41);
 global$0 = $2 + 112 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($1);
 $2 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0);
 label$1 : {
  if ($3) {
   if (!$2) {
    dlfree(HEAP32[$0 >> 2]);
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clearInline_28_29($0);
   }
   $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
   wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1) << 2) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   break label$1;
  }
  if ($2) {
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clearInline_28_29($1);
   return;
  }
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1);
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 4 | 0, $1 + 4 | 0);
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 8 | 0, $1 + 8 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($1);
}
function arPattLoadFromBuffer($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 if (!$0) {
  arLog(3, 1998, 0);
  return -1;
 }
 if ($1) {
  $4 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (!(!HEAP32[HEAP32[$0 + 8 >> 2] + ($8 << 2) >> 2] | ($8 | 0) >= ($4 | 0))) {
    $8 = $8 + 1 | 0;
    continue;
   }
   break;
  }
  if (($4 | 0) != ($8 | 0)) {
   $10 = __strdup($1);
   if (!$10) {
    arLog(3, 2596, 0);
    return -1;
   }
   $14 = $8 << 2;
   $1 = strtok($10);
   while (1) {
    if (($12 | 0) != 4) {
     $11 = $12 + $14 | 0;
     $4 = 0;
     $6 = 0;
     while (1) {
      if (($4 | 0) != 3) {
       $3 = HEAP32[$0 + 28 >> 2];
       $7 = 0;
       while (1) {
        if (($7 | 0) < ($3 | 0)) {
         $2 = 0;
         while (1) {
          if (($2 | 0) < ($3 | 0)) {
           if (!$1) {
            arLog(3, 2912, 0);
            dlfree($10);
            return -1;
           }
           $3 = atoi($1);
           $1 = strtok(0);
           $5 = $11 << 2;
           $3 = 255 - $3 | 0;
           HEAP32[HEAP32[$5 + HEAP32[$0 + 12 >> 2] >> 2] + (Math_imul(Math_imul(HEAP32[$0 + 28 >> 2], $7) + $2 | 0, 3) + $4 << 2) >> 2] = $3;
           $13 = HEAP32[$5 + HEAP32[$0 + 20 >> 2] >> 2];
           $5 = $13 + (Math_imul(HEAP32[$0 + 28 >> 2], $7) + $2 << 2) | 0;
           label$16 : {
            if (!$4) {
             HEAP32[$5 >> 2] = $3;
             break label$16;
            }
            HEAP32[$5 >> 2] = $3 + HEAP32[$5 >> 2];
            if (($4 | 0) != 2) {
             break label$16;
            }
            $5 = $13 + (Math_imul(HEAP32[$0 + 28 >> 2], $7) + $2 << 2) | 0;
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] / 3;
           }
           $2 = $2 + 1 | 0;
           $6 = $3 + $6 | 0;
           $3 = HEAP32[$0 + 28 >> 2];
           continue;
          }
          break;
         }
         $7 = $7 + 1 | 0;
         continue;
        }
        break;
       }
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     }
     $2 = HEAP32[$0 + 28 >> 2];
     $7 = ($6 | 0) / (Math_imul(Math_imul($2, $2), 3) | 0) | 0;
     $3 = 0;
     $4 = 0;
     while (1) {
      if ($3 >>> 0 < Math_imul(Math_imul($2, $2), 3) >>> 0) {
       $6 = HEAP32[HEAP32[$0 + 12 >> 2] + ($11 << 2) >> 2] + ($3 << 2) | 0;
       $2 = HEAP32[$6 >> 2] - $7 | 0;
       HEAP32[$6 >> 2] = $2;
       $4 = Math_imul($2, $2) + $4 | 0;
       $3 = $3 + 1 | 0;
       $2 = HEAP32[$0 + 28 >> 2];
       continue;
      }
      break;
     }
     $6 = $11 << 3;
     $9 = Math_sqrt(+($4 | 0));
     HEAPF64[$6 + HEAP32[$0 + 16 >> 2] >> 3] = $9 == 0 ? 1e-7 : $9;
     $3 = 0;
     $4 = 0;
     while (1) {
      if ($3 >>> 0 < Math_imul($2, $2) >>> 0) {
       $5 = HEAP32[HEAP32[$0 + 20 >> 2] + ($11 << 2) >> 2] + ($3 << 2) | 0;
       $2 = HEAP32[$5 >> 2] - $7 | 0;
       HEAP32[$5 >> 2] = $2;
       $4 = Math_imul($2, $2) + $4 | 0;
       $3 = $3 + 1 | 0;
       $2 = HEAP32[$0 + 28 >> 2];
       continue;
      }
      break;
     }
     $9 = Math_sqrt(+($4 | 0));
     HEAPF64[$6 + HEAP32[$0 + 24 >> 2] >> 3] = $9 == 0 ? 1e-7 : $9;
     $12 = $12 + 1 | 0;
     continue;
    }
    break;
   }
   dlfree($10);
   HEAP32[HEAP32[$0 + 8 >> 2] + ($8 << 2) >> 2] = 1;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  } else {
   $8 = -1;
  }
  return $8;
 }
 arLog(3, 2310, 0);
 return -1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 12 | 0)) {
    break label$1;
   }
   $3 = HEAP32[$1 + 12 >> 2] + 1 | 0;
   HEAP32[$1 + 12 >> 2] = $3;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
  }
  if (HEAPU8[$0 + 362 | 0]) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 20175);
   break label$1;
  }
  if (HEAPU8[$0 + 361 | 0]) {
   $2 = $1 + 12 | 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$2 >> 2]);
   HEAP32[$1 + 8 >> 2] = $2;
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 332 | 0, $1 + 8 | 0);
   break label$1;
  }
  $0 = $0 + 288 | 0;
  if ($3 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) >>> 0) {
   break label$1;
  }
  $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $3) >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 $5 = $0 + 12 | 0;
 if ($28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($5, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 120 | 0, 20386))) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 112 | 0, 20748);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 60 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 56 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 52 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 21876);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 44 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $3;
 HEAP32[$2 + 88 >> 2] = $4;
 HEAP32[$2 + 92 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 21879);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 20 >> 2], $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 if ($28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($5, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 120 | 0, 20386))) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 20310);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 128 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 28 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 24304);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 52 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 24316);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 44 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 if (HEAPU8[$0 + 29 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 24320);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 36 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
 $3 = $0 + 8 | 0;
 if (!$28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($3)) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 20748);
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($3, $1);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 20310);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $0 = $0 + 20 | 0;
 if (!$28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($0)) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 20748);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 20310);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 global$0 = $2 + 112 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 26580);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 16 | 0)) {
    $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 19958);
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 12 >> 2] = $4;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $2 + 8 | 0)) {
     break label$2;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
   HEAP32[$2 + 28 >> 2] = $3;
   $1 = 0;
   if (!$3) {
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 28 | 0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1);
 }
 global$0 = $2 + 48 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 27, 1, 1, 1);
 HEAP32[$0 >> 2] = 26252;
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP8[$0 + 5 | 0] = 514;
 HEAP8[$0 + 6 | 0] = 2;
 $1 = $0 + 8 | 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1)) ? 1 : 2, HEAP8[wasm2js_i32$0 + 6 | 0] = wasm2js_i32$1;
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1))) {
  HEAP8[$0 + 7 | 0] = 1;
 }
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29(HEAP32[$1 >> 2], $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1))) {
  HEAP8[$0 + 5 | 0] = 1;
 }
 return $0;
}
function get_cpara($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $10 = arMatrixAlloc(8, 8);
 $14 = arMatrixAlloc(8, 1);
 $15 = arMatrixAlloc(8, 1);
 $8 = HEAP32[$14 >> 2];
 $5 = HEAP32[$10 >> 2];
 while (1) {
  if (($11 | 0) != 4) {
   $12 = $11 << 4;
   $7 = $12 + $0 | 0;
   $3 = HEAP32[$7 + 4 >> 2];
   $6 = $11 << 7;
   $4 = $6 + $5 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = $5 + ($6 | 8) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = $5 + ($6 | 16) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   $3 = $5 + ($6 | 24) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5 + ($6 | 32) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5 + ($6 | 40) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $9 = $1 + $12 | 0;
   HEAPF64[$5 + ($6 | 48) >> 3] = HEAPF64[$9 >> 3] * -HEAPF64[$7 >> 3];
   HEAPF64[$5 + ($6 | 56) >> 3] = HEAPF64[$9 >> 3] * -HEAPF64[$7 + 8 >> 3];
   $13 = $12 | 8;
   $3 = $5 + ($13 << 3) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5 + ($6 | 72) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5 + ($6 | 80) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = HEAP32[$7 + 4 >> 2];
   $4 = $5 + ($6 | 88) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = HEAP32[$7 + 12 >> 2];
   $4 = $5 + ($6 | 96) | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = $5 + ($6 | 104) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1072693248;
   HEAPF64[$5 + ($6 | 112) >> 3] = HEAPF64[$9 + 8 >> 3] * -HEAPF64[$7 >> 3];
   HEAPF64[$5 + ($6 | 120) >> 3] = HEAPF64[$9 + 8 >> 3] * -HEAPF64[$7 + 8 >> 3];
   $3 = HEAP32[$9 + 4 >> 2];
   $4 = $8 + $12 | 0;
   HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = HEAP32[$9 + 12 >> 2];
   $4 = $8 + $13 | 0;
   HEAP32[$4 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $11 = $11 + 1 | 0;
   continue;
  }
  break;
 }
 arMatrixSelfInv($10);
 arMatrixMul($15, $10, $14);
 $1 = HEAP32[$15 >> 2];
 $0 = 0;
 while (1) {
  if (($0 | 0) != 2) {
   $3 = Math_imul($0, 24);
   $13 = $3 + $2 | 0;
   $4 = $13;
   $8 = $1 + $3 | 0;
   $3 = HEAP32[$8 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $3 = HEAP32[$8 + 12 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
   HEAP32[$4 + 12 >> 2] = $3;
   $3 = HEAP32[$8 + 20 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
   HEAP32[$4 + 20 >> 2] = $3;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
 $0 = HEAP32[$1 + 52 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$2 + 52 >> 2] = $0;
 $3 = HEAP32[$1 + 56 >> 2];
 $1 = HEAP32[$1 + 60 >> 2];
 $0 = $2 - -64 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 1072693248;
 HEAP32[$2 + 56 >> 2] = $3;
 HEAP32[$2 + 60 >> 2] = $1;
 arMatrixFree($10);
 arMatrixFree($14);
 arMatrixFree($15);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 20748);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 20310);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 20 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 27056);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 27063);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 27073);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $4 = HEAPU8[$0 + 24 | 0] + -1 | 0;
 if ($4 >>> 0 <= 1) {
  $3 = $2;
  $6 = $2;
  label$7 : {
   if ($4 - 1) {
    $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 27083);
    break label$7;
   }
   $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 27086);
  }
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 if (HEAP32[$0 + 28 >> 2]) {
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 28 >> 2], $1);
 }
 global$0 = $2 + 112 | 0;
}
function arGetLine($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $13 = global$0 - 16 | 0;
 global$0 = $13;
 $17 = arVecAlloc(2);
 $15 = arVecAlloc(2);
 $16 = arMatrixAlloc(2, 2);
 label$1 : {
  label$2 : {
   while (1) {
    if (($7 | 0) != 4) {
     $18 = $7 + 1 | 0;
     $6 = HEAP32[($18 << 2) + $2 >> 2];
     $11 = HEAP32[($7 << 2) + $2 >> 2];
     $8 = +(($6 - $11 | 0) + 1 | 0) * .05 + .5;
     $9 = $8 + +($11 | 0);
     label$5 : {
      if (Math_abs($9) < 2147483648) {
       $14 = ~~$9;
       break label$5;
      }
      $14 = -2147483648;
     }
     $8 = +($6 | 0) - $8;
     label$7 : {
      if (Math_abs($8) < 2147483648) {
       $12 = ~~$8;
       break label$7;
      }
      $12 = -2147483648;
     }
     $12 = $12 - $14 | 0;
     $11 = arMatrixAlloc($12 + 1 | 0, 2);
     $6 = 0;
     while (1) {
      if (($6 | 0) <= ($12 | 0)) {
       $10 = $6 + $14 << 2;
       if ((arParamObserv2IdealLTf($3, Math_fround(HEAP32[$10 + $0 >> 2]), Math_fround(HEAP32[$1 + $10 >> 2]), $13 + 12 | 0, $13 + 8 | 0) | 0) <= -1) {
        break label$2;
       }
       $10 = $6 << 4;
       $19 = HEAP32[$11 >> 2];
       HEAPF64[$10 + $19 >> 3] = HEAPF32[$13 + 12 >> 2];
       HEAPF64[$19 + ($10 | 8) >> 3] = HEAPF32[$13 + 8 >> 2];
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     }
     if ((arMatrixPCA($11, $16, $17, $15) | 0) < 0) {
      break label$2;
     }
     $7 = Math_imul($7, 24) + $4 | 0;
     $12 = $7;
     $6 = HEAP32[$16 >> 2];
     $14 = HEAP32[$6 + 12 >> 2];
     $10 = HEAP32[$6 + 8 >> 2];
     HEAP32[$7 >> 2] = $10;
     HEAP32[$7 + 4 >> 2] = $14;
     $8 = HEAPF64[$6 >> 3];
     HEAPF64[$7 + 8 >> 3] = -$8;
     $7 = HEAP32[$15 >> 2];
     $9 = HEAPF64[$7 >> 3];
     wasm2js_scratch_store_i32(0, $10 | 0);
     wasm2js_scratch_store_i32(1, $14 | 0);
     wasm2js_i32$0 = $12, wasm2js_f64$0 = -($9 * +wasm2js_scratch_load_f64() - $8 * HEAPF64[$7 + 8 >> 3]), HEAPF64[wasm2js_i32$0 + 16 >> 3] = wasm2js_f64$0;
     arMatrixFree($11);
     $7 = $18;
     continue;
    }
    break;
   }
   arMatrixFree($16);
   arVecFree($15);
   arVecFree($17);
   $6 = 0;
   while (1) {
    $2 = 0;
    if (($6 | 0) == 4) {
     break label$1;
    }
    $0 = Math_imul($6 + -1 & 3, 24) + $4 | 0;
    $8 = HEAPF64[$0 + 8 >> 3];
    $1 = Math_imul($6, 24) + $4 | 0;
    $20 = HEAPF64[$1 + 8 >> 3];
    $9 = HEAPF64[$0 >> 3] * $20 - HEAPF64[$1 >> 3] * $8;
    $2 = -1;
    if (Math_abs($9) < 1e-4) {
     break label$1;
    }
    $2 = ($6 << 4) + $5 | 0;
    HEAPF64[$2 >> 3] = ($8 * HEAPF64[$1 + 16 >> 3] - $20 * HEAPF64[$0 + 16 >> 3]) / $9;
    HEAPF64[$2 + 8 >> 3] = (HEAPF64[$1 >> 3] * HEAPF64[$0 + 16 >> 3] - HEAPF64[$0 >> 3] * HEAPF64[$1 + 16 >> 3]) / $9;
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  arMatrixFree($11);
  arMatrixFree($16);
  arVecFree($15);
  arVecFree($17);
  $2 = -1;
 }
 $0 = $2;
 global$0 = $13 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 20748);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 16 | 0, $1);
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 96 | 0, 20310);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = HEAP32[$0 + 28 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 27056);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 27063);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 27073);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $4 = HEAPU8[$0 + 32 | 0] + -1 | 0;
 if ($4 >>> 0 <= 1) {
  $3 = $2;
  $6 = $2;
  label$8 : {
   if ($4 - 1) {
    $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 27083);
    break label$8;
   }
   $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 27086);
  }
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 24 >> 2];
 if ($0) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 }
 global$0 = $2 + 112 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $5 = $0 + 8 | 0;
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($5) >>> 0 >= 4) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 104 | 0, 20748);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 52 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 48 | 0);
  $3 = HEAP32[$5 + 4 >> 2];
  $4 = HEAP32[$5 >> 2];
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = $3;
  HEAP32[$2 + 96 >> 2] = $4;
  HEAP32[$2 + 100 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 20310);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 36 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
 }
 $4 = $2;
 $7 = $2;
 $6 = $0 + 16 | 0;
 label$2 : {
  if (HEAPU8[HEAP32[$6 >> 2]] == 110) {
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 20400);
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2 + 28 >> 2] = $0;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
   $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($2 + 72 | 0, $6, 1);
   $3 = $2 + 72 | 0;
   break label$2;
  }
  $0 = HEAP32[$6 + 4 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$2 + 68 >> 2] = $0;
  $3 = $2 - -64 | 0;
 }
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$7 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$4 + 20 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($5) >>> 0 <= 3) {
  $4 = HEAP32[$5 + 4 >> 2];
  $0 = HEAP32[$5 >> 2];
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 60 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 112 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 104)) {
   $2 = 1;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
   if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 8 | 0)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
   break label$1;
  }
  $2 = 1;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
  if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1 + 8 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1, $0, 1);
  if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($1)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function arParamLoad($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 288 | 0;
 global$0 = $2;
 $5 = -1;
 label$1 : {
  if (!$1 | !$0) {
   break label$1;
  }
  $4 = fopen($0, 2999);
  if (!$4) {
   $1 = HEAP32[8356];
   HEAP32[$2 + 20 >> 2] = $0;
   HEAP32[$2 + 16 >> 2] = $1;
   arLog(3, 3273, $2 + 16 | 0);
   wasm2js_i32$0 = $2, wasm2js_i32$1 = __strerror_l(HEAP32[8356]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   HEAP32[$2 >> 2] = 2692;
   arLog(3, 2448, $2);
   break label$1;
  }
  $5 = 0;
  fseek($4, 2);
  label$3 : {
   label$4 : {
    if (ferror($4)) {
     HEAP32[$2 + 80 >> 2] = HEAP32[8356];
     arLog(3, 3698, $2 + 80 | 0);
     wasm2js_i32$0 = $2, wasm2js_i32$1 = __strerror_l(HEAP32[8356]), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
     HEAP32[$2 + 64 >> 2] = 2692;
     arLog(3, 2448, $2 - -64 | 0);
     break label$4;
    }
    $6 = ftell($4);
    rewind($4);
    label$6 : {
     while (1) {
      $0 = $5;
      if (($0 | 0) == 4) {
       break label$6;
      }
      $5 = $0 + 1 | 0;
      if (($6 | 0) % HEAP32[($0 << 3) + 7460 >> 2]) {
       continue;
      }
      break;
     }
     if ((fread($2 + 96 | 0, HEAP32[($0 << 3) + 7460 >> 2], $4) | 0) != 1) {
      HEAP32[$2 + 48 >> 2] = HEAP32[8356];
      arLog(3, 4196, $2 + 48 | 0);
      wasm2js_i32$0 = $2, wasm2js_i32$1 = __strerror_l(HEAP32[8356]), HEAP32[wasm2js_i32$0 + 36 >> 2] = wasm2js_i32$1;
      HEAP32[$2 + 32 >> 2] = 2692;
      arLog(3, 2448, $2 + 32 | 0);
      break label$4;
     }
     HEAP32[$2 + 272 >> 2] = $5;
     byteswap($2 + 96 | 0);
     if (!$0) {
      $6 = HEAP32[$2 + 224 >> 2];
      $3 = HEAP32[$2 + 228 >> 2];
      $7 = HEAP32[$2 + 220 >> 2];
      HEAP32[$2 + 224 >> 2] = HEAP32[$2 + 216 >> 2];
      HEAP32[$2 + 228 >> 2] = $7;
      HEAP32[$2 + 216 >> 2] = $6;
      HEAP32[$2 + 220 >> 2] = $3;
     }
     $6 = memcpy($1, $2 + 96 | 0, 184);
     HEAP32[$2 + 284 >> 2] = 0;
     $1 = 1;
     while (1) {
      $3 = 0;
      if (($1 | 0) >= 1) {
       break label$3;
      }
      $3 = HEAP32[$2 + 284 >> 2];
      HEAP32[$2 + 284 >> 2] = $3 + 4;
      $3 = HEAP32[$3 >> 2];
      HEAP32[$3 + 176 >> 2] = HEAP32[$6 + 176 >> 2];
      if ((fread($2 + 96 | 0, HEAP32[(HEAP32[$6 + 176 >> 2] << 3) + 7452 >> 2], $4) | 0) != 1) {
       break label$4;
      }
      HEAP32[$2 + 272 >> 2] = $5;
      byteswap($2 + 96 | 0);
      if (!$0) {
       $7 = HEAP32[$2 + 224 >> 2];
       $8 = HEAP32[$2 + 228 >> 2];
       $9 = HEAP32[$2 + 220 >> 2];
       HEAP32[$2 + 224 >> 2] = HEAP32[$2 + 216 >> 2];
       HEAP32[$2 + 228 >> 2] = $9;
       HEAP32[$2 + 216 >> 2] = $7;
       HEAP32[$2 + 220 >> 2] = $8;
      }
      memcpy($3, $2 + 96 | 0, 184);
      $1 = $1 + 1 | 0;
      continue;
     }
    }
    arLog(3, 3957, 0);
   }
   $3 = -1;
  }
  $5 = $3;
  fclose($4);
 }
 global$0 = $2 + 288 | 0;
 return $5;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29(31944);
 $0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, operator_20new_28unsigned_20long_29(416), std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20bool_29($3 + 8 | 0, $4, 0));
 std____2__pair_int_20const_2c_20arController___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29(HEAP32[$0 >> 2] + 8 | 0, HEAP32[$2 >> 2]);
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0), wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
 HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
 global$0 = $3 + 16 | 0;
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$9 : {
         label$11 : {
          $4 = $1;
          if ($4) {
           $3 = $2;
           if (!$3) {
            break label$11;
           }
           break label$9;
          }
          $1 = $0;
          $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
          legalfunc$wasm2js_scratch_store_i64($1 - Math_imul($0, $2) | 0, 0);
          i64toi32_i32$HIGH_BITS = 0;
          return $0;
         }
         if (!$0) {
          break label$7;
         }
         break label$6;
        }
        $5 = $3 + -1 | 0;
        if (!($5 & $3)) {
         break label$5;
        }
        $8 = (Math_clz32($3) + 33 | 0) - Math_clz32($4) | 0;
        $7 = 0 - $8 | 0;
        break label$3;
       }
       $0 = ($4 >>> 0) / 0 | 0;
       legalfunc$wasm2js_scratch_store_i64(0, $4 - Math_imul($0, 0) | 0);
       i64toi32_i32$HIGH_BITS = 0;
       return $0;
      }
      $3 = 32 - Math_clz32($4) | 0;
      if ($3 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     legalfunc$wasm2js_scratch_store_i64($0 & $5, 0);
     if (($3 | 0) == 1) {
      break label$1;
     }
     if ($3) {
      $3 = 31 - Math_clz32($3 + -1 ^ $3) | 0;
     } else {
      $3 = 32;
     }
     $2 = $3 & 31;
     if (32 <= ($3 & 63) >>> 0) {
      $3 = 0;
      $0 = $1 >>> $2;
     } else {
      $3 = $1 >>> $2;
      $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
     }
     i64toi32_i32$HIGH_BITS = $3;
     return $0;
    }
    $8 = $3 + 1 | 0;
    $7 = 63 - $3 | 0;
   }
   $5 = $0;
   $3 = $8 & 63;
   $6 = $3 & 31;
   if (32 <= $3 >>> 0) {
    $3 = 0;
    $6 = $4 >>> $6;
   } else {
    $3 = $4 >>> $6;
    $6 = ((1 << $6) - 1 & $4) << 32 - $6 | $5 >>> $6;
   }
   $4 = $3;
   $3 = $7 & 63;
   $5 = $3 & 31;
   if (32 <= $3 >>> 0) {
    $3 = $0 << $5;
    $0 = 0;
   } else {
    $3 = (1 << $5) - 1 & $0 >>> 32 - $5 | $1 << $5;
    $0 = $0 << $5;
   }
   $1 = $3;
   if ($8) {
    $3 = -1;
    $5 = $2 + -1 | 0;
    if ($5 >>> 0 < 4294967295) {
     $3 = 0;
    }
    while (1) {
     $7 = $6 << 1 | $1 >>> 31;
     $9 = $7;
     $4 = $4 << 1 | $6 >>> 31;
     $7 = $3 - ($4 + ($5 >>> 0 < $7 >>> 0) | 0) >> 31;
     $10 = $2 & $7;
     $6 = $9 - $10 | 0;
     $4 = $4 - ($9 >>> 0 < $10 >>> 0) | 0;
     $1 = $1 << 1 | $0 >>> 31;
     $0 = $11 | $0 << 1;
     $9 = $7 & 1;
     $11 = $9;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   legalfunc$wasm2js_scratch_store_i64($6, $4);
   i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
   return $9 | $0 << 1;
  }
  legalfunc$wasm2js_scratch_store_i64($0, $1);
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}
function arParamChangeSize($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 >> 2];
 $7 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = $1;
 $4 = +($2 | 0) / +($7 | 0);
 $5 = +($1 | 0) / +($6 | 0);
 $1 = 0;
 while (1) {
  if (($1 | 0) != 4) {
   $6 = $1 << 3;
   $2 = $6 + $3 | 0;
   $6 = $0 + $6 | 0;
   HEAPF64[$2 + 8 >> 3] = $5 * HEAPF64[$6 + 8 >> 3];
   HEAPF64[$2 + 40 >> 3] = $4 * HEAPF64[$6 + 40 >> 3];
   $7 = HEAP32[$6 + 76 >> 2];
   HEAP32[$2 + 72 >> 2] = HEAP32[$6 + 72 >> 2];
   HEAP32[$2 + 76 >> 2] = $7;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 $1 = HEAP32[$0 + 176 >> 2];
 $2 = $1 + -1 | 0;
 if ($2 >>> 0 <= 3) {
  label$4 : {
   label$5 : {
    switch ($2 - 1 | 0) {
    case 2:
     $2 = HEAP32[$0 + 108 >> 2];
     HEAP32[$3 + 104 >> 2] = HEAP32[$0 + 104 >> 2];
     HEAP32[$3 + 108 >> 2] = $2;
     $2 = HEAP32[$0 + 116 >> 2];
     HEAP32[$3 + 112 >> 2] = HEAP32[$0 + 112 >> 2];
     HEAP32[$3 + 116 >> 2] = $2;
     $2 = HEAP32[$0 + 124 >> 2];
     HEAP32[$3 + 120 >> 2] = HEAP32[$0 + 120 >> 2];
     HEAP32[$3 + 124 >> 2] = $2;
     $2 = HEAP32[$0 + 132 >> 2];
     HEAP32[$3 + 128 >> 2] = HEAP32[$0 + 128 >> 2];
     HEAP32[$3 + 132 >> 2] = $2;
     HEAPF64[$3 + 136 >> 3] = $5 * HEAPF64[$0 + 136 >> 3];
     HEAPF64[$3 + 144 >> 3] = $4 * HEAPF64[$0 + 144 >> 3];
     HEAPF64[$3 + 152 >> 3] = $5 * HEAPF64[$0 + 152 >> 3];
     HEAPF64[$3 + 160 >> 3] = $4 * HEAPF64[$0 + 160 >> 3];
     $2 = HEAP32[$0 + 172 >> 2];
     HEAP32[$3 + 168 >> 2] = HEAP32[$0 + 168 >> 2];
     HEAP32[$3 + 172 >> 2] = $2;
     break label$4;
    case 1:
     HEAPF64[$3 + 104 >> 3] = $5 * HEAPF64[$0 + 104 >> 3];
     HEAPF64[$3 + 112 >> 3] = $4 * HEAPF64[$0 + 112 >> 3];
     $2 = HEAP32[$0 + 124 >> 2];
     HEAP32[$3 + 120 >> 2] = HEAP32[$0 + 120 >> 2];
     HEAP32[$3 + 124 >> 2] = $2;
     $2 = HEAP32[$0 + 132 >> 2];
     HEAP32[$3 + 128 >> 2] = HEAP32[$0 + 128 >> 2];
     HEAP32[$3 + 132 >> 2] = $2;
     HEAPF64[$3 + 136 >> 3] = HEAPF64[$0 + 136 >> 3] / ($5 * $4);
     HEAPF64[$3 + 144 >> 3] = HEAPF64[$0 + 144 >> 3] / ($4 * ($5 * $5 * $4));
     break label$4;
    case 0:
     HEAPF64[$3 + 104 >> 3] = $5 * HEAPF64[$0 + 104 >> 3];
     HEAPF64[$3 + 112 >> 3] = $4 * HEAPF64[$0 + 112 >> 3];
     $2 = HEAP32[$0 + 124 >> 2];
     HEAP32[$3 + 120 >> 2] = HEAP32[$0 + 120 >> 2];
     HEAP32[$3 + 124 >> 2] = $2;
     HEAPF64[$3 + 128 >> 3] = HEAPF64[$0 + 128 >> 3] / ($5 * $4);
     HEAPF64[$3 + 136 >> 3] = HEAPF64[$0 + 136 >> 3] / ($4 * ($5 * $5 * $4));
     break label$4;
    default:
     break label$5;
    }
   }
   HEAPF64[$3 + 104 >> 3] = $5 * HEAPF64[$0 + 104 >> 3];
   HEAPF64[$3 + 112 >> 3] = $4 * HEAPF64[$0 + 112 >> 3];
   $2 = HEAP32[$0 + 124 >> 2];
   HEAP32[$3 + 120 >> 2] = HEAP32[$0 + 120 >> 2];
   HEAP32[$3 + 124 >> 2] = $2;
   HEAPF64[$3 + 128 >> 3] = HEAPF64[$0 + 128 >> 3] / ($5 * $4);
  }
  HEAP32[$3 + 176 >> 2] = $1;
 }
}
function __embind_register_native_and_builtin_types() {
 _embind_register_void(29568, 29944);
 _embind_register_bool(29580, 29949, 1, 1, 0);
 void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29();
 _embind_register_std_string(12512, 30055);
 _embind_register_std_string(30768, 30067);
 _embind_register_std_wstring(30856, 4, 30100);
 _embind_register_emval(30900, 30113);
 void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(30159);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(30196);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(30235);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(30266);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(30306);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(30335);
 void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(30442);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(30474);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(30507);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(30540);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(30574);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(30607);
 void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29();
 void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29();
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29(31964);
 $0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, operator_20new_28unsigned_20long_29(200), std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20bool_29($3 + 8 | 0, $4, 0));
 std____2__pair_int_20const_2c_20ARParam___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29(HEAP32[$0 >> 2] + 8 | 0, HEAP32[$2 >> 2]);
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0), wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
 HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
 global$0 = $3 + 16 | 0;
}
function icpGetJ_Xc_S($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $4 = global$0 - 864 | 0;
 global$0 = $4;
 $9 = HEAPF64[$3 + 8 >> 3];
 $10 = HEAPF64[$3 + 16 >> 3];
 HEAPF64[$1 >> 3] = HEAPF64[$2 + 24 >> 3] + (HEAPF64[$2 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$2 + 8 >> 3] * $9 + HEAPF64[$2 + 16 >> 3] * $10);
 $5 = HEAPF64[$3 >> 3];
 HEAPF64[$1 + 8 >> 3] = HEAPF64[$2 + 56 >> 3] + (HEAPF64[$2 + 32 >> 3] * $5 + $9 * HEAPF64[$2 + 40 >> 3] + $10 * HEAPF64[$2 + 48 >> 3]);
 $9 = HEAPF64[$3 + 8 >> 3];
 HEAPF64[$1 + 16 >> 3] = HEAPF64[$2 + 88 >> 3] + ($5 * HEAPF64[$2 + 64 >> 3] + HEAPF64[$2 + 72 >> 3] * $9 + $10 * HEAPF64[$2 + 80 >> 3]);
 $6 = HEAPF64[$2 >> 3];
 HEAPF64[$4 + 584 >> 3] = $9 * $6;
 HEAPF64[$4 + 576 >> 3] = $5 * $6;
 $10 = HEAPF64[$3 + 16 >> 3];
 HEAPF64[$4 + 592 >> 3] = $6 * $10;
 $7 = HEAPF64[$2 + 8 >> 3];
 HEAPF64[$4 + 616 >> 3] = $10 * $7;
 HEAPF64[$4 + 608 >> 3] = $9 * $7;
 HEAPF64[$4 + 600 >> 3] = $5 * $7;
 $8 = HEAPF64[$2 + 16 >> 3];
 HEAPF64[$4 + 664 >> 3] = $8;
 HEAPF64[$4 + 656 >> 3] = $7;
 HEAPF64[$4 + 648 >> 3] = $6;
 HEAPF64[$4 + 640 >> 3] = $10 * $8;
 HEAPF64[$4 + 632 >> 3] = $9 * $8;
 HEAPF64[$4 + 624 >> 3] = $5 * $8;
 $6 = HEAPF64[$2 + 32 >> 3];
 HEAPF64[$4 + 688 >> 3] = $10 * $6;
 HEAPF64[$4 + 680 >> 3] = $9 * $6;
 HEAPF64[$4 + 672 >> 3] = $5 * $6;
 $7 = HEAPF64[$2 + 40 >> 3];
 HEAPF64[$4 + 712 >> 3] = $10 * $7;
 HEAPF64[$4 + 704 >> 3] = $9 * $7;
 HEAPF64[$4 + 696 >> 3] = $5 * $7;
 $8 = HEAPF64[$2 + 48 >> 3];
 HEAPF64[$4 + 760 >> 3] = $8;
 HEAPF64[$4 + 752 >> 3] = $7;
 HEAPF64[$4 + 744 >> 3] = $6;
 HEAPF64[$4 + 736 >> 3] = $10 * $8;
 HEAPF64[$4 + 728 >> 3] = $9 * $8;
 HEAPF64[$4 + 720 >> 3] = $5 * $8;
 $6 = HEAPF64[$2 + 64 >> 3];
 HEAPF64[$4 + 784 >> 3] = $10 * $6;
 HEAPF64[$4 + 776 >> 3] = $9 * $6;
 HEAPF64[$4 + 768 >> 3] = $5 * $6;
 $7 = HEAPF64[$2 + 72 >> 3];
 HEAPF64[$4 + 808 >> 3] = $10 * $7;
 HEAPF64[$4 + 800 >> 3] = $9 * $7;
 HEAPF64[$4 + 792 >> 3] = $5 * $7;
 $8 = HEAPF64[$2 + 80 >> 3];
 HEAPF64[$4 + 856 >> 3] = $8;
 HEAPF64[$4 + 848 >> 3] = $7;
 HEAPF64[$4 + 840 >> 3] = $6;
 HEAPF64[$4 + 832 >> 3] = $10 * $8;
 HEAPF64[$4 + 824 >> 3] = $9 * $8;
 HEAPF64[$4 + 816 >> 3] = $5 * $8;
 icpGetJ_T_S($4);
 $3 = 0;
 while (1) {
  $1 = 0;
  if (($3 | 0) != 3) {
   while (1) {
    if (($1 | 0) != 6) {
     $12 = $1 << 3;
     $11 = $12 + (Math_imul($3, 48) + $0 | 0) | 0;
     HEAP32[$11 >> 2] = 0;
     HEAP32[$11 + 4 >> 2] = 0;
     $2 = 0;
     $5 = 0;
     while (1) {
      if (($2 | 0) != 12) {
       $5 = $5 + HEAPF64[(($4 + 576 | 0) + Math_imul($3, 96) | 0) + ($2 << 3) >> 3] * HEAPF64[(Math_imul($2, 48) + $4 | 0) + $12 >> 3];
       $2 = $2 + 1 | 0;
       continue;
      }
      break;
     }
     HEAPF64[$11 >> 3] = $5;
     $1 = $1 + 1 | 0;
     continue;
    }
    break;
   }
   $3 = $3 + 1 | 0;
   continue;
  }
  break;
 }
 global$0 = $4 + 864 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 $5 = $2;
 $6 = $2;
 label$1 : {
  label$2 : {
   $3 = HEAP32[$0 + 8 >> 2];
   if (HEAPU8[$3 + 4 | 0] == 10) {
    if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($3)) {
     break label$2;
    }
    $3 = HEAP32[$0 + 8 >> 2];
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
   if ($28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
    $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 88 | 0, 26460);
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 40 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 44 >> 2] = $3;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 40 | 0);
   }
   label$6 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
     if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
      break label$6;
     }
    }
    $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 80 | 0, 20748);
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 + 32 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 36 >> 2] = $0;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 32 | 0);
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 72 | 0, 20363);
   break label$1;
  }
  $4 = HEAP32[$0 + 8 >> 2];
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 - -64 | 0, 28844);
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$4 + 16 >> 2];
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 60 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 20386);
 }
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 + 12 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 global$0 = $2 + 96 | 0;
}
function arglCameraFrustumRH($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $4 = global$0 - 400 | 0;
 global$0 = $4;
 $6 = HEAP32[$0 + 4 >> 2];
 $9 = HEAP32[$0 >> 2];
 label$1 : {
  if ((arParamDecompMat($0 + 8 | 0, $4 + 304 | 0, $4 + 208 | 0) | 0) >= 0) {
   $7 = +($6 + -1 | 0);
   while (1) if (($5 | 0) == 4) {
    $8 = HEAPF64[$4 + 384 >> 3];
    $0 = 0;
    while (1) {
     $5 = 0;
     if (($0 | 0) != 3) {
      while (1) {
       if (($5 | 0) != 3) {
        $6 = $5 << 3;
        HEAPF64[$6 + (($4 + 128 | 0) + Math_imul($0, 24) | 0) >> 3] = HEAPF64[$6 + (($4 + 304 | 0) + ($0 << 5) | 0) >> 3] / $8;
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      }
      $0 = $0 + 1 | 0;
      continue;
     }
     break;
    }
    HEAP32[$4 + 32 >> 2] = 0;
    HEAP32[$4 + 36 >> 2] = 0;
    HEAP32[$4 + 56 >> 2] = 0;
    HEAP32[$4 + 60 >> 2] = 0;
    HEAP32[$4 + 72 >> 2] = 0;
    HEAP32[$4 + 76 >> 2] = 0;
    HEAP32[$4 + 104 >> 2] = 0;
    HEAP32[$4 + 108 >> 2] = 0;
    $8 = $1 - $2;
    HEAPF64[$4 + 80 >> 3] = ($1 + $2) / $8;
    HEAPF64[$4 + 88 >> 3] = ($2 + $2) * $1 / $8;
    HEAPF64[$4 + 40 >> 3] = HEAPF64[$4 + 160 >> 3] * -2 / $7;
    $1 = HEAPF64[$4 + 168 >> 3];
    HEAPF64[$4 + 48 >> 3] = -(($1 + $1) / $7 + -1);
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    HEAP32[$4 + 64 >> 2] = 0;
    HEAP32[$4 + 68 >> 2] = 0;
    HEAP32[$4 + 96 >> 2] = 0;
    HEAP32[$4 + 100 >> 2] = 0;
    $1 = HEAPF64[$4 + 128 >> 3];
    $2 = $1 + $1;
    $1 = +($9 + -1 | 0);
    HEAPF64[$4 >> 3] = $2 / $1;
    $2 = HEAPF64[$4 + 136 >> 3];
    HEAPF64[$4 + 8 >> 3] = ($2 + $2) / $1;
    $2 = HEAPF64[$4 + 144 >> 3];
    HEAPF64[$4 + 16 >> 3] = -(($2 + $2) / $1 + -1);
    HEAP32[$4 + 120 >> 2] = 0;
    HEAP32[$4 + 124 >> 2] = 0;
    HEAP32[$4 + 112 >> 2] = 0;
    HEAP32[$4 + 116 >> 2] = -1074790400;
    $8 = HEAPF64[$4 + 296 >> 3];
    $10 = HEAPF64[$4 + 264 >> 3];
    $0 = 0;
    $11 = HEAPF64[$4 + 232 >> 3];
    while (1) {
     if (($0 | 0) == 4) {
      break label$1;
     }
     $6 = ($0 << 5) + $4 | 0;
     $1 = HEAPF64[$6 + 16 >> 3];
     $2 = HEAPF64[$6 + 8 >> 3];
     $7 = HEAPF64[$6 >> 3];
     $5 = 0;
     while (1) {
      if (($5 | 0) != 3) {
       $9 = ($4 + 208 | 0) + ($5 << 3) | 0;
       HEAPF64[(($5 << 2) + $0 << 3) + $3 >> 3] = $7 * HEAPF64[$9 >> 3] + $2 * HEAPF64[$9 + 32 >> 3] + $1 * HEAPF64[$9 - -64 >> 3];
       $5 = $5 + 1 | 0;
       continue;
      }
      break;
     }
     HEAPF64[(($0 << 3) + $3 | 0) + 96 >> 3] = HEAPF64[$6 + 24 >> 3] + ($7 * $11 + $2 * $10 + $1 * $8);
     $0 = $0 + 1 | 0;
     continue;
    }
   } else {
    $0 = ($4 + 304 | 0) + ($5 << 3) | 0;
    HEAPF64[$0 + 32 >> 3] = HEAPF64[$0 - -64 >> 3] * $7 - HEAPF64[$0 + 32 >> 3];
    $5 = $5 + 1 | 0;
    continue;
   }
  }
  arLog(3, 1595, 0);
 }
 global$0 = $4 + 400 | 0;
}
function icpPoint($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 $5 = -1;
 $6 = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if (($6 | 0) < 3) {
   break label$1;
  }
  $10 = dlmalloc(Math_imul($6, 96));
  if (!$10) {
   arLog(3, 1722, 0);
   break label$1;
  }
  $11 = dlmalloc($6 << 4);
  if ($11) {
   $6 = 0;
   while (1) {
    $5 = 0;
    if (($6 | 0) == 3) {
     $6 = 0;
     label$6 : {
      while (1) {
       arUtilMatMul($0, $3, $7 + 48 | 0);
       $8 = 0;
       $5 = 0;
       while (1) {
        $2 = HEAP32[$1 + 8 >> 2];
        if (($5 | 0) < ($2 | 0)) {
         if ((icpGetU_from_X_by_MatX2U($7 + 144 | 0, $7 + 48 | 0, HEAP32[$1 + 4 >> 2] + Math_imul($5, 24) | 0) | 0) <= -1) {
          break label$6;
         }
         $2 = $5 << 4;
         $9 = $2 + HEAP32[$1 >> 2] | 0;
         $12 = HEAPF64[$9 + 8 >> 3];
         $16 = HEAPF64[$7 + 152 >> 3];
         $14 = HEAPF64[$9 >> 3] - HEAPF64[$7 + 144 >> 3];
         HEAPF64[$2 + $11 >> 3] = $14;
         $12 = $12 - $16;
         HEAPF64[($2 | 8) + $11 >> 3] = $12;
         $8 = $8 + ($14 * $14 + $12 * $12);
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       }
       label$10 : {
        $8 = $8 / +($2 | 0);
        if ($8 < HEAPF64[$0 + 104 >> 3] | ($8 / $17 > HEAPF64[$0 + 112 >> 3] ? !(!$6 | $8 < HEAPF64[$0 + 120 >> 3] ^ 1) : 0)) {
         break label$10;
        }
        $5 = 0;
        if (HEAP32[$0 + 96 >> 2] == ($6 | 0)) {
         break label$10;
        }
        while (1) {
         if (($5 | 0) < ($2 | 0)) {
          if ((icpGetJ_U_S(Math_imul($5, 96) + $10 | 0, $0, $3, HEAP32[$1 + 4 >> 2] + Math_imul($5, 24) | 0) | 0) < 0) {
           break label$6;
          }
          $5 = $5 + 1 | 0;
          $2 = HEAP32[$1 + 8 >> 2];
          continue;
         }
         break;
        }
        if ((icpGetDeltaS($7, $11, $10, $2 << 1) | 0) <= -1) {
         break label$6;
        }
        icpUpdateMat($3, $7);
        $6 = $6 + 1 | 0;
        $17 = $8;
        continue;
       }
       break;
      }
      HEAPF64[$4 >> 3] = $8;
      dlfree($10);
      dlfree($11);
      $5 = 0;
      break label$1;
     }
     dlfree($10);
     dlfree($11);
     $5 = -1;
     break label$1;
    } else {
     while (1) {
      if (($5 | 0) != 4) {
       $13 = $5 << 3;
       $9 = $6 << 5;
       $15 = $13 + ($9 + $3 | 0) | 0;
       $9 = $13 + ($2 + $9 | 0) | 0;
       $13 = HEAP32[$9 + 4 >> 2];
       HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
       HEAP32[$15 + 4 >> 2] = $13;
       $5 = $5 + 1 | 0;
       continue;
      }
      break;
     }
     $6 = $6 + 1 | 0;
     continue;
    }
   }
  }
  arLog(3, 1722, 0);
  dlfree($10);
 }
 global$0 = $7 + 160 | 0;
 return $5;
}
function scanexp($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 label$2 : {
  if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $1 + 1;
   $1 = HEAPU8[$1 | 0];
   break label$2;
  }
  $1 = __shgetc($0);
 }
 $2 = $1 + -43 | 0;
 label$1 : {
  if (!($2 - 1 | 0 ? $2 >>> 0 <= 2 : 0)) {
   $3 = $1 + -48 | 0;
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  label$5 : {
   if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $2 + 1;
    $2 = HEAPU8[$2 | 0];
    break label$5;
   }
   $2 = __shgetc($0);
  }
  $5 = ($1 | 0) == 45;
  $1 = $2;
  $3 = $1 + -48 | 0;
  if (!(!HEAP32[$0 + 104 >> 2] | ($3 >>> 0 < 10 | 1))) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  }
 }
 label$8 : {
  if ($3 >>> 0 < 10) {
   $3 = 0;
   while (1) {
    $2 = Math_imul($3, 10) + $1 | 0;
    $1 = HEAP32[$0 + 4 >> 2];
    label$11 : {
     if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $1 + 1;
      $1 = HEAPU8[$1 | 0];
      break label$11;
     }
     $1 = __shgetc($0);
    }
    $4 = $1 + -48 | 0;
    $3 = $2 + -48 | 0;
    if (($3 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
     continue;
    }
    break;
   }
   $2 = $3;
   $3 = $2 >> 31;
   label$13 : {
    if ($4 >>> 0 >= 10) {
     break label$13;
    }
    while (1) {
     $3 = __wasm_i64_mul($2, $3, 10, 0);
     $2 = i64toi32_i32$HIGH_BITS;
     $1 = $1 + $3 | 0;
     if ($1 >>> 0 < $3 >>> 0) {
      $2 = $2 + 1 | 0;
     }
     $4 = $1;
     $1 = HEAP32[$0 + 4 >> 2];
     label$15 : {
      if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1 + 1;
       $1 = HEAPU8[$1 | 0];
       break label$15;
      }
      $1 = __shgetc($0);
     }
     $3 = $2 + -1 | 0;
     $2 = $4 + -48 | 0;
     if ($2 >>> 0 < 4294967248) {
      $3 = $3 + 1 | 0;
     }
     $4 = $1 + -48 | 0;
     if ($4 >>> 0 > 9) {
      break label$13;
     }
     if (($3 | 0) < 21474836 ? 1 : ($3 | 0) <= 21474836 ? $2 >>> 0 >= 2061584302 ? 0 : 1 : 0) {
      continue;
     }
     break;
    }
   }
   if ($4 >>> 0 < 10) {
    while (1) {
     $1 = HEAP32[$0 + 4 >> 2];
     label$19 : {
      if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1 + 1;
       $1 = HEAPU8[$1 | 0];
       break label$19;
      }
      $1 = __shgetc($0);
     }
     if ($1 + -48 >>> 0 < 10) {
      continue;
     }
     break;
    }
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   }
   $0 = $2;
   $2 = $5 ? 0 - $0 | 0 : $0;
   $3 = $5 ? 0 - ($3 + (0 < $0 >>> 0) | 0) | 0 : $3;
   break label$8;
  }
  $2 = 0;
  $3 = -2147483648;
  if (!HEAP32[$0 + 104 >> 2]) {
   break label$8;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 i64toi32_i32$HIGH_BITS = $3;
 return $2;
}
function unsigned_20long_20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____erase_unique_int__28int_20const__29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___find_int__28int_20const__29(31944, $0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 if (!std____2__operator___28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__2c_20std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__29($1 + 24 | 0, $1 + 16 | 0)) {
  $0 = $1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 + 24 >> 2];
  std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___erase_28std____2____hash_const_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29(HEAP32[$0 >> 2]);
 }
 global$0 = $1 + 32 | 0;
}
function teardown($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $2 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0);
  $0 = HEAP32[$2 + 196 >> 2];
  if ($0) {
   dlfree($0);
   HEAP32[$2 + 196 >> 2] = 0;
   HEAP32[$2 + 200 >> 2] = 0;
  }
  deleteHandle($2);
  arPattDeleteHandle(HEAP32[$2 + 220 >> 2]);
  unsigned_20long_20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____erase_unique_int__28int_20const__29($1 + 12 | 0);
  $3 = $2 + 248 | 0;
  $0 = 0;
  while (1) {
   if ($0 >>> 0 < std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($3) >>> 0) {
    arVecFree(HEAP32[std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($3, $0) + 4 >> 2]);
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  }
  dlfree(std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20____vector_28_29($3));
  dlfree(arController___arController_28_29($2));
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 28 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$1 + 28 >> 2];
  if ($3 + -1 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0) {
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($1 + 16 | 0, $2, $2 + $3 | 0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $3;
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1 + 8 | 0, 22430);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($2, $1)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, 22441);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $2);
 }
 global$0 = $1 + 32 | 0;
 return $2;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____swap_out_circular_buffer_28std____2____split_buffer_multi_marker_2c_20std____2__allocator_multi_marker_____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____annotate_delete_28_29_20const($0);
 $4 = std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0);
 $2 = $0 + 4 | 0;
 $3 = $1 + 4 | 0;
 std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_multi_marker__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_multi_marker__20_____construct_backward_multi_marker__28std____2__allocator_multi_marker___2c_20bool__2c_20bool__2c_20bool___29($4, HEAP32[$0 >> 2], HEAP32[$2 >> 2], $3);
 std____2__enable_if__28is_move_constructible_multi_marker____value_29_20___20_28is_move_assignable_multi_marker____value_29_2c_20void___type_20std____2__swap_multi_marker___28multi_marker___2c_20multi_marker___29($0, $3);
 std____2__enable_if__28is_move_constructible_multi_marker____value_29_20___20_28is_move_assignable_multi_marker____value_29_2c_20void___type_20std____2__swap_multi_marker___28multi_marker___2c_20multi_marker___29($2, $1 + 8 | 0);
 std____2__enable_if__28is_move_constructible_multi_marker____value_29_20___20_28is_move_assignable_multi_marker____value_29_2c_20void___type_20std____2__swap_multi_marker___28multi_marker___2c_20multi_marker___29(std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0), std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($1));
 HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0);
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 8192) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8 : {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($2 >>> 0 > $5 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($2 >>> 0 <= $5 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 + -4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($2 >>> 0 <= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 68)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 116)) {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
    break label$1;
   }
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
  HEAP32[$1 + 12 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 20300, $1 + 12 | 0);
 }
 global$0 = $1 + 16 | 0;
 return $3;
}
function check_square($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $7 = $1 + 40028 | 0;
 $8 = $1 + 28 | 0;
 $11 = HEAP32[$1 + 24 >> 2] + -1 | 0;
 $12 = HEAP32[$1 + 40028 >> 2];
 $13 = HEAP32[$1 + 28 >> 2];
 $5 = 1;
 while (1) {
  if (($5 | 0) < ($11 | 0)) {
   $6 = ($5 << 2) + $1 | 0;
   $10 = HEAP32[$6 + 40028 >> 2] - $12 | 0;
   $6 = HEAP32[$6 + 28 >> 2] - $13 | 0;
   $10 = Math_imul($10, $10) + Math_imul($6, $6) | 0;
   $6 = ($10 | 0) > ($4 | 0);
   $4 = $6 ? $10 : $4;
   $3 = $6 ? $5 : $3;
   $5 = $5 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 0;
 $9 = +($0 | 0) / .75 * .01;
 label$3 : {
  if ((get_vertex($8, $7, 0, $3, $9, $2 - -64 | 0, $2 + 60 | 0) | 0) < 0) {
   $5 = -1;
   break label$3;
  }
  $5 = -1;
  if ((get_vertex($8, $7, $3, HEAP32[$1 + 24 >> 2] + -1 | 0, $9, $2 + 16 | 0, $2 + 12 | 0) | 0) < 0) {
   break label$3;
  }
  $0 = HEAP32[$2 + 60 >> 2];
  $4 = HEAP32[$2 + 12 >> 2];
  label$5 : {
   if (!(($0 | 0) != 1 | ($4 | 0) != 1)) {
    $4 = HEAP32[$2 + 16 >> 2];
    $0 = $3;
    $3 = HEAP32[$2 + 64 >> 2];
    break label$5;
   }
   if (!($4 | ($0 | 0) < 2)) {
    HEAP32[$2 + 60 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    $0 = ($3 | 0) / 2 | 0;
    if ((get_vertex($8, $7, 0, $0, $9, $2 - -64 | 0, $2 + 60 | 0) | 0) < 0) {
     break label$3;
    }
    if ((get_vertex($8, $7, $0, $3, $9, $2 + 16 | 0, $2 + 12 | 0) | 0) < 0 | HEAP32[$2 + 60 >> 2] != 1 | HEAP32[$2 + 12 >> 2] != 1) {
     break label$3;
    }
    $0 = HEAP32[$2 + 16 >> 2];
    $4 = $3;
    $3 = HEAP32[$2 + 64 >> 2];
    break label$5;
   }
   if ($0 | ($4 | 0) < 2) {
    break label$3;
   }
   $0 = HEAP32[$1 + 24 >> 2];
   HEAP32[$2 + 60 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   $0 = (($0 + $3 | 0) + -1 | 0) / 2 | 0;
   if ((get_vertex($8, $7, $3, $0, $9, $2 - -64 | 0, $2 + 60 | 0) | 0) < 0) {
    break label$3;
   }
   if ((get_vertex($8, $7, $0, HEAP32[$1 + 24 >> 2] + -1 | 0, $9, $2 + 16 | 0, $2 + 12 | 0) | 0) < 0 | HEAP32[$2 + 60 >> 2] != 1 | HEAP32[$2 + 12 >> 2] != 1) {
    break label$3;
   }
   $4 = HEAP32[$2 + 16 >> 2];
   $0 = HEAP32[$2 + 64 >> 2];
  }
  $5 = 0;
  HEAP32[$1 + 80028 >> 2] = 0;
  HEAP32[$1 + 80040 >> 2] = $4;
  HEAP32[$1 + 80036 >> 2] = $0;
  HEAP32[$1 + 80032 >> 2] = $3;
  HEAP32[$1 + 80044 >> 2] = HEAP32[$1 + 24 >> 2] + -1;
 }
 global$0 = $2 + 112 | 0;
 return $5;
}
function arPattGetIDGlobal($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 var $19 = 0, $20 = 0, $21 = 0;
 $19 = global$0 - 12304 | 0;
 global$0 = $19;
 $21 = 1;
 $20 = 1;
 label$1 : {
  if ($2 + -2 >>> 0 > 2) {
   break label$1;
  }
  if (($16 | 0) == 2830) {
   if ((arPattGetImage2($1, 2, 14, 42, $3, $4, $5, $6, $7, $8, .875, $19 + 16 | 0) | 0) <= -1) {
    HEAP32[$13 >> 2] = -1;
    $20 = -6;
    break label$1;
   }
   $20 = get_global_id_code($19 + 16 | 0, $19 + 8 | 0, $14, $15, $17);
   if (($20 | 0) <= -1) {
    HEAP32[$13 >> 2] = -1;
    break label$1;
   }
   $15 = HEAP32[$19 + 12 >> 2];
   $16 = $15;
   $14 = HEAP32[$19 + 8 >> 2];
   if (($14 | 0) == -1 & ($16 | 0) == -1) {
    HEAP32[$13 >> 2] = -1;
    $20 = -5;
    break label$1;
   }
   HEAP32[$13 >> 2] = $14 & -32768 ? 0 : $14 & 32767;
   if (!$18) {
    break label$1;
   }
   HEAP32[$18 >> 2] = $14;
   HEAP32[$18 + 4 >> 2] = $16;
   break label$1;
  }
  $20 = $16 & 255;
  if ((arPattGetImage2($1, 2, $20, Math_imul($20, 3), $3, $4, $5, $6, $7, $8, $9, $19 + 16 | 0) | 0) <= -1) {
   HEAP32[$13 >> 2] = -1;
   $20 = -6;
   break label$1;
  }
  $20 = get_matrix_code($19 + 16 | 0, $20, $13, $14, $15, $16, $17);
  if (!$18) {
   break label$1;
  }
  HEAP32[$18 >> 2] = 0;
  HEAP32[$18 + 4 >> 2] = 0;
 }
 label$7 : {
  if (($2 | 0) == 2 | $2 >>> 0 > 4) {
   break label$7;
  }
  if (!$0) {
   $21 = -1;
   HEAP32[$10 >> 2] = -1;
   break label$7;
  }
  $13 = HEAP32[$0 + 28 >> 2];
  $14 = $13 << 2;
  label$9 : {
   if ($2 >>> 0 > 3) {
    break label$9;
   }
   label$10 : {
    switch ($2 - 1 | 0) {
    case 0:
    case 1:
     break label$9;
    default:
     break label$10;
    }
   }
   if ((arPattGetImage2($1, 0, $13, $14, $3, $4, $5, $6, $7, $8, $9, $19 + 16 | 0) | 0) <= -1) {
    HEAP32[$10 >> 2] = -1;
    $21 = -6;
    break label$7;
   }
   $21 = pattern_match($0, 0, $19 + 16 | 0, HEAP32[$0 + 28 >> 2], $10, $11, $12);
   break label$7;
  }
  if ((arPattGetImage2($1, 1, $13, $14, $3, $4, $5, $6, $7, $8, $9, $19 + 16 | 0) | 0) <= -1) {
   HEAP32[$10 >> 2] = -1;
   $21 = -6;
   break label$7;
  }
  $21 = pattern_match($0, 1, $19 + 16 | 0, HEAP32[$0 + 28 >> 2], $10, $11, $12);
 }
 label$13 : {
  if (($20 | 0) == 1) {
   break label$13;
  }
  if (($21 | 0) == 1) {
   $21 = $20;
   break label$13;
  }
  $21 = ($21 & $20) >> 31 & $21;
 }
 global$0 = $19 + 12304 | 0;
 return $21;
}
function arParamIdeal2Observ($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $5 = $5 + -1 | 0;
 if ($5 >>> 0 <= 3) {
  label$2 : {
   label$3 : {
    switch ($5 - 1 | 0) {
    case 2:
     $7 = HEAPF64[$0 + 48 >> 3];
     $6 = HEAPF64[$0 + 64 >> 3];
     $9 = HEAPF64[$0 + 32 >> 3];
     $1 = ($1 - $7) * $6 / $9;
     $10 = HEAPF64[$0 + 56 >> 3];
     $11 = HEAPF64[$0 + 40 >> 3];
     $2 = ($2 - $10) * $6 / $11;
     $6 = $1 * $1 + $2 * $2;
     $8 = HEAPF64[$0 >> 3] * $6 + 1 + $6 * ($6 * HEAPF64[$0 + 8 >> 3]);
     $12 = $7;
     $13 = $9;
     $7 = HEAPF64[$0 + 24 >> 3];
     $9 = HEAPF64[$0 + 16 >> 3];
     HEAPF64[$3 >> 3] = $12 + $13 * ($7 * ($6 + $1 * ($1 + $1)) + ($2 * (($9 + $9) * $1) + $1 * $8));
     $1 = $10 + $11 * ($2 * (($7 + $7) * $1) + ($9 * ($6 + $2 * ($2 + $2)) + $2 * $8));
     break label$2;
    case 1:
     $8 = HEAPF64[$0 + 16 >> 3];
     $2 = $8 * ($2 - HEAPF64[$0 + 8 >> 3]);
     $6 = HEAPF64[$0 >> 3];
     $1 = ($1 - $6) * $8;
     if (!($1 != 0 | $2 != 0)) {
      HEAPF64[$3 >> 3] = $6;
      $1 = HEAPF64[$0 + 8 >> 3];
      break label$2;
     }
     $7 = $1;
     $1 = $1 * $1 + $2 * $2;
     $1 = 1 - $1 * (HEAPF64[$0 + 32 >> 3] / 1e8) + $1 * ($1 * (HEAPF64[$0 + 40 >> 3] / 1e8 / -1e5));
     HEAPF64[$3 >> 3] = $6 + HEAPF64[$0 + 24 >> 3] * ($7 * $1);
     $1 = HEAPF64[$0 + 8 >> 3] + $2 * $1;
     break label$2;
    case 0:
     $8 = HEAPF64[$0 + 16 >> 3];
     $2 = $8 * ($2 - HEAPF64[$0 + 8 >> 3]);
     $6 = HEAPF64[$0 >> 3];
     $1 = ($1 - $6) * $8;
     if (!($1 != 0 | $2 != 0)) {
      HEAPF64[$3 >> 3] = $6;
      $1 = HEAPF64[$0 + 8 >> 3];
      break label$2;
     }
     $7 = $1;
     $1 = $1 * $1 + $2 * $2;
     $1 = 1 - $1 * (HEAPF64[$0 + 24 >> 3] / 1e8) + $1 * ($1 * (HEAPF64[$0 + 32 >> 3] / 1e8 / -1e5));
     HEAPF64[$3 >> 3] = $6 + $7 * $1;
     $1 = HEAPF64[$0 + 8 >> 3] + $2 * $1;
     break label$2;
    default:
     break label$3;
    }
   }
   $8 = HEAPF64[$0 + 16 >> 3];
   $2 = $8 * ($2 - HEAPF64[$0 + 8 >> 3]);
   $6 = HEAPF64[$0 >> 3];
   $1 = ($1 - $6) * $8;
   if (!($1 != 0 | $2 != 0)) {
    HEAPF64[$3 >> 3] = $6;
    $1 = HEAPF64[$0 + 8 >> 3];
    break label$2;
   }
   $7 = $1;
   $1 = ($1 * $1 + $2 * $2) * (HEAPF64[$0 + 24 >> 3] / -1e8) + 1;
   HEAPF64[$3 >> 3] = $6 + $7 * $1;
   $1 = HEAPF64[$0 + 8 >> 3] + $2 * $1;
  }
  HEAPF64[$4 >> 3] = $1;
 }
}
function getMultiEachMarkerInfo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $3 + 44 | 0), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($3 + 40 | 0, $3 + 32 | 0)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $4 = ($1 | 0) >= 0;
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($3 + 44 | 0) + 248 | 0;
  if (!(std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0) >>> 0 > $1 >>> 0 ? $4 : 0)) {
   $0 = HEAP32[7841];
   break label$1;
  }
  $0 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($0, $1);
  label$4 : {
   if (($2 | 0) >= 0) {
    $0 = HEAP32[$0 + 4 >> 2];
    if (HEAP32[$0 + 4 >> 2] > ($2 | 0)) {
     break label$4;
    }
   }
   $0 = HEAP32[7840];
   break label$1;
  }
  $0 = HEAP32[$0 >> 2] + Math_imul($2, 320) | 0;
  matrixCopy($0 + 16 | 0);
  $1 = HEAP32[$0 + 304 >> 2];
  $2 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  HEAPF64[$3 + 16 >> 3] = HEAPF64[$0 + 8 >> 3];
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = $1;
  emscripten_asm_const_iii(0, 8288, $3 | 0) | 0;
  $0 = 0;
 }
 global$0 = $3 + 48 | 0;
 return $0 | 0;
}
function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $4 = $3 & 2147483647;
 $8 = $4;
 $4 = $4 + -1006698496 | 0;
 $7 = $2;
 $5 = $2;
 if ($2 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $9 = $5;
 $5 = $4;
 $4 = $8 + -1140785152 | 0;
 $10 = $7;
 if ($7 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 label$1 : {
  if (($4 | 0) == ($5 | 0) & $9 >>> 0 < $10 >>> 0 | $5 >>> 0 < $4 >>> 0) {
   $4 = $3 << 4 | $2 >>> 28;
   $2 = $2 << 4 | $1 >>> 28;
   $1 = $1 & 268435455;
   $7 = $1;
   if (($1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1 >>> 0 > 134217728) {
    $4 = $4 + 1073741824 | 0;
    $0 = $2 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4 = $4 + 1 | 0;
    }
    $5 = $0;
    break label$1;
   }
   $5 = $2;
   $4 = $4 - (($2 >>> 0 < 0) + -1073741824 | 0) | 0;
   if ($0 | $7 ^ 134217728) {
    break label$1;
   }
   $0 = $5 + ($5 & 1) | 0;
   if ($0 >>> 0 < $5 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if (!(!$7 & ($8 | 0) == 2147418112 ? !($0 | $1) : ($8 | 0) == 2147418112 & $7 >>> 0 < 0 | $8 >>> 0 < 2147418112)) {
   $4 = $3 << 4 | $2 >>> 28;
   $5 = $2 << 4 | $1 >>> 28;
   $4 = $4 & 524287 | 2146959360;
   break label$1;
  }
  $5 = 0;
  $4 = 2146435072;
  if (($8 | 0) == 1140785151 & $7 >>> 0 > 4294967295 | $8 >>> 0 > 1140785151) {
   break label$1;
  }
  $4 = 0;
  $7 = $8 >>> 16;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $4 = $3 & 65535 | 65536;
  __lshrti3($6, $0, $1, $2, $4, 15361 - $7 | 0);
  __ashlti3($6 + 16 | 0, $0, $1, $2, $4, $7 + -15233 | 0);
  $2 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$6 + 8 >> 2];
  $4 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
  $5 = $0 << 4 | $2 >>> 28;
  $0 = $2 & 268435455;
  $2 = $0;
  $1 = HEAP32[$6 >> 2] | ((HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2]) != 0 | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2]) != 0);
  if (($0 | 0) == 134217728 & $1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
   $0 = $5 + 1 | 0;
   if ($0 >>> 0 < 1) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if ($1 | $2 ^ 134217728) {
   break label$1;
  }
  $0 = $5 + ($5 & 1) | 0;
  if ($0 >>> 0 < $5 >>> 0) {
   $4 = $4 + 1 | 0;
  }
  $5 = $0;
 }
 global$0 = $6 + 32 | 0;
 $0 = $3 & -2147483648 | $4;
 wasm2js_scratch_store_i32(0, $5 | 0);
 wasm2js_scratch_store_i32(1, $0 | 0);
 return +wasm2js_scratch_load_f64();
}
function qsort($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 208 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 1;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1 : {
  $6 = $1 << 3;
  if (!$6) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = 8;
  HEAP32[$2 + 20 >> 2] = 8;
  $1 = 8;
  $5 = 8;
  $3 = 2;
  while (1) {
   $4 = $1;
   $1 = ($5 + 8 | 0) + $1 | 0;
   HEAP32[($2 + 16 | 0) + ($3 << 2) >> 2] = $1;
   $3 = $3 + 1 | 0;
   $5 = $4;
   if ($1 >>> 0 < $6 >>> 0) {
    continue;
   }
   break;
  }
  $4 = ($0 + $6 | 0) + -8 | 0;
  label$3 : {
   if ($4 >>> 0 <= $0 >>> 0) {
    $3 = 1;
    $1 = 1;
    break label$3;
   }
   $3 = 1;
   $1 = 1;
   while (1) {
    label$6 : {
     if (($3 & 3) == 3) {
      sift($0, $1, $2 + 16 | 0);
      shr($2 + 8 | 0, 2);
      $1 = $1 + 2 | 0;
      break label$6;
     }
     $5 = $1 + -1 | 0;
     label$8 : {
      if (HEAPU32[($2 + 16 | 0) + ($5 << 2) >> 2] >= $4 - $0 >>> 0) {
       trinkle($0, $2 + 8 | 0, $1, 0, $2 + 16 | 0);
       break label$8;
      }
      sift($0, $1, $2 + 16 | 0);
     }
     if (($1 | 0) == 1) {
      shl($2 + 8 | 0, 1);
      $1 = 0;
      break label$6;
     }
     shl($2 + 8 | 0, $5);
     $1 = 1;
    }
    $3 = HEAP32[$2 + 8 >> 2] | 1;
    HEAP32[$2 + 8 >> 2] = $3;
    $0 = $0 + 8 | 0;
    if ($0 >>> 0 < $4 >>> 0) {
     continue;
    }
    break;
   }
  }
  trinkle($0, $2 + 8 | 0, $1, 0, $2 + 16 | 0);
  while (1) {
   label$12 : {
    label$13 : {
     label$14 : {
      if (!(($1 | 0) != 1 | ($3 | 0) != 1)) {
       if (HEAP32[$2 + 12 >> 2]) {
        break label$14;
       }
       break label$1;
      }
      if (($1 | 0) > 1) {
       break label$13;
      }
     }
     $5 = $2 + 8 | 0;
     $4 = pntz($2 + 8 | 0);
     shr($5, $4);
     $3 = HEAP32[$2 + 8 >> 2];
     $1 = $1 + $4 | 0;
     break label$12;
    }
    shl($2 + 8 | 0, 2);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] ^ 7;
    shr($2 + 8 | 0, 1);
    $5 = $0 + -8 | 0;
    $4 = $1 + -2 | 0;
    trinkle($5 - HEAP32[($2 + 16 | 0) + ($4 << 2) >> 2] | 0, $2 + 8 | 0, $1 + -1 | 0, 1, $2 + 16 | 0);
    shl($2 + 8 | 0, 1);
    $3 = HEAP32[$2 + 8 >> 2] | 1;
    HEAP32[$2 + 8 >> 2] = $3;
    trinkle($5, $2 + 8 | 0, $4, 1, $2 + 16 | 0);
    $1 = $4;
   }
   $0 = $0 + -8 | 0;
   continue;
  }
 }
 global$0 = $2 + 208 | 0;
}
function arGetTransMatSquare($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 288 | 0;
 global$0 = $4;
 $5 = $1 + 20 | 0;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2] <= -1) {
   break label$1;
  }
  $5 = $1 + 24 | 0;
  if (HEAP32[$1 + 8 >> 2] <= -1) {
   break label$1;
  }
  $5 = $1 + 16 | 0;
 }
 $7 = HEAP32[$5 >> 2];
 $1 = $1 + 168 | 0;
 $5 = ((4 - $7 | 0) % 4 << 4) + $1 | 0;
 $6 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 224 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 228 >> 2] = $6;
 $6 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 232 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 236 >> 2] = $6;
 $5 = $1 + ((5 - $7 | 0) % 4 << 4) | 0;
 $6 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 240 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 244 >> 2] = $6;
 $6 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 248 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 252 >> 2] = $6;
 $5 = $1 + ((6 - $7 | 0) % 4 << 4) | 0;
 $6 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 256 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + 260 >> 2] = $6;
 $6 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 264 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 268 >> 2] = $6;
 $1 = $1 + ((7 - $7 | 0) % 4 << 4) | 0;
 $7 = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 + 272 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 276 >> 2] = $7;
 $7 = HEAP32[$1 + 8 >> 2];
 $1 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 216 >> 2] = 0;
 HEAP32[$4 + 220 >> 2] = 0;
 $8 = $2 * -.5;
 HEAPF64[$4 + 208 >> 3] = $8;
 HEAP32[$4 + 192 >> 2] = 0;
 HEAP32[$4 + 196 >> 2] = 0;
 HEAPF64[$4 + 184 >> 3] = $8;
 HEAP32[$4 + 168 >> 2] = 0;
 HEAP32[$4 + 172 >> 2] = 0;
 $2 = $2 * .5;
 HEAPF64[$4 + 160 >> 3] = $2;
 HEAP32[$4 + 280 >> 2] = $7;
 HEAP32[$4 + 284 >> 2] = $1;
 HEAPF64[$4 + 200 >> 3] = $8;
 HEAPF64[$4 + 176 >> 3] = $2;
 HEAPF64[$4 + 152 >> 3] = $2;
 HEAP32[$4 + 144 >> 2] = 0;
 HEAP32[$4 + 148 >> 2] = 0;
 HEAPF64[$4 + 136 >> 3] = $2;
 HEAPF64[$4 + 128 >> 3] = $8;
 HEAP32[$4 + 120 >> 2] = 4;
 HEAP32[$4 + 116 >> 2] = $4 + 128;
 HEAP32[$4 + 112 >> 2] = $4 + 224;
 $1 = (icpGetInitXw2Xc_from_PlanarData(HEAP32[$0 >> 2], $4 + 224 | 0, $4 + 128 | 0, $4 + 16 | 0) | 0) < 0;
 $2 = 1e8;
 label$2 : {
  if ($1) {
   break label$2;
  }
  $0 = icpPoint(HEAP32[$0 >> 2], $4 + 112 | 0, $4 + 16 | 0, $3, $4 + 8 | 0);
  $2 = ($0 | 0) < 0 ? 1e8 : HEAPF64[$4 + 8 >> 3];
 }
 global$0 = $4 + 288 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = $0 + 288 | 0;
 $2 = $0 + 332 | 0;
 $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
 $1 = HEAP32[$1 + 12 >> 2];
 $0 = $1;
 while (1) {
  if ($0 >>> 0 < $6 >>> 0) {
   $4 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($2, $0) >> 2];
   $5 = HEAP32[$4 + 8 >> 2];
   if ($5 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3) >>> 0) {
    return 1;
   }
   wasm2js_i32$0 = $4, wasm2js_i32$1 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($3, $5) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___dropBack_28unsigned_20long_29($2, $1);
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0);
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, 0);
  HEAP32[$2 + 8 >> 2] = $1;
  if ($1) {
   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2 + 8 | 0);
  } else {
   $1 = 0;
  }
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $4 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 56 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($2 + 48 | 0, $0, $1);
  $0 = HEAP32[$2 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if ($28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 26460);
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 20 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  }
  label$3 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
     break label$3;
    }
   }
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20748);
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  }
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, HEAP32[$2 + 48 >> 2] ? 20315 : 20318);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($4);
 }
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  label$2 : {
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
   if (($1 | 0) != 68) {
    if (($1 & 255) != 84) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0);
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 12 | 0);
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0);
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 8 | 0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function addMultiMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $3 = -1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2, $2 + 8 | 0)) {
   break label$1;
  }
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0);
  if (!loadMultiMarker_28char_20const__2c_20ARHandle__2c_20ARPattHandle___2c_20ARMultiMarkerInfoT___29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), HEAP32[$0 + 216 >> 2], $0 + 220 | 0, $0 + 224 | 0)) {
   arLog(3, 7767, 0);
   break label$1;
  }
  $1 = $0 + 248 | 0;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 224 >> 2];
  std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___push_back_28multi_marker_20const__29($1, $2);
  $3 = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $3 | 0;
}
function PCA($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = -1;
 label$1 : {
  $7 = HEAP32[$0 + 4 >> 2];
  label$2 : {
   if (($7 | 0) < 2) {
    break label$2;
   }
   $4 = HEAP32[$0 + 8 >> 2];
   if (($4 | 0) < 2 | ($4 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $5 = ($4 | 0) < ($7 | 0) ? $4 : $7;
   if (($5 | 0) != HEAP32[$1 + 4 >> 2] | HEAP32[$2 + 4 >> 2] != ($5 | 0)) {
    break label$2;
   }
   $6 = arMatrixAlloc($5, $5);
   if (!(HEAP32[$6 + 8 >> 2] == ($5 | 0) ? HEAP32[$6 + 4 >> 2] == ($5 | 0) : 0)) {
    break label$1;
   }
   label$5 : {
    $3 = ($7 | 0) >= ($4 | 0);
    if (!$3) {
     if ((x_by_xt($0, $6) | 0) > -1) {
      break label$5;
     }
     break label$1;
    }
    if ((xt_by_x($0, $6) | 0) > -1) {
     break label$5;
    }
    break label$1;
   }
   if ((QRM($6, $2) | 0) <= -1) {
    break label$1;
   }
   label$8 : {
    if (!$3) {
     if ((EV_create($0, $6, $1, $2) | 0) > -1) {
      break label$8;
     }
     break label$1;
    }
    $0 = HEAP32[$1 >> 2];
    $4 = HEAP32[$6 >> 2];
    $1 = 0;
    while (1) {
     label$11 : {
      if (($1 | 0) >= ($5 | 0)) {
       break label$11;
      }
      $3 = 0;
      if (HEAPF64[HEAP32[$2 >> 2] + ($1 << 3) >> 3] < 1e-16) {
       break label$11;
      }
      while (1) {
       if (($3 | 0) < ($5 | 0)) {
        $7 = HEAP32[$4 + 4 >> 2];
        HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$0 + 4 >> 2] = $7;
        $3 = $3 + 1 | 0;
        $0 = $0 + 8 | 0;
        $4 = $4 + 8 | 0;
        continue;
       }
       break;
      }
      $1 = $1 + 1 | 0;
      continue;
     }
     break;
    }
    while (1) {
     if (($1 | 0) >= ($5 | 0)) {
      break label$8;
     }
     $3 = HEAP32[$2 >> 2] + ($1 << 3) | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = 0;
     while (1) {
      if (($3 | 0) < ($5 | 0)) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$0 + 4 >> 2] = 0;
       $3 = $3 + 1 | 0;
       $0 = $0 + 8 | 0;
       continue;
      }
      break;
     }
     $1 = $1 + 1 | 0;
     continue;
    }
   }
   arMatrixFree($6);
   $3 = 0;
  }
  return $3;
 }
 arMatrixFree($6);
 return -1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0 + 368 | 0, $1, $2, $3, $4, $5, $6);
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 if (($28anonymous_20namespace_29__OutputStream__back_28_29_20const($1) | 0) != 93) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 26460);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 28 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 28476);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = $0 + 12 | 0;
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__NodeOrString__isString_28_29_20const($3)) {
   $28anonymous_20namespace_29__itanium_demangle__NodeOrString__asString_28_29_20const($2 + 40 | 0, $3);
   $3 = HEAP32[$2 + 44 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
   break label$2;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__NodeOrString__isNode_28_29_20const($3)) {
   break label$2;
  }
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$3 >> 2], $1);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 23751);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $7 = $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 48 | 0, $1 + 12 | 0);
 $8 = $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 32 | 0, $1 + 16 | 0);
 $4 = HEAP32[$1 + 4 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = 1;
 $6 = HEAP32[$1 + 16 >> 2];
 $5 = $6 + 1 | 0;
 label$1 : {
  if ($5 >>> 0 > 1) {
   while (1) {
    if ($3 >>> 0 >= $6 >>> 0) {
     break label$1;
    }
    $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 21768);
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $5;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
    HEAP32[$1 + 12 >> 2] = $3;
    $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  if (!($5 - 1)) {
   $28anonymous_20namespace_29__OutputStream__setCurrentPosition_28unsigned_20long_29($1, $4);
   break label$1;
  }
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 21764);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($8);
 $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($7);
 global$0 = $2 - -64 | 0;
}
function void_20std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____push_back_slow_path_multi_marker_20const___28multi_marker_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $2 = std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0);
 $4 = $2;
 $2 = std____2____split_buffer_multi_marker_2c_20std____2__allocator_multi_marker_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_multi_marker___29($3 + 8 | 0, std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0) + 1 | 0), std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0), $2);
 void_20std____2__allocator_traits_std____2__allocator_multi_marker__20___construct_multi_marker_2c_20multi_marker_20const___28std____2__allocator_multi_marker___2c_20multi_marker__2c_20multi_marker_20const__29($4, HEAP32[$2 + 8 >> 2], $1);
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 8;
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____swap_out_circular_buffer_28std____2____split_buffer_multi_marker_2c_20std____2__allocator_multi_marker_____29($0, $2);
 $0 = $2;
 $1 = HEAP32[$2 + 4 >> 2];
 while (1) {
  if (HEAP32[$0 + 8 >> 2] != ($1 | 0)) {
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -8;
   continue;
  }
  break;
 }
 if (HEAP32[$2 >> 2]) {
  $0 = HEAP32[$2 >> 2];
  HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($2) >> 2];
  dlfree($0);
 }
 global$0 = $3 + 32 | 0;
}
function getTransMatMultiSquareRobust($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $4 = ($1 | 0) >= 0;
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0);
  $3 = $0 + 248 | 0;
  if (!(std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($3) >>> 0 > $1 >>> 0 ? $4 : 0)) {
   $0 = HEAP32[7841];
   break label$1;
  }
  $1 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($3, $1);
  $3 = HEAP32[$0 + 228 >> 2];
  $0 = HEAP32[$0 + 216 >> 2];
  $4 = $0 + 48 | 0;
  $5 = HEAP32[$0 + 44 >> 2];
  $0 = HEAP32[$1 + 4 >> 2];
  arGetTransMatMultiSquare2($3, $4, $5, $0, 1);
  matrixCopy($0 + 8 | 0);
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function getTransMatMultiSquare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $4 = ($1 | 0) >= 0;
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0);
  $3 = $0 + 248 | 0;
  if (!(std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($3) >>> 0 > $1 >>> 0 ? $4 : 0)) {
   $0 = HEAP32[7841];
   break label$1;
  }
  $1 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($3, $1);
  $3 = HEAP32[$0 + 228 >> 2];
  $0 = HEAP32[$0 + 216 >> 2];
  $4 = $0 + 48 | 0;
  $5 = HEAP32[$0 + 44 >> 2];
  $0 = HEAP32[$1 + 4 >> 2];
  arGetTransMatMultiSquare2($3, $4, $5, $0, 0);
  matrixCopy($0 + 8 | 0);
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function arGetTransMatSquareCont($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 192 | 0;
 global$0 = $3;
 $6 = $1 + 168 | 0;
 $5 = $6;
 $4 = $1 + 20 | 0;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2] <= -1) {
   break label$1;
  }
  $4 = $1 + 24 | 0;
  if (HEAP32[$1 + 8 >> 2] <= -1) {
   break label$1;
  }
  $4 = $1 + 16 | 0;
 }
 $7 = HEAP32[$4 >> 2];
 $4 = $5 + ((4 - $7 | 0) % 4 << 4) | 0;
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 128 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 132 >> 2] = $1;
 $1 = HEAP32[$4 + 12 >> 2];
 HEAP32[$3 + 136 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$3 + 140 >> 2] = $1;
 $5 = ((5 - $7 | 0) % 4 << 4) + $6 | 0;
 $1 = HEAP32[$5 + 4 >> 2];
 HEAP32[$3 + 144 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 + 148 >> 2] = $1;
 $1 = HEAP32[$5 + 12 >> 2];
 HEAP32[$3 + 152 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$3 + 156 >> 2] = $1;
 $5 = ((6 - $7 | 0) % 4 << 4) + $6 | 0;
 $1 = HEAP32[$5 + 4 >> 2];
 HEAP32[$3 + 160 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 + 164 >> 2] = $1;
 $1 = HEAP32[$5 + 12 >> 2];
 HEAP32[$3 + 168 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$3 + 172 >> 2] = $1;
 $4 = ((7 - $7 | 0) % 4 << 4) + $6 | 0;
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$3 + 176 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 180 >> 2] = $1;
 $5 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$4 + 12 >> 2];
 HEAP32[$3 + 120 >> 2] = 0;
 HEAP32[$3 + 124 >> 2] = 0;
 $8 = $2 * -.5;
 HEAPF64[$3 + 112 >> 3] = $8;
 HEAP32[$3 + 96 >> 2] = 0;
 HEAP32[$3 + 100 >> 2] = 0;
 HEAPF64[$3 + 88 >> 3] = $8;
 HEAP32[$3 + 72 >> 2] = 0;
 HEAP32[$3 + 76 >> 2] = 0;
 $2 = $2 * .5;
 HEAPF64[$3 - -64 >> 3] = $2;
 HEAP32[$3 + 184 >> 2] = $5;
 HEAP32[$3 + 188 >> 2] = $1;
 HEAPF64[$3 + 104 >> 3] = $8;
 HEAPF64[$3 + 80 >> 3] = $2;
 HEAPF64[$3 + 56 >> 3] = $2;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAPF64[$3 + 40 >> 3] = $2;
 HEAPF64[$3 + 32 >> 3] = $8;
 HEAP32[$3 + 24 >> 2] = 4;
 HEAP32[$3 + 20 >> 2] = $3 + 32;
 HEAP32[$3 + 16 >> 2] = $3 + 128;
 icpPoint(HEAP32[$0 >> 2], $3 + 16 | 0, 32256, 32256, $3 + 8 | 0);
 global$0 = $3 + 192 | 0;
}
function __trunctfsf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 32 | 0;
 global$0 = $7;
 $5 = $3 & 2147483647;
 $6 = $5;
 $4 = $5 + -1065418752 | 0;
 $5 = $2;
 $8 = $5;
 if ($5 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $10 = $8;
 $9 = $6 + -1082064896 | 0;
 $8 = $5;
 if ($5 >>> 0 < 0) {
  $9 = $9 + 1 | 0;
 }
 label$1 : {
  if (($4 | 0) == ($9 | 0) & $10 >>> 0 < $8 >>> 0 | $4 >>> 0 < $9 >>> 0) {
   $6 = ($3 & 33554431) << 7 | $2 >>> 25;
   $5 = 0;
   $9 = $5;
   $8 = $2 & 33554431;
   if (!(!$5 & ($8 | 0) == 16777216 ? !($0 | $1) : !$5 & $8 >>> 0 < 16777216 | $5 >>> 0 < 0)) {
    $4 = $6 + 1073741825 | 0;
    break label$1;
   }
   $4 = $6 + 1073741824 | 0;
   if ($8 ^ 16777216 | $0 | ($1 | $9)) {
    break label$1;
   }
   $4 = ($4 & 1) + $4 | 0;
   break label$1;
  }
  if (!(!$5 & ($6 | 0) == 2147418112 ? !($0 | $1) : ($6 | 0) == 2147418112 & $5 >>> 0 < 0 | $6 >>> 0 < 2147418112)) {
   $4 = (($3 & 33554431) << 7 | $2 >>> 25) & 4194303 | 2143289344;
   break label$1;
  }
  $4 = 2139095040;
  if (($6 | 0) == 1082064895 & $5 >>> 0 > 4294967295 | $6 >>> 0 > 1082064895) {
   break label$1;
  }
  $4 = 0;
  $6 = $6 >>> 16;
  if ($6 >>> 0 < 16145) {
   break label$1;
  }
  $4 = $3 & 65535 | 65536;
  __lshrti3($7, $0, $1, $2, $4, 16257 - $6 | 0);
  __ashlti3($7 + 16 | 0, $0, $1, $5, $4, $6 + -16129 | 0);
  $1 = HEAP32[$7 + 8 >> 2];
  $4 = (HEAP32[$7 + 12 >> 2] & 33554431) << 7 | $1 >>> 25;
  $5 = HEAP32[$7 + 4 >> 2];
  $6 = $5;
  $0 = 0;
  $8 = $0;
  $9 = HEAP32[$7 >> 2] | ((HEAP32[$7 + 16 >> 2] | HEAP32[$7 + 24 >> 2]) != 0 | (HEAP32[$7 + 20 >> 2] | HEAP32[$7 + 28 >> 2]) != 0);
  $1 = $1 & 33554431;
  if (!(!$0 & ($1 | 0) == 16777216 ? !($5 | $9) : !$0 & $1 >>> 0 < 16777216 | $0 >>> 0 < 0)) {
   $4 = $4 + 1 | 0;
   break label$1;
  }
  if ($1 ^ 16777216 | $9 | ($6 | $8)) {
   break label$1;
  }
  $4 = ($4 & 1) + $4 | 0;
 }
 global$0 = $7 + 32 | 0;
 return wasm2js_scratch_store_i32(0, $3 & -2147483648 | $4), wasm2js_scratch_load_f32();
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
  return;
 }
 $7 = HEAPU8[$1 + 53 | 0];
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $8 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = HEAPU8[$1 + 53 | 0];
 $7 = $7 | $10;
 $11 = HEAPU8[$1 + 52 | 0];
 $8 = $8 | $11;
 label$2 : {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = $9 + ($6 << 3) | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4 : {
    if ($11) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$10) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = HEAPU8[$1 + 53 | 0];
   $7 = $10 | $7;
   $11 = HEAPU8[$1 + 52 | 0];
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($6 >>> 0 < $9 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 16 | 0;
 global$0 = $7;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 36);
 $1 = HEAP32[$1 >> 2];
 $2 = HEAP32[$2 >> 2];
 $8 = HEAP32[$3 + 4 >> 2];
 HEAP32[$7 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$7 + 12 >> 2] = $8;
 $3 = HEAP32[$4 >> 2];
 $4 = HEAP32[$5 >> 2];
 $5 = HEAPU8[$6 | 0];
 $6 = HEAP32[$7 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $7, $3, $4, $5);
 global$0 = $7 + 16 | 0;
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___erase_28std____2____hash_const_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $2 = std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($1 + 24 | 0, $0);
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___remove_28std____2____hash_const_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($1 + 8 | 0, $0);
 std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___reset_28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____29($1 + 8 | 0);
 global$0 = $1 + 32 | 0;
}
function __cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 4512 | 0;
 global$0 = $4;
 label$1 : {
  if (!(!$1 | $2 ? $0 : 0)) {
   $0 = 0;
   if (!$3) {
    break label$1;
   }
   HEAP32[$3 >> 2] = -3;
   break label$1;
  }
  $6 = $4 + 32 | 0;
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($6, $0, strlen($0) + $0 | 0);
  $0 = $4 + 8 | 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 16 >> 2] = -1;
  $7 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($6);
  label$3 : {
   if (!$7) {
    $5 = -2;
    break label$3;
   }
   $5 = -1;
   if (!$28anonymous_20namespace_29__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__OutputStream__2c_20unsigned_20long_29($1, $2, $0)) {
    break label$3;
   }
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($7, $0);
   $5 = 0;
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($0, 0);
   if ($2) {
    HEAP32[$2 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   $1 = HEAP32[$0 >> 2];
  }
  if ($3) {
   HEAP32[$3 >> 2] = $5;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($6);
  $0 = $5 ? 0 : $1;
 }
 global$0 = $4 + 4512 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 24540);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 24546);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0);
 if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($1)) {
  $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
  wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1) << 2) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($1);
  return $0;
 }
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clearInline_28_29($1);
 return $0;
}
function memmove($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  label$2 : {
   if ($1 + $2 >>> 0 > $0 >>> 0) {
    $4 = $0 + $2 | 0;
    if ($4 >>> 0 > $1 >>> 0) {
     break label$2;
    }
   }
   memcpy($0, $1, $2);
   return;
  }
  $3 = ($0 ^ $1) & 3;
  label$4 : {
   label$5 : {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($3) {
      break label$4;
     }
     if (!($0 & 3)) {
      break label$5;
     }
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$0 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue;
      }
      break;
     }
     break label$5;
    }
    label$8 : {
     if ($3) {
      break label$8;
     }
     if ($4 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 + -1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$8;
     }
     while (1) {
      $2 = $2 + -4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 + -1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$4;
   }
   $3 = $2;
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $0 = $0 + 4 | 0;
    $3 = $3 + -4 | 0;
    if ($3 >>> 0 > 3) {
     continue;
    }
    break;
   }
   $2 = $2 & 3;
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$0 | 0] = HEAPU8[$1 | 0];
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 33) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 32 | 0);
  $1 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 32;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $3);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function arImageProcLumaHistAndBoxFilterWithBias($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 label$1 : {
  $3 = arImageProcLumaHist($0, $1);
  if (($3 | 0) < 0) {
   break label$1;
  }
  label$2 : {
   if (HEAP32[$0 >> 2]) {
    break label$2;
   }
   $2 = dlmalloc(Math_imul(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]));
   HEAP32[$0 >> 2] = $2;
   if ($2) {
    break label$2;
   }
   $3 = -1;
   break label$1;
  }
  while (1) {
   label$4 : {
    $3 = 0;
    $4 = HEAP32[$0 + 8 >> 2];
    if (($5 | 0) >= ($4 | 0)) {
     break label$4;
    }
    while (1) {
     label$6 : {
      $7 = 0;
      $8 = 0;
      $4 = -4;
      $6 = HEAP32[$0 + 4 >> 2];
      if (($3 | 0) >= ($6 | 0)) {
       break label$6;
      }
      while (1) {
       if (($4 | 0) <= 4) {
        label$9 : {
         $2 = $4 + $5 | 0;
         if (($2 | 0) < 0 | ($2 | 0) >= HEAP32[$0 + 8 >> 2]) {
          break label$9;
         }
         $10 = Math_imul($2, $6);
         $2 = -4;
         while (1) {
          if (($2 | 0) > 4) {
           break label$9;
          }
          $9 = $2 + $3 | 0;
          if (!(($9 | 0) < 0 | ($9 | 0) >= ($6 | 0))) {
           $8 = $8 + 1 | 0;
           $7 = HEAPU8[($9 + $10 | 0) + $1 | 0] + $7 | 0;
          }
          $2 = $2 + 1 | 0;
          continue;
         }
        }
        $4 = $4 + 1 | 0;
        continue;
       }
       break;
      }
      HEAP8[HEAP32[$0 >> 2] + (Math_imul($5, $6) + $3 | 0) | 0] = ($7 | 0) / ($8 | 0);
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    }
    $5 = $5 + 1 | 0;
    continue;
   }
   break;
  }
  $2 = 0;
  while (1) {
   if (($2 | 0) >= (Math_imul(HEAP32[$0 + 4 >> 2], $4) | 0)) {
    break label$1;
   }
   $1 = HEAP32[$0 >> 2] + $2 | 0;
   HEAP8[$1 | 0] = HEAPU8[$1 | 0] + -7;
   $2 = $2 + 1 | 0;
   $4 = HEAP32[$0 + 8 >> 2];
   continue;
  }
 }
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 17) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 16 | 0);
  $1 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 16;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $3);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 9) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 8 | 0);
  $1 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $3);
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function EV_create($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = -1;
 label$1 : {
  $5 = HEAP32[$0 + 4 >> 2];
  if (($5 | 0) < 1) {
   break label$1;
  }
  $9 = HEAP32[$0 + 8 >> 2];
  if (HEAP32[$1 + 4 >> 2] != ($5 | 0) | ($9 | 0) < 1 | (HEAP32[$1 + 8 >> 2] != ($5 | 0) | HEAP32[$2 + 4 >> 2] != ($5 | 0))) {
   break label$1;
  }
  if (HEAP32[$2 + 8 >> 2] != ($9 | 0) | HEAP32[$3 + 4 >> 2] != ($5 | 0)) {
   break label$1;
  }
  $7 = HEAP32[$2 >> 2];
  while (1) {
   label$3 : {
    label$4 : {
     if (($5 | 0) == ($6 | 0)) {
      $6 = $5;
      break label$4;
     }
     $8 = HEAPF64[HEAP32[$3 >> 2] + ($6 << 3) >> 3];
     if (!($8 < 1e-16)) {
      break label$3;
     }
    }
    while (1) if (($6 | 0) >= ($5 | 0)) {
     $4 = 0;
     break label$1;
    } else {
     $0 = HEAP32[$3 >> 2] + ($6 << 3) | 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     $4 = 0;
     while (1) {
      if (($4 | 0) < ($9 | 0)) {
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $4 = $4 + 1 | 0;
       $7 = $7 + 8 | 0;
       continue;
      }
      break;
     }
     $6 = $6 + 1 | 0;
     continue;
    }
   }
   $12 = Math_imul($5, $6);
   $13 = 1 / Math_sqrt(Math_abs($8));
   $10 = 0;
   while (1) {
    if (($9 | 0) != ($10 | 0)) {
     $2 = HEAP32[$0 >> 2] + ($10 << 3) | 0;
     $11 = HEAP32[$1 >> 2] + ($12 << 3) | 0;
     $4 = 0;
     $8 = 0;
     while (1) {
      if (($4 | 0) != ($5 | 0)) {
       $4 = $4 + 1 | 0;
       $8 = $8 + HEAPF64[$11 >> 3] * HEAPF64[$2 >> 3];
       $2 = ($9 << 3) + $2 | 0;
       $11 = $11 + 8 | 0;
       continue;
      }
      break;
     }
     HEAPF64[$7 >> 3] = $13 * $8;
     $10 = $10 + 1 | 0;
     $7 = $7 + 8 | 0;
     continue;
    }
    break;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 return $4;
}
function getMultiMarkerNum($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
   break label$1;
  }
  $3 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0);
  if (($1 | 0) < 0) {
   break label$1;
  }
  $3 = $3 + 248 | 0;
  if (std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($3) >>> 0 <= $1 >>> 0) {
   break label$1;
  }
  $0 = HEAP32[HEAP32[std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($3, $1) + 4 >> 2] + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 114)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 4);
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 86)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 2);
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 75)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 1);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function arGetMarkerInfo($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $16 = global$0 - 16 | 0;
 global$0 = $16;
 while (1) {
  if (($21 | 0) < ($5 | 0)) {
   $14 = ($22 << 8) + $11 | 0;
   $15 = Math_imul($21, 80048) + $4 | 0;
   HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
   label$3 : {
    if ((arParamObserv2IdealLTf($9, Math_fround(HEAPF64[$15 + 8 >> 3]), Math_fround(HEAPF64[$15 + 16 >> 3]), $16 + 12 | 0, $16 + 8 | 0) | 0) < 0) {
     break label$3;
    }
    HEAPF64[$14 + 56 >> 3] = HEAPF32[$16 + 12 >> 2];
    HEAPF64[$14 - -64 >> 3] = HEAPF32[$16 + 8 >> 2];
    $19 = $15 + 28 | 0;
    $20 = $15 + 40028 | 0;
    $17 = $15 + 80028 | 0;
    $15 = $14 + 168 | 0;
    if ((arGetLine($19, $20, $17, $9, $14 + 72 | 0, $15) | 0) < 0) {
     break label$3;
    }
    $17 = $15;
    $18 = $14 + 20 | 0;
    $15 = $14 + 40 | 0;
    $19 = $14 + 24 | 0;
    $20 = $14 + 48 | 0;
    $17 = arPattGetIDGlobal($6, $7, $8, $0, $1, $2, $3, $9, $17, $10, $14 + 8 | 0, $18, $15, $14 + 12 | 0, $19, $20, $13, $14 + 240 | 0, $14 + 248 | 0) + 6 | 0;
    if ($17 >>> 0 <= 6) {
     HEAP32[$14 + 236 >> 2] = HEAP32[($17 << 2) + 5696 >> 2];
    }
    label$5 : {
     label$6 : {
      if ($8 >>> 0 <= 1) {
       HEAP32[$14 + 4 >> 2] = HEAP32[$14 + 8 >> 2];
       break label$6;
      }
      if (($8 | 0) != 2) {
       break label$5;
      }
      HEAP32[$14 + 4 >> 2] = HEAP32[$14 + 12 >> 2];
      $18 = $19;
      $15 = $20;
     }
     HEAP32[$14 + 16 >> 2] = HEAP32[$18 >> 2];
     $18 = HEAP32[$15 + 4 >> 2];
     HEAP32[$14 + 32 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$14 + 36 >> 2] = $18;
    }
    $22 = $22 + 1 | 0;
   }
   $21 = $21 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$12 >> 2] = $22;
 global$0 = $16 + 16 | 0;
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
  HEAP32[$2 + 12 >> 2] = $1;
  label$2 : {
   if (!$1) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$2;
   }
   $1 = $2 + 12 | 0;
   $3 = $2 + 8 | 0;
   $1 = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$3 >> 2]);
   break label$1;
  }
  $1 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  label$2 : {
   while (1) {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 66)) {
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($2, $0);
     if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($2)) {
      break label$2;
     }
     wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $2 + 12 | 0, $2), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function addMarker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
   break label$1;
  }
  $3 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0);
  if (!loadMarker_28char_20const__2c_20int__2c_20ARHandle__2c_20ARPattHandle___29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), $3 + 260 | 0, $3 + 220 | 0)) {
   arLog(3, 7723, 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 260 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 28360);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $0 = $0 + 12 | 0;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__NodeOrString__isNode_28_29_20const($0)) {
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 >> 2], $1);
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__NodeOrString__isString_28_29_20const($0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__NodeOrString__asString_28_29_20const($2 + 32 | 0, $0);
  $0 = HEAP32[$2 + 36 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 23751);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function getTransMatSquareCont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($3 + 8 | 0, $3)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $4 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($3 + 12 | 0);
  $5 = HEAP32[$4 + 216 >> 2];
  if (HEAP32[$5 + 44 >> 2] <= ($1 | 0)) {
   $0 = HEAP32[7840];
   break label$1;
  }
  $0 = 0;
  arGetTransMatSquareCont(HEAP32[$4 + 228 >> 2], ($1 | 0) < 0 ? 31992 : (($1 << 8) + $5 | 0) + 48 | 0, +($2 | 0));
 }
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function getTransMatSquare($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($3 + 8 | 0, $3)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $4 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($3 + 12 | 0);
  $5 = HEAP32[$4 + 216 >> 2];
  if (HEAP32[$5 + 44 >> 2] <= ($1 | 0)) {
   $0 = HEAP32[7840];
   break label$1;
  }
  $0 = 0;
  arGetTransMatSquare(HEAP32[$4 + 228 >> 2], ($1 | 0) < 0 ? 31992 : (($1 << 8) + $5 | 0) + 48 | 0, +($2 | 0), 32256);
 }
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $1 = HEAP32[$1 >> 2];
 $7 = HEAP32[$2 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 + 12 >> 2] = $7;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAPU8[$4 | 0];
 $4 = HEAP32[$5 >> 2];
 $5 = HEAP32[$6 + 12 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $6, $2, $3, $4);
 global$0 = $6 + 16 | 0;
 return $0;
}
function setThreshold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0);
  if ($1 >>> 0 > 255) {
   break label$1;
  }
  $3 = HEAP32[$0 + 216 >> 2];
  $0 = $1;
  if (!$3 | $0 >>> 0 > 255) {
   $0 = -1;
  } else {
   HEAP32[$3 + 16 >> 2] = $0;
   $0 = 0;
  }
  if ($0) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $1;
  arLog(1, 7907, $2);
 }
 global$0 = $2 + 32 | 0;
}
function setPattRatio($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  $0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0);
  if ($1 <= Math_fround(0) | $1 >= Math_fround(1)) {
   break label$1;
  }
  $0 = HEAP32[$0 + 216 >> 2];
  if (!$0) {
   break label$1;
  }
  $3 = +$1;
  if (arSetPattRatio($0, $3)) {
   break label$1;
  }
  HEAPF64[$2 >> 3] = $3;
  arLog(1, 7851, $2);
 }
 global$0 = $2 + 32 | 0;
}
function getPattRatio($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $2 = -1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1, $1 + 8 | 0)) {
   break label$1;
  }
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  if (!$0) {
   break label$1;
  }
  if ($0) {
   $3 = HEAP32[$0 + 7062420 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$0 + 7062416 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $0 = 0;
  } else {
   $0 = -1;
  }
  $2 = $0 ? -1 : HEAPF64[$1 >> 3];
 }
 global$0 = $1 + 16 | 0;
 return +$2;
}
function setMarkerInfoDir($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($3 + 8 | 0, $3)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($3 + 12 | 0) + 216 >> 2];
  if (HEAP32[$0 + 44 >> 2] <= ($1 | 0)) {
   $0 = HEAP32[7840];
   break label$1;
  }
  HEAP32[(($1 | 0) < 0 ? 31992 : ($0 + ($1 << 8) | 0) + 48 | 0) + 16 >> 2] = $2;
  $0 = 0;
 }
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
 HEAP32[$2 + 12 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!$3) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
   HEAP32[$2 + 8 >> 2] = $3;
   if (!$3) {
    break label$2;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $2 + 12 | 0, $1, $2 + 8 | 0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function detectMarker($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 44 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1, $1 + 40 | 0)) {
   $0 = HEAP32[7839];
   break label$1;
  }
  $2 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 44 | 0);
  $0 = memset($1, 0, 40);
  $3 = HEAP32[$2 + 196 >> 2];
  HEAP32[$0 + 16 >> 2] = 1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 204 >> 2];
  $0 = arDetectMarker(HEAP32[$2 + 216 >> 2], $0);
 }
 global$0 = $1 + 48 | 0;
 return $0 | 0;
}
function setImageProcMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  $3 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0) + 216 >> 2];
  $0 = $1;
  if (!$3 | $0 >>> 0 > 1) {
   $0 = -1;
  } else {
   HEAP32[$3 + 20 >> 2] = $0;
   $0 = 0;
  }
  if ($0) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $1;
  arLog(1, 7985, $2);
 }
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = $2;
 $5 = $2;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
     break label$2;
    }
   }
   $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20748);
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 26460);
 }
 $6 = HEAP32[$4 + 4 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 + 20 >> 2] = $6;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 28592);
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 global$0 = $2 + 48 | 0;
}
function setLabelingMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  $3 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0) + 216 >> 2];
  $0 = $1;
  if (!$3 | $0 >>> 0 > 1) {
   $0 = -1;
  } else {
   HEAP32[$3 + 12 >> 2] = $0;
   $0 = 0;
  }
  if ($0) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $1;
  arLog(1, 7882, $2);
 }
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $3;
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 20398);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 22088);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 20 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $3 = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 >>> 0 <= 9) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0);
 }
 HEAP32[$3 + 12 >> 2] = $2;
 if ($2) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1 + 12 | 0);
 } else {
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function arLogv($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $2;
 label$1 : {
  if (!HEAPU8[$1 | 0] | (!$1 | HEAP32[7838] > ($0 | 0))) {
   break label$1;
  }
  $3 = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = $3;
  $2 = 0;
  $5 = vsnprintf(0, 0, $1, $3);
  if (!$5) {
   break label$1;
  }
  if ($0 >>> 0 <= 3) {
   $2 = strlen(HEAP32[($0 << 2) + 7488 >> 2]) + 3 | 0;
  }
  $6 = $2 + $5 | 0;
  $7 = $6 + 1 | 0;
  $3 = dlmalloc($7);
  if ($2) {
   HEAP32[$4 >> 2] = HEAP32[($0 << 2) + 7488 >> 2];
   snprintf($3, $2 + 1 | 0, 3070, $4);
  }
  vsnprintf($2 + $3 | 0, $5 + 1 | 0, $1, HEAP32[$4 + 12 >> 2]);
  $0 = HEAP32[7980];
  label$5 : {
   if ($0) {
    if (!HEAP32[7981]) {
     FUNCTION_TABLE[$0]($3);
     break label$5;
    }
    if (HEAP32[7982] != 31368) {
     $0 = HEAP32[7983];
     if (!$0) {
      break label$5;
     }
     $1 = HEAP32[7985];
     $2 = HEAPU8[31936] ? 4096 : 0;
     if ($1 >>> 0 >= $2 >>> 0) {
      break label$5;
     }
     $0 = $0 + $1 | 0;
     if ($6 >>> 0 <= ($2 - $1 | 0) + -4 >>> 0) {
      strncpy($0, $3, $7);
      HEAP32[7985] = HEAP32[7985] + $6;
      break label$5;
     }
     HEAP8[$0 | 0] = 3026478;
     HEAP8[$0 + 1 | 0] = 11822;
     HEAP8[$0 + 2 | 0] = 46;
     HEAP8[$0 + 3 | 0] = 0;
     HEAP32[7985] = $2;
     break label$5;
    }
    if (HEAP32[7985]) {
     FUNCTION_TABLE[HEAP32[7980]](HEAP32[7983]);
     HEAP32[7985] = 0;
    }
    FUNCTION_TABLE[HEAP32[7980]]($3);
    break label$5;
   }
   $0 = HEAP32[3338];
   fwrite($3, strlen($3), $0);
  }
  dlfree($3);
 }
 global$0 = $4 + 16 | 0;
}
function std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__tuple_int_20const___20std____2__forward_as_tuple_int_20const___28int_20const__29($0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 std____2__tuple___20std____2__forward_as_tuple___28_29();
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($1 + 24 | 0, $0, $1 + 16 | 0);
 $0 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______operator___28_29_20const($1 + 24 | 0);
 global$0 = $1 + 32 | 0;
 return $0 + 8 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 25800);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 24 | 0);
 $3 = HEAP32[$0 + 20 >> 2];
 $4 = HEAP32[$0 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3;
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 25808);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 - -64 | 0;
}
function getPatternDetectionMode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = -1;
  label$2 : {
   if (!$0) {
    break label$2;
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
   $2 = 0;
  }
  $0 = $2;
  $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function getImageProcMode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = -1;
  label$2 : {
   if (!$0) {
    break label$2;
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 20 >> 2];
   $2 = 0;
  }
  $0 = $2;
  $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function pop_arg($0, $1, $2) {
 label$1 : {
  label$2 : {
   if ($1 >>> 0 > 20) {
    break label$2;
   }
   $1 = $1 + -9 | 0;
   if ($1 >>> 0 > 9) {
    break label$2;
   }
   label$3 : {
    switch ($1 - 1 | 0) {
    default:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     return;
    case 0:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 3:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP16[$1 >> 1];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP8[$1 | 0];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 2:
    case 7:
     break label$1;
    case 8:
     break label$3;
    }
   }
   FUNCTION_TABLE[65]($0, $2);
  }
  return;
 }
 $1 = HEAP32[$2 >> 2] + 7 & -8;
 HEAP32[$2 >> 2] = $1 + 8;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam__20__20___operator_5b_5d_28int_20const__29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__tuple_int_20const___20std____2__forward_as_tuple_int_20const___28int_20const__29($0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 std____2__tuple___20std____2__forward_as_tuple___28_29();
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($1 + 24 | 0, $0, $1 + 16 | 0);
 $0 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______operator___28_29_20const($1 + 24 | 0);
 global$0 = $1 + 32 | 0;
 return $0 + 8 | 0;
}
function getThresholdMode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = $1 + 8 | 0;
  if (!$0 | !$2) {
   $0 = -1;
  } else {
   HEAP32[$2 >> 2] = HEAP32[$0 + 7062388 >> 2];
   $0 = 0;
  }
  $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function getLabelingMode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = $1 + 8 | 0;
  if (!$0 | !$2) {
   $0 = -1;
  } else {
   HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
   $0 = 0;
  }
  $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function getThreshold($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = $1 + 8 | 0;
  if (!$0 | !$2) {
   $0 = -1;
  } else {
   HEAP32[$2 >> 2] = HEAP32[$0 + 16 >> 2];
   $0 = 0;
  }
  $0 = $0 ? -1 : HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$1 >> 2];
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($1, 110);
 }
 label$2 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1)) {
   break label$2;
  }
  $2 = HEAP32[$1 >> 2];
  if (HEAP8[$2 | 0] + -48 >>> 0 >= 10) {
   break label$2;
  }
  while (1) {
   if (!(!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1) | HEAP8[$2 | 0] + -48 >>> 0 > 9)) {
    $2 = $2 + 1 | 0;
    HEAP32[$1 >> 2] = $2;
    continue;
   }
   break;
  }
  $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($0, $3, $2);
  return;
 }
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($0);
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  HEAP8[$3 + -1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$3 + -2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 + -3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$3 + -4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $3 = 0 - $0 & 3;
  $4 = $3 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$4 >> 2] = $1;
  $2 = $2 - $3 & -4;
  $3 = $2 + $4 | 0;
  HEAP32[$3 + -4 >> 2] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$3 + -8 >> 2] = $1;
  HEAP32[$3 + -12 >> 2] = $1;
  if ($2 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $1;
  HEAP32[$4 + 16 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$3 + -16 >> 2] = $1;
  HEAP32[$3 + -20 >> 2] = $1;
  HEAP32[$3 + -24 >> 2] = $1;
  HEAP32[$3 + -28 >> 2] = $1;
  $6 = $4 & 4 | 24;
  $2 = $2 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $3 = $1;
  $5 = $1;
  $1 = $4 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   HEAP32[$1 + 28 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = $1 + 32 | 0;
   $2 = $2 + -32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $7 = HEAP32[$1 + 4 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$6 + 28 >> 2] = $7;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 + 20 >> 2] = $2;
 $2 = HEAPU8[$4 | 0];
 $3 = HEAPU8[$5 | 0];
 $4 = HEAP32[$6 + 28 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 12 >> 2] = $4;
 $4 = HEAP32[$6 + 20 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$6 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $6 + 8 | 0, $1, $6, $2, $3);
 global$0 = $6 + 32 | 0;
 return $0;
}
function setPatternDetectionMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  if (arSetPatternDetectionMode(HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0) + 216 >> 2], $1)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $1;
  arLog(1, 7816, $2);
 }
 global$0 = $2 + 32 | 0;
}
function __shgetc($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = HEAP32[$0 + 116 >> 2];
 $2 = $1;
 label$1 : {
  $5 = HEAP32[$0 + 112 >> 2];
  label$2 : {
   if ($1 | $5) {
    $1 = HEAP32[$0 + 124 >> 2];
    if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? HEAPU32[$0 + 120 >> 2] < $5 >>> 0 ? 0 : 1 : 0) {
     break label$2;
    }
   }
   $5 = __uflow($0);
   if (($5 | 0) > -1) {
    break label$1;
   }
  }
  HEAP32[$0 + 104 >> 2] = 0;
  return -1;
 }
 $1 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 + 116 >> 2];
 $3 = $2;
 label$4 : {
  label$5 : {
   $4 = HEAP32[$0 + 112 >> 2];
   if (!($2 | $4)) {
    break label$5;
   }
   $2 = (HEAP32[$0 + 124 >> 2] ^ -1) + $3 | 0;
   $3 = HEAP32[$0 + 120 >> 2] ^ -1;
   $4 = $3 + $4 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $2 = $2 + 1 | 0;
   }
   $3 = $4;
   $4 = HEAP32[$0 + 4 >> 2];
   $6 = $1 - $4 | 0;
   $7 = $3 >>> 0 < $6 >>> 0 ? 0 : 1;
   $6 = $6 >> 31;
   if (($2 | 0) > ($6 | 0) ? 1 : ($2 | 0) >= ($6 | 0) ? $7 : 0) {
    break label$5;
   }
   HEAP32[$0 + 104 >> 2] = $3 + $4;
   break label$4;
  }
  HEAP32[$0 + 104 >> 2] = $1;
 }
 label$6 : {
  if (!$1) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$6;
  }
  $4 = HEAP32[$0 + 124 >> 2];
  $2 = $0;
  $3 = HEAP32[$0 + 120 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($1 - $0 | 0) + 1 | 0;
  $6 = $1;
  $3 = $3 + $1 | 0;
  $1 = ($1 >> 31) + $4 | 0;
  HEAP32[$2 + 120 >> 2] = $3;
  HEAP32[$2 + 124 >> 2] = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
 }
 $0 = $0 + -1 | 0;
 if (HEAPU8[$0 | 0] != ($5 | 0)) {
  HEAP8[$0 | 0] = $5;
 }
 return $5;
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$6 : {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$6;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$6;
     }
     break label$2;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}
function setThresholdMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 label$1 : {
  if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
   break label$1;
  }
  if (arSetLabelingThreshMode(HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0) + 216 >> 2], $1)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $1;
  arLog(1, 7928, $2);
 }
 global$0 = $2 + 32 | 0;
}
function getMatrixCodeType($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = $1 + 8 | 0;
  if (!(!$0 | !$2)) {
   HEAP32[$2 >> 2] = HEAP32[$0 + 7062424 >> 2];
  }
  $0 = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 23972);
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
 $3 = HEAP32[$0 + 16 >> 2];
 if ((HEAPU8[$3 + 4 | 0] + -65 & 255) >>> 0 >= 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 23860);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  $3 = HEAP32[$0 + 16 >> 2];
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($3, $1);
 global$0 = $2 + 32 | 0;
}
function setDebugMode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 28 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 $0 = 0;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 24 | 0, $2 + 16 | 0)) {
  arSetDebugMode(HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 28 | 0) + 216 >> 2], ($1 | 0) != 0);
  HEAP32[$2 >> 2] = $1 ? 7976 : 7980;
  arLog(1, 7954, $2);
  $0 = $1;
 }
 global$0 = $2 + 32 | 0;
 return $0 | 0;
}
function trinkle($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 240 | 0;
 global$0 = $5;
 $6 = HEAP32[$1 >> 2];
 HEAP32[$5 + 232 >> 2] = $6;
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$5 >> 2] = $0;
 HEAP32[$5 + 236 >> 2] = $1;
 $7 = 1;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($1 ? 0 : ($6 | 0) == 1) {
      break label$4;
     }
     $6 = $0 - HEAP32[($2 << 2) + $4 >> 2] | 0;
     if ((FUNCTION_TABLE[1]($6, $0) | 0) < 1) {
      break label$4;
     }
     $8 = !$3;
     while (1) {
      label$6 : {
       $1 = $6;
       if (!(!$8 | ($2 | 0) < 2)) {
        $3 = HEAP32[(($2 << 2) + $4 | 0) + -8 >> 2];
        $6 = $0 + -8 | 0;
        if ((FUNCTION_TABLE[1]($6, $1) | 0) > -1) {
         break label$6;
        }
        if ((FUNCTION_TABLE[1]($6 - $3 | 0, $1) | 0) > -1) {
         break label$6;
        }
       }
       HEAP32[($7 << 2) + $5 >> 2] = $1;
       $7 = $7 + 1 | 0;
       $3 = $5 + 232 | 0;
       $0 = pntz($5 + 232 | 0);
       shr($3, $0);
       $2 = $0 + $2 | 0;
       if (HEAP32[$5 + 236 >> 2] ? 0 : HEAP32[$5 + 232 >> 2] == 1) {
        break label$2;
       }
       $3 = 0;
       $8 = 1;
       $0 = $1;
       $6 = $1 - HEAP32[($2 << 2) + $4 >> 2] | 0;
       if ((FUNCTION_TABLE[1]($6, HEAP32[$5 >> 2]) | 0) > 0) {
        continue;
       }
       break label$3;
      }
      break;
     }
     $1 = $0;
     break label$2;
    }
    $1 = $0;
   }
   if ($3) {
    break label$1;
   }
  }
  cycle($5, $7);
  sift($1, $2, $4);
 }
 global$0 = $5 + 240 | 0;
}
function getDebugMode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = 0;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2];
  $2 = $1 + 8 | 0;
  if (!(!$0 | !$2)) {
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  }
  $0 = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function getMultiMarkerCount($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const(std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 248 | 0);
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____hash_table_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___unique_ptr_true_2c_20void__28_29($0);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20true__28int___29($0 + 12 | 0, $1 + 12 | 0);
 HEAP32[$1 + 8 >> 2] = 1065353216;
 std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20true__28int___29($0 + 16 | 0, $1 + 8 | 0);
 global$0 = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 8 | 0, $0, 1);
 label$1 : {
  if ($28anonymous_20namespace_29__StringView__empty_28_29_20const($2 + 8 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1, $2 + 8 | 0);
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function mbrtowc($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = global$0 - 16 | 0;
 global$0 = $6;
 $4 = $2 ? $2 : 33428;
 $2 = HEAP32[$4 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$1) {
     if ($2) {
      break label$3;
     }
     break label$1;
    }
    $3 = -2;
    $7 = $0 ? $0 : $6 + 12 | 0;
    label$5 : {
     if ($2) {
      $0 = 1;
      break label$5;
     }
     $0 = HEAPU8[$1 | 0];
     $2 = $0 << 24 >> 24;
     if (($2 | 0) >= 0) {
      HEAP32[$7 >> 2] = $0;
      $3 = ($2 | 0) != 0;
      break label$1;
     }
     $0 = HEAP8[$1 | 0];
     if (!HEAP32[HEAP32[7889] >> 2]) {
      HEAP32[$7 >> 2] = $0 & 57343;
      $3 = 1;
      break label$1;
     }
     $0 = ($0 & 255) + -194 | 0;
     if ($0 >>> 0 > 50) {
      break label$3;
     }
     $2 = HEAP32[($0 << 2) + 15264 >> 2];
     break label$2;
    }
    $5 = HEAPU8[$1 | 0];
    $8 = $5 >>> 3;
    if (($8 + -16 | ($2 >> 26) + $8) >>> 0 > 7) {
     break label$3;
    }
    while (1) {
     $0 = $0 + -1 | 0;
     $2 = $5 + -128 | $2 << 6;
     if (($2 | 0) >= 0) {
      HEAP32[$4 >> 2] = 0;
      HEAP32[$7 >> 2] = $2;
      $3 = 1 - $0 | 0;
      break label$1;
     }
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
     $5 = HEAPU8[$1 | 0];
     if (($5 & 192) == 128) {
      continue;
     }
     break;
    }
   }
   HEAP32[$4 >> 2] = 0;
   HEAP32[8356] = 25;
   $3 = -1;
   break label$1;
  }
  HEAP32[$4 >> 2] = $2;
 }
 global$0 = $6 + 16 | 0;
 return $3;
}
function arGetTransMatRobust($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = global$0 - 32 | 0;
 global$0 = $8;
 $11 = dlmalloc($4 << 4);
 HEAP32[$8 + 16 >> 2] = $11;
 if ($11) {
  label$2 : {
   $12 = dlmalloc(Math_imul($4, 24));
   HEAP32[$8 + 20 >> 2] = $12;
   if (!$12) {
    break label$2;
   }
   while (1) {
    if (($10 | 0) < ($4 | 0)) {
     $6 = $10 << 4;
     $7 = $6 + $11 | 0;
     $6 = $2 + $6 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$7 + 4 >> 2] = $9;
     $9 = HEAP32[$6 + 12 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$7 + 12 >> 2] = $9;
     $6 = Math_imul($10, 24);
     $7 = $6 + $12 | 0;
     $6 = $3 + $6 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$7 + 4 >> 2] = $9;
     $9 = HEAP32[$6 + 12 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$7 + 12 >> 2] = $9;
     $9 = HEAP32[$6 + 20 >> 2];
     HEAP32[$7 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
     HEAP32[$7 + 20 >> 2] = $9;
     $10 = $10 + 1 | 0;
     continue;
    }
    break;
   }
   HEAP32[$8 + 24 >> 2] = $4;
   if ((icpPointRobust(HEAP32[$0 >> 2], $8 + 16 | 0, $1, $5, $8 + 8 | 0) | 0) <= -1) {
    HEAP32[$8 + 8 >> 2] = 0;
    HEAP32[$8 + 12 >> 2] = 1100470148;
   }
   dlfree(HEAP32[$8 + 16 >> 2]);
   dlfree(HEAP32[$8 + 20 >> 2]);
   global$0 = $8 + 32 | 0;
   return HEAPF64[$8 + 8 >> 3];
  }
 }
 arLog(3, 1460, 0);
 exit(1);
 abort();
}
function setProjectionNearPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
  wasm2js_i32$0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0), wasm2js_f64$0 = $1, HEAPF64[wasm2js_i32$0 + 232 >> 3] = wasm2js_f64$0;
 }
 global$0 = $2 + 16 | 0;
}
function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = $4;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = $1;
 $1 = $5 - $4 | 0;
 HEAP32[$3 + 20 >> 2] = $1;
 $5 = $1 + $2 | 0;
 $7 = 2;
 $1 = $3 + 16 | 0;
 while (1) {
  label$2 : {
   label$4 : {
    if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $7 | 0, $3 + 12 | 0) | 0)) {
     HEAP32[$3 + 12 >> 2] = -1;
     $4 = -1;
     break label$4;
    }
    $4 = HEAP32[$3 + 12 >> 2];
   }
   label$3 : {
    if (($4 | 0) == ($5 | 0)) {
     $1 = HEAP32[$0 + 44 >> 2];
     HEAP32[$0 + 28 >> 2] = $1;
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
     $0 = $2;
     break label$3;
    }
    if (($4 | 0) > -1) {
     break label$2;
    }
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
    $0 = 0;
    if (($7 | 0) == 2) {
     break label$3;
    }
    $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
   }
   global$0 = $3 + 32 | 0;
   return $0 | 0;
  }
  $6 = HEAP32[$1 + 4 >> 2];
  $8 = $4 >>> 0 > $6 >>> 0;
  $1 = $8 ? $1 + 8 | 0 : $1;
  $6 = $4 - ($8 ? $6 : 0) | 0;
  HEAP32[$1 >> 2] = $6 + HEAP32[$1 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $6;
  $5 = $5 - $4 | 0;
  $7 = $7 - $8 | 0;
  continue;
 }
}
function setProjectionFarPlane($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
  wasm2js_i32$0 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0), wasm2js_f64$0 = $1, HEAPF64[wasm2js_i32$0 + 240 >> 3] = wasm2js_f64$0;
 }
 global$0 = $2 + 16 | 0;
}
function arParamLTCreate($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $2 = dlmalloc(208);
 if ($2) {
  label$2 : {
   $2 = memcpy($2, $0, 184);
   $5 = HEAP32[$0 >> 2] + 30 | 0;
   HEAP32[$2 + 192 >> 2] = $5;
   $4 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 + 204 >> 2] = 15;
   HEAP32[$2 + 200 >> 2] = 15;
   $6 = $4 + 30 | 0;
   HEAP32[$2 + 196 >> 2] = $6;
   $3 = Math_imul($5, $6) << 3;
   $4 = dlmalloc($3);
   HEAP32[$2 + 184 >> 2] = $4;
   if (!$4) {
    break label$2;
   }
   $3 = dlmalloc($3);
   HEAP32[$2 + 188 >> 2] = $3;
   if (!$3) {
    break label$2;
   }
   $8 = $0 + 104 | 0;
   $9 = HEAP32[$0 + 176 >> 2];
   while (1) {
    if (($7 | 0) < ($6 | 0)) {
     $10 = +Math_fround($7 - 15 | 0);
     $0 = 0;
     while (1) {
      if (($0 | 0) < ($5 | 0)) {
       $11 = +Math_fround($0 - 15 | 0);
       arParamIdeal2Observ($8, $11, $10, $1 + 8 | 0, $1, $9);
       HEAPF32[$4 >> 2] = HEAPF64[$1 + 8 >> 3];
       HEAPF32[$4 + 4 >> 2] = HEAPF64[$1 >> 3];
       arParamObserv2Ideal($8, $11, $10, $1 + 24 | 0, $1 + 16 | 0, $9);
       HEAPF32[$3 >> 2] = HEAPF64[$1 + 24 >> 3];
       HEAPF32[$3 + 4 >> 2] = HEAPF64[$1 + 16 >> 3];
       $0 = $0 + 1 | 0;
       $3 = $3 + 8 | 0;
       $4 = $4 + 8 | 0;
       continue;
      }
      break;
     }
     $7 = $7 + 1 | 0;
     continue;
    }
    break;
   }
   global$0 = $1 + 32 | 0;
   return $2;
  }
 }
 arLog(3, 1665, 0);
 exit(1);
 abort();
}
function std____2____split_buffer_multi_marker_2c_20std____2__allocator_multi_marker_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_multi_marker___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = 0;
 $6 = $0 + 12 | 0;
 std____2____compressed_pair_elem_multi_marker__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($6);
 std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false_____tuple_leaf_int_20const__2c_20void__28int_20const__29($6 + 4 | 0, $3);
 if ($1) {
  if (536870911 < $1 >>> 0) {
   std____2____throw_length_error_28char_20const__29(12275);
   abort();
  }
  $5 = operator_20new_28unsigned_20long_29($1 << 3);
 }
 HEAP32[$0 >> 2] = $5;
 $2 = ($2 << 3) + $5 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 wasm2js_i32$0 = std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($0), wasm2js_i32$1 = ($1 << 3) + $5 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 global$0 = $4 + 16 | 0;
 return $0;
}
function arGetTransMat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = global$0 - 32 | 0;
 global$0 = $8;
 $11 = dlmalloc($4 << 4);
 HEAP32[$8 + 16 >> 2] = $11;
 if ($11) {
  label$2 : {
   $12 = dlmalloc(Math_imul($4, 24));
   HEAP32[$8 + 20 >> 2] = $12;
   if (!$12) {
    break label$2;
   }
   while (1) {
    if (($10 | 0) < ($4 | 0)) {
     $6 = $10 << 4;
     $7 = $6 + $11 | 0;
     $6 = $2 + $6 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$7 + 4 >> 2] = $9;
     $9 = HEAP32[$6 + 12 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$7 + 12 >> 2] = $9;
     $6 = Math_imul($10, 24);
     $7 = $6 + $12 | 0;
     $6 = $3 + $6 | 0;
     $9 = HEAP32[$6 + 4 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$7 + 4 >> 2] = $9;
     $9 = HEAP32[$6 + 12 >> 2];
     HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     HEAP32[$7 + 12 >> 2] = $9;
     $9 = HEAP32[$6 + 20 >> 2];
     HEAP32[$7 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
     HEAP32[$7 + 20 >> 2] = $9;
     $10 = $10 + 1 | 0;
     continue;
    }
    break;
   }
   HEAP32[$8 + 24 >> 2] = $4;
   if ((icpPoint(HEAP32[$0 >> 2], $8 + 16 | 0, $1, $5, $8 + 8 | 0) | 0) <= -1) {
    HEAP32[$8 + 8 >> 2] = 0;
    HEAP32[$8 + 12 >> 2] = 1100470148;
   }
   dlfree(HEAP32[$8 + 16 >> 2]);
   dlfree(HEAP32[$8 + 20 >> 2]);
   global$0 = $8 + 32 | 0;
   return HEAPF64[$8 + 8 >> 3];
  }
 }
 arLog(3, 1460, 0);
 exit(1);
 abort();
}
function scalbnl($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 label$1 : {
  if (($5 | 0) >= 16384) {
   __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $3 = HEAP32[$6 + 40 >> 2];
   $4 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[$6 + 32 >> 2];
   $2 = HEAP32[$6 + 36 >> 2];
   $7 = $5 + -16383 | 0;
   if (($7 | 0) < 16384) {
    $5 = $7;
    break label$1;
   }
   __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $5 = (($5 | 0) < 49149 ? $5 : 49149) + -32766 | 0;
   $3 = HEAP32[$6 + 24 >> 2];
   $4 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   $2 = HEAP32[$6 + 20 >> 2];
   break label$1;
  }
  if (($5 | 0) > -16383) {
   break label$1;
  }
  __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $3 = HEAP32[$6 + 72 >> 2];
  $4 = HEAP32[$6 + 76 >> 2];
  $1 = HEAP32[$6 + 64 >> 2];
  $2 = HEAP32[$6 + 68 >> 2];
  $7 = $5 + 16382 | 0;
  if (($7 | 0) > -16383) {
   $5 = $7;
   break label$1;
  }
  __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
  $3 = HEAP32[$6 + 56 >> 2];
  $4 = HEAP32[$6 + 60 >> 2];
  $1 = HEAP32[$6 + 48 >> 2];
  $2 = HEAP32[$6 + 52 >> 2];
 }
 __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
 $1 = HEAP32[$6 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$6 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 global$0 = $6 + 80 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 22304);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 17) {
  $3 = $2 + 72 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 16) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 72 | 0, $3);
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 72 >> 3];
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, $2 + 32 | 0, snprintf($2 + 32 | 0, 32, 21092, $2 + 16 | 0) + ($2 + 32 | 0) | 0);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 80 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 23748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 23751);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 if ($1) {
  $3 = HEAP32[$0 >> 2];
  label$2 : {
   if (HEAP32[$3 >> 2]) {
    $1 = $2 + 12 | 0;
    $1 = $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29(HEAP32[$0 + 4 >> 2] + 368 | 0, 16), HEAP32[$3 >> 2], HEAP32[$1 >> 2]);
    HEAP32[HEAP32[$0 >> 2] >> 2] = $1;
    break label$2;
   }
   HEAP32[$3 >> 2] = $1;
  }
  $1 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
  if ($1) {
   HEAP8[$1 + 1 | 0] = 0;
  }
  $0 = HEAP32[HEAP32[$0 >> 2] >> 2] != 0;
 } else {
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($1, $2 + 12 | 0)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1);
    $4 = HEAP32[$2 + 12 >> 2];
    if ($3 >>> 0 >= $4 >>> 0) {
     break label$2;
    }
   }
   $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($0);
   break label$1;
  }
  $3 = HEAP32[$1 >> 2];
  $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2, $3, $4 + $3 | 0);
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $4;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
 }
 global$0 = $2 + 16 | 0;
}
function setMatrixCodeType($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($2 + 8 | 0, $2)) {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($2 + 12 | 0) + 216 >> 2];
  if ($0) {
   HEAP32[$0 + 7062424 >> 2] = $1;
  }
 }
 global$0 = $2 + 16 | 0;
}
function confidenceCutoff($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 24 >> 2];
  if ($1 >>> 0 <= 2) {
   if ($1 - 2) {
    $2 = HEAP32[$0 + 44 >> 2];
    while (1) {
     if (($3 | 0) >= ($2 | 0)) {
      break label$1;
     }
     $1 = ($3 << 8) + $0 | 0;
     if (!(HEAP32[$1 + 52 >> 2] < 0 | HEAPF64[$1 + 80 >> 3] < .5 ^ 1)) {
      HEAP32[$1 + 56 >> 2] = -1;
      HEAP32[$1 + 52 >> 2] = -1;
      HEAP32[$1 + 284 >> 2] = 6;
     }
     $3 = $3 + 1 | 0;
     continue;
    }
   }
   $2 = HEAP32[$0 + 44 >> 2];
   while (1) {
    if (($3 | 0) >= ($2 | 0)) {
     break label$1;
    }
    $1 = ($3 << 8) + $0 | 0;
    if (!(HEAP32[$1 + 52 >> 2] < 0 | HEAPF64[$1 + 80 >> 3] < .5 ^ 1)) {
     HEAP32[$1 + 60 >> 2] = -1;
     HEAP32[$1 + 52 >> 2] = -1;
     HEAP32[$1 + 284 >> 2] = 6;
    }
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  $4 = HEAP32[$0 + 44 >> 2];
  while (1) {
   if (($3 | 0) >= ($4 | 0)) {
    break label$1;
   }
   $2 = ($3 << 8) + $0 | 0;
   $1 = 1;
   label$9 : {
    if (HEAP32[$2 + 56 >> 2] < 0) {
     break label$9;
    }
    $1 = 1;
    if (!(HEAPF64[$2 + 88 >> 3] < .5)) {
     break label$9;
    }
    HEAP32[$2 + 56 >> 2] = -1;
    $1 = 0;
   }
   label$10 : {
    if (HEAPF64[$2 + 96 >> 3] < .5 ^ 1 | HEAP32[$2 + 60 >> 2] < 0) {
     break label$10;
    }
    HEAP32[$2 + 60 >> 2] = -1;
    if ($1) {
     break label$10;
    }
    HEAP32[$2 + 284 >> 2] = 6;
   }
   $3 = $3 + 1 | 0;
   continue;
  }
 }
}
function setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 $3 = HEAP32[8088];
 HEAP32[8088] = $3 + 1;
 HEAP32[$4 + 44 >> 2] = $3;
 $3 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($4 + 44 | 0);
 $5 = HEAP32[$4 + 44 >> 2];
 HEAP32[$3 + 212 >> 2] = $1;
 HEAP32[$3 + 208 >> 2] = $0;
 HEAP32[$3 >> 2] = $5;
 $0 = Math_imul($0, $1) << 2;
 HEAP32[$3 + 200 >> 2] = $0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = dlmalloc($0), HEAP32[wasm2js_i32$0 + 196 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = dlmalloc(HEAP32[$3 + 200 >> 2] / 4 | 0), HEAP32[wasm2js_i32$0 + 204 >> 2] = wasm2js_i32$1;
 $0 = arPattCreateHandle2();
 HEAP32[$3 + 220 >> 2] = $0;
 if (!$0) {
  arLog(3, 9666, 0);
 }
 setCamera(HEAP32[$4 + 44 >> 2], $2);
 HEAP32[$4 + 32 >> 2] = HEAP32[$3 + 200 >> 2];
 arLog(1, 9703, $4 + 32 | 0);
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 196 >> 2];
 $2 = HEAP32[$3 + 200 >> 2];
 HEAP32[$4 + 20 >> 2] = HEAP32[$3 + 204 >> 2];
 HEAP32[$4 + 16 >> 2] = 32256;
 HEAP32[$4 + 12 >> 2] = $3 + 264;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $1;
 HEAP32[$4 >> 2] = $0;
 emscripten_asm_const_iii(2, 10010, $4 | 0) | 0;
 global$0 = $4 + 48 | 0;
 return HEAP32[$3 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 33) {
  $3 = $2 + 96 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 32) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 96 | 0, $3);
  memset($2 + 48 | 0, 0, 40);
  $0 = HEAP32[$2 + 100 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 96 >> 2];
  HEAP32[$2 + 20 >> 2] = $0;
  $0 = HEAP32[$2 + 108 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 28 >> 2] = $0;
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 40 | 0, $2 + 48 | 0, snprintf($2 + 48 | 0, 40, 21208, $2 + 16 | 0) + ($2 + 48 | 0) | 0);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 + 112 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 >>> 0 <= 5) {
  $0 = $2;
  $4 = $2;
  label$2 : {
   label$3 : {
    switch ($3 - 1 | 0) {
    default:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 25016);
     break label$2;
    case 0:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 25031);
     break label$2;
    case 1:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 25049);
     break label$2;
    case 2:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 25120);
     break label$2;
    case 3:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 25170);
     break label$2;
    case 4:
     break label$3;
    }
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 25220);
  }
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function getMarkerNum($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if (std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = 31356;
 } else {
  $0 = HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2] + 44 | 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0);
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 >>> 0 <= 5) {
  $0 = $2;
  $4 = $2;
  label$2 : {
   label$3 : {
    switch ($3 - 1 | 0) {
    default:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 56 | 0, 25016);
     break label$2;
    case 0:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 48 | 0, 25031);
     break label$2;
    case 1:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 26160);
     break label$2;
    case 2:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 26172);
     break label$2;
    case 3:
     $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 26185);
     break label$2;
    case 4:
     break label$3;
    }
   }
   $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 26198);
  }
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function getProcessingImage($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = 0;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $0 = HEAP32[HEAP32[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 216 >> 2] + 4834148 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function __fdopen($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!strchr(12804, HEAP8[$1 | 0])) {
     HEAP32[8356] = 28;
     break label$3;
    }
    $2 = dlmalloc(1176);
    if ($2) {
     break label$2;
    }
   }
   $0 = 0;
   break label$1;
  }
  memset($2, 0, 144);
  if (!strchr($1, 43)) {
   HEAP32[$2 >> 2] = HEAPU8[$1 | 0] == 114 ? 8 : 4;
  }
  label$6 : {
   if (HEAPU8[$1 | 0] != 97) {
    $1 = HEAP32[$2 >> 2];
    break label$6;
   }
   HEAP32[$3 + 36 >> 2] = 3;
   HEAP32[$3 + 32 >> 2] = $0;
   $1 = __syscall221(221, $3 + 32 | 0) | 0;
   if (!($1 & 1024)) {
    HEAP32[$3 + 20 >> 2] = 4;
    HEAP32[$3 + 16 >> 2] = $0;
    HEAP32[$3 + 24 >> 2] = $1 | 1024;
    __syscall221(221, $3 + 16 | 0) | 0;
   }
   $1 = HEAP32[$2 >> 2] | 128;
   HEAP32[$2 >> 2] = $1;
  }
  HEAP8[$2 + 75 | 0] = 255;
  HEAP32[$2 + 48 >> 2] = 1024;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 44 >> 2] = $2 + 152;
  label$9 : {
   if ($1 & 8) {
    break label$9;
   }
   HEAP32[$3 + 4 >> 2] = 21523;
   HEAP32[$3 >> 2] = $0;
   HEAP32[$3 + 8 >> 2] = $3 + 40;
   if (__syscall54(54, $3 | 0)) {
    break label$9;
   }
   HEAP8[$2 + 75 | 0] = 10;
  }
  HEAP32[$2 + 40 >> 2] = 57;
  HEAP32[$2 + 36 >> 2] = 58;
  HEAP32[$2 + 32 >> 2] = 59;
  HEAP32[$2 + 12 >> 2] = 60;
  if (!HEAP32[8360]) {
   HEAP32[$2 + 76 >> 2] = -1;
  }
  $0 = __ofl_add($2);
 }
 global$0 = $3 + 48 | 0;
 return $0;
}
function getProjectionNearPlane($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $2 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $2 = HEAPF64[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 232 >> 3];
 }
 global$0 = $1 + 16 | 0;
 return +$2;
}
function getProjectionFarPlane($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29(31944, $1 + 12 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $2 = -1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($1 + 8 | 0, $1)) {
  $2 = HEAPF64[std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___operator_5b_5d_28int_20const__29($1 + 12 | 0) + 240 >> 3];
 }
 global$0 = $1 + 16 | 0;
 return +$2;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20398);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 if (($28anonymous_20namespace_29__OutputStream__back_28_29_20const($1) | 0) == 62) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 26460);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20386);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 return $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0 + 368 | 0, $1, $2, $3, $4, $5);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $0 = $0 + 8 | 0;
 $5 = HEAP32[$0 >> 2];
 if ((HEAP32[$0 + 4 >> 2] - $5 | 0) + 1 >>> 0 >= 9) {
  $3 = $2 + 56 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 8) {
    $4 = HEAP8[($0 | 1) + $5 | 0];
    $6 = ($4 + -48 >>> 0 < 10 ? -48 : -87) + $4 | 0;
    $4 = HEAP8[$0 + $5 | 0];
    HEAP8[$3 | 0] = $6 + (($4 + -48 >>> 0 < 10 ? 0 : 9) + $4 << 4);
    $3 = $3 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 56 | 0, $3);
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF32[$2 + 56 >> 2];
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, $2 + 32 | 0, snprintf($2 + 32 | 0, 24, 20976, $2 + 16 | 0) + ($2 + 32 | 0) | 0);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 global$0 = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 24 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($2 + 16 | 0, $0, $1);
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$2 + 20 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$2 + 20 >> 2], $1)) {
     break label$2;
    }
   }
   $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 20310);
   $4 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  }
  $0 = HEAP32[$2 + 20 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 HEAP32[$1 >> 2] = 0;
 $2 = 1;
 label$1 : {
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 & 255) >>> 0 > 9) {
   break label$1;
  }
  while (1) {
   $2 = 0;
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) + -48 & 255) >>> 0 > 9) {
    break label$1;
   }
   HEAP32[$1 >> 2] = Math_imul($3, 10);
   $3 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) + HEAP32[$1 >> 2] | 0) + -48 | 0;
   HEAP32[$1 >> 2] = $3;
   continue;
  }
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20172);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 }
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 22412);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 if (HEAPU8[$0 + 13 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 22419);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = 1;
 label$1 : {
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
  if (($2 | 0) < 48 | (($2 + -65 & 255) >>> 0 > 25 ? ($2 | 0) >= 58 : 0)) {
   break label$1;
  }
  $3 = 0;
  while (1) {
   label$3 : {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    if (($2 | 0) >= 48) {
     $4 = -48;
     if (($2 | 0) < 58) {
      break label$3;
     }
     $4 = -55;
     if (($2 + -65 & 255) >>> 0 < 26) {
      break label$3;
     }
    }
    HEAP32[$1 >> 2] = $3;
    $3 = 0;
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   $3 = (Math_imul($3, 36) + $4 | 0) + ($2 & 255) | 0;
   continue;
  }
 }
 return $3;
}
function arMatrixPCA($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $8 = -1;
 $6 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if (($6 | 0) < 2) {
   break label$1;
  }
  $5 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) < 2 | ($5 | 0) != HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  $4 = ($6 | 0) < ($5 | 0) ? $6 : $5;
  if (($4 | 0) != HEAP32[$1 + 4 >> 2] | ($4 | 0) != HEAP32[$2 + 4 >> 2] | ($5 | 0) != HEAP32[$3 + 4 >> 2]) {
   break label$1;
  }
  $4 = arMatrixAllocDup($0);
  if (!$4) {
   break label$1;
  }
  if ((EX($4, $3) | 0) <= -1) {
   arMatrixFree($4);
   return -1;
  }
  $0 = 0;
  if ((CENTER($4, $3) | 0) >= 0) {
   $7 = Math_sqrt(+($6 | 0));
   $3 = Math_imul($5, $6);
   while (1) {
    if (($0 | 0) < ($3 | 0)) {
     $5 = HEAP32[$4 >> 2] + ($0 << 3) | 0;
     HEAPF64[$5 >> 3] = HEAPF64[$5 >> 3] / $7;
     $0 = $0 + 1 | 0;
     continue;
    }
    break;
   }
   $8 = PCA($4, $1, $2);
   arMatrixFree($4);
   $3 = HEAP32[$2 + 4 >> 2];
   $0 = 0;
   $7 = 0;
   $1 = 0;
   while (1) if (($1 | 0) >= ($3 | 0)) {
    while (1) {
     if (($0 | 0) >= ($3 | 0)) {
      break label$1;
     }
     $1 = HEAP32[$2 >> 2] + ($0 << 3) | 0;
     HEAPF64[$1 >> 3] = HEAPF64[$1 >> 3] / $7;
     $0 = $0 + 1 | 0;
     continue;
    }
   } else {
    $7 = $7 + HEAPF64[HEAP32[$2 >> 2] + ($1 << 3) >> 3];
    $1 = $1 + 1 | 0;
    continue;
   }
  }
  arMatrixFree($4);
 }
 return $8;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAPU8[$0 + 16 | 0]) {
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
   $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
   break label$1;
  }
  $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 46);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 }
 $3 = HEAP32[$0 + 12 >> 2];
 if ((HEAPU8[$3 + 4 | 0] + -65 & 255) >>> 0 >= 2) {
  $4 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 23860);
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
  $3 = HEAP32[$0 + 12 >> 2];
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($3, $1);
 global$0 = $2 + 16 | 0;
}
function __vfprintf_internal($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 208 | 0;
 global$0 = $3;
 HEAP32[$3 + 204 >> 2] = $2;
 $2 = 0;
 memset($3 + 160 | 0, 0, 40);
 HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 204 >> 2];
 label$1 : {
  if ((printf_core(0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0) | 0) < 0) {
   $1 = -1;
   break label$1;
  }
  $2 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $2;
  $4 = HEAP32[$0 >> 2];
  if (HEAP8[$0 + 74 | 0] <= 0) {
   HEAP32[$0 >> 2] = $4 & -33;
  }
  $6 = $4 & 32;
  label$5 : {
   if (HEAP32[$0 + 48 >> 2]) {
    $1 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
    break label$5;
   }
   HEAP32[$0 + 48 >> 2] = 80;
   HEAP32[$0 + 16 >> 2] = $3 + 80;
   HEAP32[$0 + 28 >> 2] = $3;
   HEAP32[$0 + 20 >> 2] = $3;
   $4 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 44 >> 2] = $3;
   $5 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
   $1 = $5;
   if (!$4) {
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $4;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   $1 = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 20 >> 2] = 0;
   $1 = $1 ? $5 : -1;
  }
  $5 = $0;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$5 >> 2] = $0 | $6;
  $1 = $0 & 32 ? -1 : $1;
  if (!$2) {
   break label$1;
  }
 }
 global$0 = $3 + 208 | 0;
 return $1;
}
function __extenddftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 wasm2js_scratch_store_f64(+$1);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $6 = wasm2js_scratch_load_i32(0) | 0;
 $10 = $3 & -2147483648;
 $4 = $3 & 2147483647;
 $2 = $4;
 $7 = $2 + -1048576 | 0;
 $4 = $6;
 $8 = $4;
 if ($4 >>> 0 < 0) {
  $7 = $7 + 1 | 0;
 }
 label$1 : {
  if (($7 | 0) == 2145386495 & $8 >>> 0 <= 4294967295 | $7 >>> 0 < 2145386495) {
   $9 = $4 << 28;
   $3 = ($2 & 15) << 28 | $4 >>> 4;
   $2 = ($2 >>> 4) + 1006632960 | 0;
   $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
   break label$1;
  }
  if (($2 | 0) == 2146435072 & $4 >>> 0 >= 0 | $2 >>> 0 > 2146435072) {
   $9 = $6 << 28;
   $2 = $3 >>> 4;
   $3 = ($3 & 15) << 28 | $6 >>> 4;
   $2 = $2 | 2147418112;
   break label$1;
  }
  if (!($2 | $4)) {
   $3 = 0;
   $2 = 0;
   break label$1;
  }
  $8 = $2;
  $2 = ($2 | 0) == 1 & $4 >>> 0 >= 0 | $2 >>> 0 > 1 ? Math_clz32($2) : Math_clz32($6) + 32 | 0;
  __ashlti3($5, $4, $8, 0, 0, $2 + 49 | 0);
  $11 = HEAP32[$5 >> 2];
  $9 = HEAP32[$5 + 4 >> 2];
  $3 = HEAP32[$5 + 8 >> 2];
  $2 = HEAP32[$5 + 12 >> 2] ^ 65536 | 15372 - $2 << 16;
 }
 HEAP32[$0 >> 2] = $11;
 HEAP32[$0 + 4 >> 2] = $9;
 HEAP32[$0 + 8 >> 2] = $3 | $12;
 HEAP32[$0 + 12 >> 2] = $2 | $10;
 global$0 = $5 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $4;
 $1 = $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($2 + 24 | 0, $2 + 8 | 0);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 26, 1, 1, 1);
 HEAP32[$3 >> 2] = 28140;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 32 | 0;
 return $3;
}
function x_by_xt($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $10 = -1;
 label$1 : {
  $4 = HEAP32[$0 + 4 >> 2];
  if (($4 | 0) != HEAP32[$1 + 4 >> 2] | HEAP32[$1 + 8 >> 2] != ($4 | 0)) {
   break label$1;
  }
  $7 = HEAP32[$0 + 8 >> 2];
  $10 = 0;
  $11 = HEAP32[$1 >> 2];
  $2 = $11;
  label$2 : while (1) {
   if (($5 | 0) >= ($4 | 0)) {
    break label$1;
   }
   $12 = Math_imul($5, $7);
   $3 = 0;
   while (1) {
    label$4 : {
     if (($3 | 0) != ($4 | 0)) {
      if ($3 >>> 0 < $5 >>> 0) {
       $1 = (Math_imul($3, $4) + $5 << 3) + $11 | 0;
       $6 = HEAP32[$1 + 4 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 4 >> 2] = $6;
       break label$4;
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $6 = $1 + ($12 << 3) | 0;
      $8 = $1 + (Math_imul($3, $7) << 3) | 0;
      $1 = 0;
      $9 = 0;
      while (1) {
       if (($1 | 0) >= ($7 | 0)) {
        break label$4;
       }
       $9 = $9 + HEAPF64[$6 >> 3] * HEAPF64[$8 >> 3];
       HEAPF64[$2 >> 3] = $9;
       $1 = $1 + 1 | 0;
       $8 = $8 + 8 | 0;
       $6 = $6 + 8 | 0;
       continue;
      }
     }
     $5 = $5 + 1 | 0;
     continue label$2;
    }
    $3 = $3 + 1 | 0;
    $2 = $2 + 8 | 0;
    continue;
   }
  }
 }
 return $10;
}
function arPattCreateHandle2() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $0 = dlmalloc(32);
  if (!$0) {
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = 16;
  HEAP32[$0 + 4 >> 2] = 50;
  HEAP32[$0 >> 2] = 0;
  $5 = dlmalloc(200);
  HEAP32[$0 + 8 >> 2] = $5;
  if (!$5) {
   break label$1;
  }
  $6 = dlmalloc(800);
  HEAP32[$0 + 12 >> 2] = $6;
  if (!$6) {
   break label$1;
  }
  $7 = dlmalloc(800);
  HEAP32[$0 + 20 >> 2] = $7;
  if (!$7) {
   break label$1;
  }
  $1 = dlmalloc(1600);
  HEAP32[$0 + 16 >> 2] = $1;
  if (!$1) {
   break label$1;
  }
  $1 = dlmalloc(1600);
  HEAP32[$0 + 24 >> 2] = $1;
  if (!$1) {
   break label$1;
  }
  $1 = 0;
  while (1) {
   if (($1 | 0) != 50) {
    $3 = 0;
    $8 = $1 << 2;
    HEAP32[$8 + $5 >> 2] = 0;
    label$4 : {
     while (1) {
      if (($3 | 0) == 4) {
       break label$4;
      }
      $2 = $3 + $8 << 2;
      $9 = $2 + $6 | 0;
      $4 = dlmalloc(3072);
      HEAP32[$9 >> 2] = $4;
      if (!$4) {
       break label$1;
      }
      $4 = $2 + $7 | 0;
      $2 = dlmalloc(1024);
      HEAP32[$4 >> 2] = $2;
      $3 = $3 + 1 | 0;
      if ($2) {
       continue;
      }
      break;
     }
     break label$1;
    }
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  return $0;
 }
 arLog(3, 1494, 0);
 exit(1);
 abort();
}
function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = ($2 | 0) != 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$2 | !($0 & 3)) {
      break label$4;
     }
     $4 = $1 & 255;
     while (1) {
      if (($4 | 0) == HEAPU8[$0 | 0]) {
       break label$3;
      }
      $0 = $0 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != 0;
      if (!$2) {
       break label$4;
      }
      if ($0 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
   }
   if (HEAPU8[$0 | 0] == ($1 & 255)) {
    break label$1;
   }
   label$6 : {
    if ($2 >>> 0 >= 4) {
     $6 = Math_imul($1 & 255, 16843009);
     $3 = $2 + -4 | 0;
     $4 = $3 & -4;
     $3 = $3 - $4 | 0;
     $4 = ($0 + $4 | 0) + 4 | 0;
     while (1) {
      $5 = HEAP32[$0 >> 2] ^ $6;
      if (($5 ^ -1) & $5 + -16843009 & -2139062144) {
       break label$6;
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
     $2 = $3;
     $0 = $4;
    }
    if (!$2) {
     break label$2;
    }
   }
   $1 = $1 & 255;
   while (1) {
    if (($1 | 0) == HEAPU8[$0 | 0]) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return $0;
}
function icpUpdateMat($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 256 | 0;
 global$0 = $2;
 icpGetQ_from_S($2 + 192 | 0, $1);
 icpGetMat_from_Q($2 + 96 | 0, $2 + 192 | 0);
 while (1) {
  if (($3 | 0) == 3) {
   while (1) {
    $1 = 0;
    if (($6 | 0) == 3) {
     global$0 = $2 + 256 | 0;
    } else {
     while (1) {
      if (($1 | 0) != 4) {
       $4 = $1 << 3;
       $3 = $6 << 5;
       $5 = $4 + ($3 + $0 | 0) | 0;
       $3 = $4 + ($2 + $3 | 0) | 0;
       $4 = HEAP32[$3 + 4 >> 2];
       HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$5 + 4 >> 2] = $4;
       $1 = $1 + 1 | 0;
       continue;
      }
      break;
     }
     $6 = $6 + 1 | 0;
     continue;
    }
    break;
   }
  } else {
   $7 = $3 << 5;
   $4 = $7 + $0 | 0;
   $9 = HEAPF64[$4 + 16 >> 3];
   $10 = HEAPF64[$4 + 8 >> 3];
   $11 = HEAPF64[$4 >> 3];
   $1 = 0;
   while (1) {
    if (($1 | 0) != 4) {
     $8 = $1 << 3;
     $5 = $8 + ($2 + 96 | 0) | 0;
     HEAPF64[$8 + ($2 + $7 | 0) >> 3] = $11 * HEAPF64[$5 >> 3] + $10 * HEAPF64[$5 + 32 >> 3] + $9 * HEAPF64[$5 - -64 >> 3];
     $1 = $1 + 1 | 0;
     continue;
    }
    break;
   }
   $1 = $2 + $7 | 0;
   HEAPF64[$1 + 24 >> 3] = HEAPF64[$4 + 24 >> 3] + HEAPF64[$1 + 24 >> 3];
   $3 = $3 + 1 | 0;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 24 | 0, $1);
 $2 = HEAP32[$2 >> 2];
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 16 | 0, 20310);
 $5 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 12 >> 2] = $5;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $2, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function xt_by_x($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $9 = -1;
 label$1 : {
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) != HEAP32[$1 + 4 >> 2] | HEAP32[$1 + 8 >> 2] != ($3 | 0)) {
   break label$1;
  }
  $12 = HEAP32[$0 + 4 >> 2];
  $9 = 0;
  $10 = HEAP32[$1 >> 2];
  $2 = $10;
  label$2 : while (1) {
   $4 = 0;
   if (($5 | 0) >= ($3 | 0)) {
    break label$1;
   }
   while (1) {
    label$4 : {
     if (($4 | 0) != ($3 | 0)) {
      if ($4 >>> 0 < $5 >>> 0) {
       $1 = (Math_imul($4, $3) + $5 << 3) + $10 | 0;
       $6 = HEAP32[$1 + 4 >> 2];
       HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$2 + 4 >> 2] = $6;
       break label$4;
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $6 = $1 + ($4 << 3) | 0;
      $7 = $1 + ($5 << 3) | 0;
      $1 = 0;
      $8 = 0;
      while (1) {
       if (($1 | 0) >= ($12 | 0)) {
        break label$4;
       }
       $8 = $8 + HEAPF64[$7 >> 3] * HEAPF64[$6 >> 3];
       HEAPF64[$2 >> 3] = $8;
       $1 = $1 + 1 | 0;
       $11 = $3 << 3;
       $6 = $11 + $6 | 0;
       $7 = $7 + $11 | 0;
       continue;
      }
     }
     $5 = $5 + 1 | 0;
     continue label$2;
    }
    $4 = $4 + 1 | 0;
    $2 = $2 + 8 | 0;
    continue;
   }
  }
 }
 return $9;
}
function __stpncpy($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($0 ^ $1) & 3) {
     break label$3;
    }
    $3 = ($2 | 0) != 0;
    label$4 : {
     if (!$2 | !($1 & 3)) {
      break label$4;
     }
     while (1) {
      $3 = HEAPU8[$1 | 0];
      HEAP8[$0 | 0] = $3;
      if (!$3) {
       break label$1;
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != 0;
      if (!$2) {
       break label$4;
      }
      if ($1 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
    if (!HEAPU8[$1 | 0]) {
     break label$1;
    }
    if ($2 >>> 0 < 4) {
     break label$3;
    }
    $3 = $2 & 3;
    while (1) {
     $4 = HEAP32[$1 >> 2];
     if (($4 ^ -1) & $4 + -16843009 & -2139062144) {
      break label$3;
     }
     HEAP32[$0 >> 2] = $4;
     $0 = $0 + 4 | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3) {
      continue;
     }
     break;
    }
    $2 = $3;
   }
   if (!$2) {
    break label$2;
   }
   while (1) {
    $3 = HEAPU8[$1 | 0];
    HEAP8[$0 | 0] = $3;
    if (!$3) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $2 = 0;
 }
 memset($0, 0, $2);
}
function fgets($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = 255;
 $4 = $0;
 label$3 : {
  while (1) {
   label$5 : {
    if (!$3) {
     break label$5;
    }
    $2 = HEAP32[$1 + 4 >> 2];
    $6 = memchr($2, 10, HEAP32[$1 + 8 >> 2] - $2 | 0);
    label$6 : {
     if ($6) {
      $2 = HEAP32[$1 + 4 >> 2];
      $5 = ($6 - $2 | 0) + 1 | 0;
      break label$6;
     }
     $2 = HEAP32[$1 + 4 >> 2];
     $5 = HEAP32[$1 + 8 >> 2] - $2 | 0;
    }
    $7 = $2;
    $2 = $5 >>> 0 < $3 >>> 0 ? $5 : $3;
    memcpy($4, $7, $2);
    $5 = $2 + HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$1 + 4 >> 2] = $5;
    $4 = $2 + $4 | 0;
    if ($6) {
     break label$5;
    }
    $3 = $3 - $2 | 0;
    if (!$3) {
     break label$5;
    }
    label$8 : {
     if ($5 >>> 0 < HEAPU32[$1 + 8 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $5 + 1;
      $2 = HEAPU8[$5 | 0];
      break label$8;
     }
     $2 = __uflow($1);
     if (($2 | 0) > -1) {
      break label$8;
     }
     $2 = 0;
     if (!(HEAPU8[$1 | 0] & 16) | ($0 | 0) == ($4 | 0)) {
      break label$3;
     }
     break label$5;
    }
    HEAP8[$4 | 0] = $2;
    $4 = $4 + 1 | 0;
    $3 = $3 + -1 | 0;
    if (($2 & 255) != 10) {
     continue;
    }
   }
   break;
  }
  $2 = 0;
  if (!$0) {
   break label$3;
  }
  HEAP8[$4 | 0] = 0;
  $2 = $0;
 }
 return $2;
}
function icpGetMat_from_Q($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAPF64[$1 + 24 >> 3];
 $6 = cos($3);
 $2 = HEAPF64[$1 >> 3];
 $4 = $2 * $2;
 $2 = 1 - $6;
 HEAPF64[$0 >> 3] = $6 + $4 * $2;
 $4 = $2 * (HEAPF64[$1 >> 3] * HEAPF64[$1 + 8 >> 3]);
 $3 = sin($3);
 HEAPF64[$0 + 8 >> 3] = $4 - $3 * HEAPF64[$1 + 16 >> 3];
 HEAPF64[$0 + 16 >> 3] = $2 * (HEAPF64[$1 >> 3] * HEAPF64[$1 + 16 >> 3]) + $3 * HEAPF64[$1 + 8 >> 3];
 $5 = HEAP32[$1 + 36 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 HEAPF64[$0 + 32 >> 3] = $2 * (HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 >> 3]) + $3 * HEAPF64[$1 + 16 >> 3];
 $4 = HEAPF64[$1 + 8 >> 3];
 HEAPF64[$0 + 40 >> 3] = $6 + $2 * ($4 * $4);
 HEAPF64[$0 + 48 >> 3] = $2 * (HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 16 >> 3]) - $3 * HEAPF64[$1 >> 3];
 $5 = HEAP32[$1 + 44 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$0 + 60 >> 2] = $5;
 HEAPF64[$0 + 64 >> 3] = $2 * (HEAPF64[$1 + 16 >> 3] * HEAPF64[$1 >> 3]) - $3 * HEAPF64[$1 + 8 >> 3];
 HEAPF64[$0 + 72 >> 3] = $2 * (HEAPF64[$1 + 16 >> 3] * HEAPF64[$1 + 8 >> 3]) + $3 * HEAPF64[$1 >> 3];
 $4 = $2;
 $2 = HEAPF64[$1 + 16 >> 3];
 HEAPF64[$0 + 80 >> 3] = $6 + $4 * ($2 * $2);
 $5 = HEAP32[$1 + 52 >> 2];
 HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$0 + 92 >> 2] = $5;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 & 1) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 27056);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 2) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 27063);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 4) {
  $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 27073);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20310);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 20398);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20386);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3;
 HEAP32[$2 + 40 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 32 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 21879);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___reset_28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = 0;
 if ($1) {
  if (HEAPU8[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0) + 4 | 0]) {
   void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20arController__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arController___29($1 + 8 | 0);
  }
  if ($1) {
   dlfree($1);
  }
 }
}
function icpGetJ_T_S($0) {
 var $1 = 0;
 $0 = memset($0, 0, 64);
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 $1 = $0 - -64 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = -1074790400;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 1072693248;
 memset($0 + 112 | 0, 0, 48);
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 1072693248;
 memset($0 + 168 | 0, 0, 72);
 HEAP32[$0 + 240 >> 2] = 0;
 HEAP32[$0 + 244 >> 2] = -1074790400;
 memset($0 + 248 | 0, 0, 48);
 HEAP32[$0 + 304 >> 2] = 0;
 HEAP32[$0 + 308 >> 2] = 0;
 HEAP32[$0 + 296 >> 2] = 0;
 HEAP32[$0 + 300 >> 2] = -1074790400;
 HEAP32[$0 + 312 >> 2] = 0;
 HEAP32[$0 + 316 >> 2] = 0;
 HEAP32[$0 + 320 >> 2] = 0;
 HEAP32[$0 + 324 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 336 >> 2] = 0;
 HEAP32[$0 + 340 >> 2] = 1072693248;
 memset($0 + 344 | 0, 0, 112);
 HEAP32[$0 + 456 >> 2] = 0;
 HEAP32[$0 + 460 >> 2] = 1072693248;
 memset($0 + 464 | 0, 0, 48);
 HEAP32[$0 + 512 >> 2] = 0;
 HEAP32[$0 + 516 >> 2] = 1072693248;
 memset($0 + 520 | 0, 0, 48);
 HEAP32[$0 + 568 >> 2] = 0;
 HEAP32[$0 + 572 >> 2] = 1072693248;
}
function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $9 = 1;
 $8 = $3 & 2147483647;
 $12 = $8;
 $10 = $2;
 label$1 : {
  if (!$2 & ($8 | 0) == 2147418112 ? $0 | $1 : ($8 | 0) == 2147418112 & $2 >>> 0 > 0 | $8 >>> 0 > 2147418112) {
   break label$1;
  }
  $11 = $7 & 2147483647;
  $13 = $11;
  $8 = $6;
  if (!$6 & ($11 | 0) == 2147418112 ? $4 | $5 : ($11 | 0) == 2147418112 & $6 >>> 0 > 0 | $11 >>> 0 > 2147418112) {
   break label$1;
  }
  if (!($0 | $4 | ($8 | $10) | ($1 | $5 | ($12 | $13)))) {
   return 0;
  }
  $10 = $3 & $7;
  if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? ($2 & $6) >>> 0 < 0 ? 0 : 1 : 0) {
   $9 = -1;
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : ($3 | 0) < ($7 | 0) ? 1 : ($3 | 0) <= ($7 | 0) ? $2 >>> 0 >= $6 >>> 0 ? 0 : 1 : 0) {
    break label$1;
   }
   return ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
  }
  $9 = -1;
  if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : ($3 | 0) > ($7 | 0) ? 1 : ($3 | 0) >= ($7 | 0) ? $2 >>> 0 <= $6 >>> 0 ? 0 : 1 : 0) {
   break label$1;
  }
  $9 = ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
 }
 return $9;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 global$0 = $5;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = HEAPU8[$1 | 0];
 $6 = HEAP32[$2 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 12 >> 2] = $6;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$4 >> 2];
 $4 = HEAP32[$5 + 12 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$5 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $5, $2, $3);
 global$0 = $5 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $5 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
 $3 = HEAP32[$1 + 4 >> 2];
 $4 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $3;
 if ($28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($5, $2 + 8 | 0)) {
  wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $6 = 1;
 }
 global$0 = $2 + 32 | 0;
 return $6;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2;
 $5 = $1 + 368 | 0;
 $1 = $3 - $2 >> 2;
 $2 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($5, $1 << 2);
 $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($4, $3, $2);
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($0, $2, $1);
}
function arImageProcLumaHistAndOtsu($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
 $1 = arImageProcLumaHist($0, $1);
 if (($1 | 0) >= 0) {
  $1 = 1;
  while (1) {
   $8 = Math_fround($8 + Math_fround(Math_imul(HEAP32[(($1 << 2) + $0 | 0) + 12 >> 2], $1) >>> 0));
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 256) {
    continue;
   }
   break;
  }
  $11 = Math_fround(Math_imul(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]) | 0);
  $1 = 0;
  while (1) {
   $3 = HEAP32[(($1 << 2) + $0 | 0) + 12 >> 2];
   $4 = Math_fround($4 + Math_fround($3 >>> 0));
   label$4 : {
    if ($4 != Math_fround(0)) {
     $6 = Math_fround($11 - $4);
     if ($6 == Math_fround(0)) {
      break label$4;
     }
     $7 = Math_fround($7 + Math_fround(Math_imul($1, $3) >>> 0));
     $5 = Math_fround(Math_fround($7 / $4) - Math_fround(Math_fround($8 - $7) / $6));
     $5 = Math_fround($5 * Math_fround($5 * Math_fround($4 * $6)));
     $3 = $5 > $9;
     $9 = $3 ? $5 : $9;
     $10 = $3 ? $1 : $10;
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) != 256) {
     continue;
    }
   }
   break;
  }
  HEAP8[$2 | 0] = $10;
  $1 = 0;
 }
 return $1;
}
function arUtilMatInv($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = arMatrixAlloc(4, 4);
 $2 = HEAP32[$5 >> 2];
 while (1) {
  if (($4 | 0) != 3) {
   $9 = $4 << 2;
   $3 = 0;
   while (1) {
    if (($3 | 0) != 4) {
     $6 = (($4 << 5) + $0 | 0) + ($3 << 3) | 0;
     $7 = HEAP32[$6 + 4 >> 2];
     $8 = $2 + ($3 + $9 << 3) | 0;
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$8 + 4 >> 2] = $7;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $4 = $4 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$2 + 96 >> 2] = 0;
 HEAP32[$2 + 100 >> 2] = 0;
 HEAP32[$2 + 120 >> 2] = 0;
 HEAP32[$2 + 124 >> 2] = 1072693248;
 HEAP32[$2 + 112 >> 2] = 0;
 HEAP32[$2 + 116 >> 2] = 0;
 HEAP32[$2 + 104 >> 2] = 0;
 HEAP32[$2 + 108 >> 2] = 0;
 arMatrixSelfInv($5);
 $8 = HEAP32[$5 >> 2];
 $4 = 0;
 while (1) {
  if (($4 | 0) != 3) {
   $6 = $4 << 2;
   $3 = 0;
   while (1) {
    if (($3 | 0) != 4) {
     $2 = $8 + ($3 + $6 << 3) | 0;
     $0 = HEAP32[$2 + 4 >> 2];
     $7 = (($4 << 5) + $1 | 0) + ($3 << 3) | 0;
     HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$7 + 4 >> 2] = $0;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $4 = $4 + 1 | 0;
   continue;
  }
  break;
 }
 arMatrixFree($5);
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______29($0) {
 var $1 = 0;
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29(31944);
 while (1) {
  if ($0) {
   $1 = HEAP32[$0 >> 2];
   void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20arController__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arController___29($0 + 8 | 0);
   dlfree($0);
   $0 = $1;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($3 + 24 | 0, $3 + 8 | 0);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($4, $1, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 25552);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 23751);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (HEAPU8[$2 + 4 | 0] == 10) {
   if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($2)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 8 >> 2];
  }
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const($2, $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
     break label$2;
    }
   }
   $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, 20310);
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $3);
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 global$0 = $3 + 16 | 0;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($3, $2);
 wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[$0]($1, $3) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 12 >> 2] = $5;
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $4, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = $1;
 if ($2) {
  std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0);
  dlfree($2);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 24664);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($2 + 24 | 0, HEAP32[$0 + 8 >> 2]), $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function icpGetJ_U_Xc($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $7 = HEAPF64[$2 >> 3];
 $3 = HEAPF64[$1 + 64 >> 3];
 $8 = HEAPF64[$2 + 8 >> 3];
 $9 = HEAPF64[$2 + 16 >> 3];
 $4 = HEAPF64[$1 + 88 >> 3] + ($7 * $3 + $8 * HEAPF64[$1 + 72 >> 3] + $9 * HEAPF64[$1 + 80 >> 3]);
 if ($4 != 0) {
  $10 = HEAPF64[$1 + 32 >> 3];
  $11 = HEAPF64[$1 + 40 >> 3];
  $12 = HEAPF64[$1 + 48 >> 3];
  $13 = HEAPF64[$1 + 56 >> 3];
  $6 = HEAPF64[$1 >> 3];
  $5 = HEAPF64[$1 + 24 >> 3] + ($6 * $7 + HEAPF64[$1 + 8 >> 3] * $8 + HEAPF64[$1 + 16 >> 3] * $9);
  $6 = $6 * $4 - $5 * $3;
  $3 = $4 * $4;
  HEAPF64[$0 >> 3] = $6 / $3;
  HEAPF64[$0 + 8 >> 3] = ($4 * HEAPF64[$1 + 8 >> 3] - $5 * HEAPF64[$1 + 72 >> 3]) / $3;
  HEAPF64[$0 + 16 >> 3] = ($4 * HEAPF64[$1 + 16 >> 3] - $5 * HEAPF64[$1 + 80 >> 3]) / $3;
  $5 = $13 + ($7 * $10 + $8 * $11 + $9 * $12);
  HEAPF64[$0 + 24 >> 3] = ($4 * HEAPF64[$1 + 32 >> 3] - $5 * HEAPF64[$1 + 64 >> 3]) / $3;
  HEAPF64[$0 + 32 >> 3] = ($4 * HEAPF64[$1 + 40 >> 3] - $5 * HEAPF64[$1 + 72 >> 3]) / $3;
  HEAPF64[$0 + 40 >> 3] = ($4 * HEAPF64[$1 + 48 >> 3] - $5 * HEAPF64[$1 + 80 >> 3]) / $3;
  $0 = 0;
 } else {
  $0 = -1;
 }
 return $0;
}
function std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___find_28int_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = HEAP32[std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($2 + 8 | 0, std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___find_int__28int_20const__29($0, $1)) >> 2];
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 28240);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeOrString__asString_28_29_20const($2 + 32 | 0, $0 + 8 | 0);
 $0 = HEAP32[$2 + 36 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 23751);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, $2);
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($5, $1, $4, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($4 + 8 | 0, $1);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($5, $4, $1, $2);
 global$0 = $4 + 16 | 0;
 return $0;
}
function emscripten__internal__Invoker_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($2, $1);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0]($2) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[$2 + 12 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function arMatrixMul($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $11 = -1;
 label$1 : {
  $5 = HEAP32[$1 + 8 >> 2];
  if (($5 | 0) != HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  $12 = HEAP32[$0 + 4 >> 2];
  if (($12 | 0) != HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $6 = HEAP32[$0 + 8 >> 2];
  if (($6 | 0) != HEAP32[$2 + 8 >> 2]) {
   break label$1;
  }
  $3 = HEAP32[$0 >> 2];
  $11 = 0;
  while (1) {
   if (($7 | 0) >= ($12 | 0)) {
    break label$1;
   }
   $13 = Math_imul($7, $5);
   $4 = 0;
   while (1) {
    if (($4 | 0) < ($6 | 0)) {
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $8 = HEAP32[$2 >> 2] + ($4 << 3) | 0;
     $9 = HEAP32[$1 >> 2] + ($13 << 3) | 0;
     $0 = 0;
     $10 = 0;
     while (1) {
      if (($0 | 0) < ($5 | 0)) {
       $10 = $10 + HEAPF64[$9 >> 3] * HEAPF64[$8 >> 3];
       HEAPF64[$3 >> 3] = $10;
       $0 = $0 + 1 | 0;
       $9 = $9 + 8 | 0;
       $8 = ($6 << 3) + $8 | 0;
       continue;
      }
      break;
     }
     $4 = $4 + 1 | 0;
     $3 = $3 + 8 | 0;
     continue;
    }
    break;
   }
   $7 = $7 + 1 | 0;
   continue;
  }
 }
 return $11;
}
function __dynamic_cast($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = HEAP32[$0 >> 2];
 $4 = HEAP32[$2 + -8 >> 2];
 $2 = HEAP32[$2 + -4 >> 2];
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 29424;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 29472;
 memset($1 + 24 | 0, 0, 39);
 $0 = $0 + $4 | 0;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($2, 29472, 0)) {
   HEAP32[$1 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $1 + 8 | 0, $0, $0, 1, 0);
   $3 = HEAP32[$1 + 32 >> 2] == 1 ? $0 : 0;
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, $1 + 8 | 0, $0, 1, 0);
  $0 = HEAP32[$1 + 44 >> 2];
  if ($0 >>> 0 > 1) {
   break label$1;
  }
  if ($0 - 1) {
   $3 = HEAP32[$1 + 48 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 ? HEAP32[$1 + 40 >> 2] == 1 ? HEAP32[$1 + 28 >> 2] : 0 : 0 : 0;
   break label$1;
  }
  if (HEAP32[$1 + 32 >> 2] != 1) {
   if (HEAP32[$1 + 48 >> 2] | HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 40 >> 2] != 1) {
    break label$1;
   }
  }
  $3 = HEAP32[$1 + 24 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return $3;
}
function arCreateHandle($0) {
 var $1 = 0, $2 = 0;
 $1 = dlmalloc(7062432);
 if ($1) {
  label$2 : {
   HEAP32[$1 + 7062408 >> 2] = 0;
   HEAP32[$1 + 4834148 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = -1;
   HEAP32[$1 + 7062424 >> 2] = 3;
   HEAP32[$1 + 7062416 >> 2] = 0;
   HEAP32[$1 + 7062420 >> 2] = 1071644672;
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 28 >> 2] = 2;
   HEAP32[$1 + 16 >> 2] = 100;
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 1;
   HEAP32[$1 + 32 >> 2] = $0;
   $2 = HEAP32[$0 >> 2];
   HEAP32[$1 + 36 >> 2] = $2;
   $0 = HEAP32[$0 + 4 >> 2];
   HEAP32[$1 + 4834152 >> 2] = 0;
   HEAP32[$1 + 15408 >> 2] = 0;
   HEAP32[$1 + 44 >> 2] = 0;
   HEAP32[$1 + 40 >> 2] = $0;
   HEAP32[$1 + 4818296 >> 2] = 0;
   $0 = dlmalloc(Math_imul($0, $2) << 1);
   HEAP32[$1 + 4834144 >> 2] = $0;
   if (!$0) {
    break label$2;
   }
   HEAP32[$1 + 7062384 >> 2] = 0;
   arSetDebugMode($1, 0);
   HEAP32[$1 + 7062388 >> 2] = -1;
   arSetLabelingThreshMode($1, 0);
   if ($1) {
    HEAP32[$1 + 7062396 >> 2] = 0;
    HEAP32[$1 + 7062392 >> 2] = 7;
   }
   return $1;
  }
 }
 arLog(3, 1425, 0);
 exit(1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 19928);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 19953);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 global$0 = $2 + 32 | 0;
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  label$2 : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (32 <= ($2 & 63) >>> 0) {
     $2 = 0;
     $1 = $4 >>> $1;
    } else {
     $2 = $4 >>> $1;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break label$2;
   }
   if (!$5) {
    break label$1;
   }
   $7 = $4;
   $8 = $3;
   $9 = 64 - $5 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $7 = $8 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $6 = $5;
   $1 = $6 & 31;
   if (32 <= ($6 & 63) >>> 0) {
    $6 = 0;
    $1 = $2 >>> $1;
   } else {
    $6 = $2 >>> $1;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $7 = 0;
    $3 = $4 >>> $3;
   } else {
    $7 = $4 >>> $3;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0;
 label$1 : {
  $1 = HEAP32[$0 >> 2];
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1)) {
   $0 = 1;
   break label$1;
  }
  $0 = 0;
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($1, 0) + -46 | 0;
  if (($1 & 255) >>> 0 > 49) {
   break label$1;
  }
  $1 = $1 & 255;
  $0 = $1 & 31;
  return (32 <= ($1 & 63) >>> 0 ? 131072 >>> $0 : ((1 << $0) - 1 & 131072) << 32 - $0 | 8388609 >>> $0) & 1;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 40 | 0, 25680);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 16 | 0);
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 25689);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20748);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0);
 HEAP32[$2 + 12 >> 2] = $3;
 if ($3) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2 + 12 | 0);
 } else {
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 41, 1, 1, 1);
 HEAP32[$3 >> 2] = 25820;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 28, 1, 1, 1);
 HEAP32[$3 >> 2] = 26712;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 17, 1, 1, 1);
 HEAP32[$3 >> 2] = 27572;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 64, 1, 1, 1);
 HEAP32[$3 >> 2] = 21104;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 0, 1, 1, 1);
 HEAP32[$3 >> 2] = 24684;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 30, 1, 1, 1);
 HEAP32[$3 >> 2] = 26360;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0 + 148 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0 + 288 | 0);
 $1 = $0 + 332 | 0;
 HEAP32[$1 + 8 >> 2] = $1 + 28;
 $2 = $1 + 12 | 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $2;
 HEAP8[$0 + 362 | 0] = 0;
 HEAP16[$0 + 360 >> 1] = 1;
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 372 >> 2] = 0;
 $0 = $0 + 368 | 0;
 HEAP32[$0 + 4096 >> 2] = $0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 9, 1, 1, 1);
 HEAP32[$3 >> 2] = 26828;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__StringView_29($4, $3 + 8 | 0, $3);
 global$0 = $3 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 368 | 0, 20500, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__itanium_demangle__Node__29($3 + 8 | 0, HEAP32[$2 >> 2]);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($0, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 63, 1, 1, 1);
 HEAP32[$3 >> 2] = 20988;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $3, $4, $5, $6) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 18, 0, 1, 0);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26952;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP8[$0 + 32 | 0] = $6;
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 62, 1, 1, 1);
 HEAP32[$3 >> 2] = 20872;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function __wasm_call_ctors() {
 __emscripten_environ_constructor();
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____hash_table_28_29(31944);
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____hash_table_28_29(31964);
 EmscriptenBindingInitializer_constant_bindings__EmscriptenBindingInitializer_constant_bindings_28_29();
 FUNCTION_TABLE[271](33516) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $4 = 1;
 while (1) {
  if (HEAP32[$0 + 4 >> 2] != ($5 | 0)) {
   $7 = HEAP32[$1 + 4 >> 2];
   if (!($4 & 1)) {
    $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 21768);
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
   }
   $6 = HEAP32[$1 + 4 >> 2];
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[HEAP32[$0 >> 2] + ($5 << 2) >> 2], $1);
   $3 = 0;
   if (HEAP32[$1 + 4 >> 2] == ($6 | 0)) {
    $28anonymous_20namespace_29__OutputStream__setCurrentPosition_28unsigned_20long_29($1, $7);
    $3 = $4;
   }
   $5 = $5 + 1 | 0;
   $4 = $3;
   continue;
  }
  break;
 }
 global$0 = $2 + 16 | 0;
}
function arSetLabelingThreshMode($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$0) {
   $4 = -1;
   break label$1;
  }
  if (HEAP32[$0 + 7062388 >> 2] == ($1 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$0 + 7062408 >> 2];
  if ($3) {
   arImageProcFinal($3);
   HEAP32[$0 + 7062408 >> 2] = 0;
  }
  label$4 : {
   if ($1 >>> 0 <= 4) {
    label$6 : {
     switch ($1 - 1 | 0) {
     case 0:
     case 1:
     case 2:
      wasm2js_i32$0 = $0, wasm2js_i32$1 = arImageProcInit(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2]), HEAP32[wasm2js_i32$0 + 7062408 >> 2] = wasm2js_i32$1;
      break label$4;
     case 3:
      break label$6;
     default:
      break label$4;
     }
    }
    HEAP32[$0 + 7062400 >> 2] = 1;
    HEAP32[$0 + 7062404 >> 2] = 1;
    $1 = 4;
    break label$4;
   }
   $1 = 0;
   arLog(3, 1856, 0);
  }
  HEAP32[$0 + 7062388 >> 2] = $1;
  if (HEAP32[$0 >> 2] != 1) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[($1 << 2) + 3840 >> 2];
  arLog(3, 3860, $2);
 }
 global$0 = $2 + 16 | 0;
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 39, 1, 1, 1);
 HEAP32[$3 >> 2] = 25580;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function __stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 $4 = HEAP32[$0 + 48 >> 2];
 HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 HEAP32[$3 + 24 >> 2] = $5;
 label$1 : {
  label$2 : {
   label$3 : {
    if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
     HEAP32[$3 + 12 >> 2] = -1;
     $2 = -1;
     break label$3;
    }
    $4 = HEAP32[$3 + 12 >> 2];
    if (($4 | 0) > 0) {
     break label$2;
    }
    $2 = $4;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2 & 48 ^ 16;
   break label$1;
  }
  $6 = HEAP32[$3 + 20 >> 2];
  if ($4 >>> 0 <= $6 >>> 0) {
   $2 = $4;
   break label$1;
  }
  $5 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = $5 + ($4 - $6 | 0);
  if (!HEAP32[$0 + 48 >> 2]) {
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = $5 + 1;
  HEAP8[($1 + $2 | 0) + -1 | 0] = HEAPU8[$5 | 0];
 }
 global$0 = $3 + 32 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $4 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($3, 54, 1, 1, 1);
 HEAP32[$3 >> 2] = 21340;
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 12 >> 2] = $0;
 global$0 = $2 + 16 | 0;
 return $3;
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  if ($5 & 64) {
   $3 = $1;
   $4 = $5 + -64 | 0;
   $1 = $4 & 31;
   if (32 <= ($4 & 63) >>> 0) {
    $4 = $3 << $1;
    $3 = 0;
   } else {
    $4 = (1 << $1) - 1 & $3 >>> 32 - $1 | $2 << $1;
    $3 = $3 << $1;
   }
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $6 = $3;
  $8 = $5;
  $3 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $7 = $6 << $3;
   $9 = 0;
  } else {
   $7 = (1 << $3) - 1 & $6 >>> 32 - $3 | $4 << $3;
   $9 = $6 << $3;
  }
  $3 = $2;
  $6 = $1;
  $5 = 64 - $5 | 0;
  $4 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $5 = 0;
   $3 = $3 >>> $4;
  } else {
   $5 = $3 >>> $4;
   $3 = ((1 << $4) - 1 & $3) << 32 - $4 | $6 >>> $4;
  }
  $3 = $9 | $3;
  $4 = $5 | $7;
  $5 = $1;
  $1 = $8 & 31;
  if (32 <= ($8 & 63) >>> 0) {
   $7 = $5 << $1;
   $1 = 0;
  } else {
   $7 = (1 << $1) - 1 & $5 >>> 32 - $1 | $2 << $1;
   $1 = $5 << $1;
  }
  $2 = $7;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2 : {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($0 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function arSetPixelFormat($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  if (!$0 | HEAP32[$0 + 4 >> 2] == ($1 | 0)) {
   break label$1;
  }
  if ($1 >>> 0 >= 15) {
   HEAP32[$3 >> 2] = $1;
   arLog(3, 4079, $3);
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = $1;
  $2 = $0;
  if ($1 >>> 0 <= 14) {
   $4 = HEAP32[($1 << 2) + 7396 >> 2];
  } else {
   $4 = 0;
  }
  HEAP32[$2 + 8 >> 2] = $4;
  $2 = HEAP32[$0 + 24 >> 2];
  if (28704 >>> ($1 & 32767) & 1) {
   if ($2 >>> 0 > 3) {
    break label$1;
   }
   label$6 : {
    switch ($2 - 1 | 0) {
    default:
     HEAP32[$0 + 24 >> 2] = 1;
     break label$1;
    case 0:
    case 1:
     break label$1;
    case 2:
     break label$6;
    }
   }
   HEAP32[$0 + 24 >> 2] = 4;
   break label$1;
  }
  $1 = $2 + -1 | 0;
  if ($1 >>> 0 > 3) {
   break label$1;
  }
  label$8 : {
   switch ($1 - 1 | 0) {
   default:
    HEAP32[$0 + 24 >> 2] = 4;
    break label$1;
   case 0:
   case 1:
    break label$1;
   case 2:
    break label$8;
   }
  }
  HEAP32[$0 + 24 >> 2] = 3;
 }
 global$0 = $3 + 16 | 0;
}
function get_vertex($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $7 = $2 << 2;
 $9 = HEAP32[$7 + $1 >> 2];
 $8 = $3 << 2;
 $14 = HEAP32[$8 + $0 >> 2];
 $7 = HEAP32[$0 + $7 >> 2];
 $8 = HEAP32[$1 + $8 >> 2];
 $15 = +(Math_imul($9, $14) - Math_imul($7, $8) | 0);
 $11 = +($7 - $14 | 0);
 $12 = +($8 - $9 | 0);
 $7 = $2 + 1 | 0;
 $9 = $7;
 while (1) {
  if (($7 | 0) < ($3 | 0)) {
   $8 = $7 << 2;
   $10 = $12 * +HEAP32[$8 + $0 >> 2] + $11 * +HEAP32[$1 + $8 >> 2] + $15;
   $10 = $10 * $10;
   $8 = $10 > $13;
   $13 = $8 ? $10 : $13;
   $9 = $8 ? $7 : $9;
   $7 = $7 + 1 | 0;
   continue;
  }
  break;
 }
 label$3 : {
  if (!!($13 / ($12 * $12 + $11 * $11) > $4)) {
   $7 = -1;
   if ((get_vertex($0, $1, $2, $9, $4, $5, $6) | 0) < 0) {
    break label$3;
   }
   $2 = HEAP32[$6 >> 2];
   if (($2 | 0) > 5) {
    break label$3;
   }
   HEAP32[($2 << 2) + $5 >> 2] = $9;
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   if ((get_vertex($0, $1, $9, $3, $4, $5, $6) | 0) < 0) {
    break label$3;
   }
  }
  $7 = 0;
 }
 return $7;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($0) {
 $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0 + 368 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 332 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 288 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 148 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 8 | 0);
}
function EX($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = -1;
 label$1 : {
  $5 = HEAP32[$0 + 4 >> 2];
  if (($5 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 8 >> 2];
  if (($4 | 0) < 1 | HEAP32[$1 + 4 >> 2] != ($4 | 0)) {
   break label$1;
  }
  while (1) {
   if (($2 | 0) != ($4 | 0)) {
    $3 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $3 = HEAP32[$0 >> 2];
  while (1) if (($5 | 0) == ($6 | 0)) {
   $7 = +($5 | 0);
   $3 = 0;
   $2 = 0;
   while (1) {
    if (($2 | 0) == ($4 | 0)) {
     break label$1;
    }
    $0 = HEAP32[$1 >> 2] + ($2 << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $7;
    $2 = $2 + 1 | 0;
    continue;
   }
  } else {
   $2 = HEAP32[$1 >> 2];
   $0 = 0;
   while (1) {
    if (($0 | 0) != ($4 | 0)) {
     HEAPF64[$2 >> 3] = HEAPF64[$3 >> 3] + HEAPF64[$2 >> 3];
     $0 = $0 + 1 | 0;
     $2 = $2 + 8 | 0;
     $3 = $3 + 8 | 0;
     continue;
    }
    break;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 368 | 0, $1, $2);
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
  return;
 }
 label$2 : {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$2;
  }
  if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
   if (($3 | 0) != 1) {
    break label$2;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = $0;
 $0 = $1 + 8 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($3, $1, HEAP32[$0 >> 2] + ($2 << 2) | 0, HEAP32[$0 + 4 >> 2]);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___dropBack_28unsigned_20long_29($0, $2);
}
function std____2__unordered_map_int_2c_20arController_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arController__20__20___end_28_29() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 $1 = std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($0 + 8 | 0, std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___end_28_29());
 global$0 = $0 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function strspn($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = 1528;
 $4 = global$0 - 32 | 0;
 $1 = $4;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $2 = HEAPU8[1528];
 if (!$2) {
  return 0;
 }
 if (!HEAPU8[1529]) {
  $3 = $0;
  while (1) {
   $1 = $3;
   $3 = $1 + 1 | 0;
   if (HEAPU8[$1 | 0] == ($2 | 0)) {
    continue;
   }
   break;
  }
  return $1 - $0 | 0;
 }
 while (1) {
  $1 = ($2 >>> 3 & 28) + $4 | 0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1 << ($2 & 31);
  $2 = HEAPU8[$3 + 1 | 0];
  $3 = $3 + 1 | 0;
  if ($2) {
   continue;
  }
  break;
 }
 $1 = $0;
 $2 = HEAPU8[$1 | 0];
 label$5 : {
  if (!$2) {
   break label$5;
  }
  $3 = $0;
  while (1) {
   if (!(HEAP32[($2 >>> 3 & 28) + $4 >> 2] >>> ($2 & 31) & 1)) {
    $1 = $3;
    break label$5;
   }
   $2 = HEAPU8[$3 + 1 | 0];
   $1 = $3 + 1 | 0;
   $3 = $1;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 36, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26056;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (!$3) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
  if ($28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 26460);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $2);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 4, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23180;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 33, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23428;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
    break label$1;
   }
  }
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 20310);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4, $5) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 15, 0, 1, 0);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27696;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP8[$0 + 24 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 27552);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 16 | 0, 20310);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 if (4294967279 >= $2 >>> 0) {
  label$2 : {
   if ($2 >>> 0 <= 10) {
    HEAP8[$0 + 11 | 0] = $2;
    $3 = $0;
    break label$2;
   }
   $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2) + 1 | 0;
   $3 = $5;
   if (4294967295 < $3 >>> 0) {
    std____2____throw_length_error_28char_20const__29(19085);
    abort();
   }
   $3 = operator_20new_28unsigned_20long_29($3);
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $5 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $2;
  }
  if ($2) {
   memcpy($3, $1, $2);
  }
  HEAP8[$4 + 15 | 0] = 0;
  HEAP8[$2 + $3 | 0] = HEAPU8[$4 + 15 | 0];
  global$0 = $4 + 16 | 0;
  return;
 }
 std____2____throw_length_error_28char_20const__29(19072);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 12 >> 2] = $4;
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2], HEAPU8[$3 | 0]);
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, $3 + 12 | 0);
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 global$0 = $3 + 16 | 0;
 return $0;
}
function icpGetJ_U_S($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 224 | 0;
 global$0 = $4;
 icpGetJ_Xc_S($4 + 80 | 0, $4 + 8 | 0, $2, $3);
 $3 = -1;
 label$1 : {
  if ((icpGetJ_U_Xc($4 + 32 | 0, $1, $4 + 8 | 0) | 0) > -1) {
   $2 = 0;
   while (1) {
    $3 = 0;
    if (($2 | 0) == 2) {
     break label$1;
    }
    while (1) {
     if (($3 | 0) != 6) {
      $7 = $3 << 3;
      $5 = $7 + (Math_imul($2, 48) + $0 | 0) | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $1 = 0;
      $6 = 0;
      while (1) {
       if (($1 | 0) != 3) {
        $6 = $6 + HEAPF64[(($4 + 32 | 0) + Math_imul($2, 24) | 0) + ($1 << 3) >> 3] * HEAPF64[(($4 + 80 | 0) + Math_imul($1, 48) | 0) + $7 >> 3];
        $1 = $1 + 1 | 0;
        continue;
       }
       break;
      }
      HEAPF64[$5 >> 3] = $6;
      $3 = $3 + 1 | 0;
      continue;
     }
     break;
    }
    $2 = $2 + 1 | 0;
    continue;
   }
  }
  arLog(3, 2152, 0);
 }
 global$0 = $4 + 224 | 0;
 return $3;
}
function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______29(HEAP32[7988]);
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_28std__nullptr_t_29(31944);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $1);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($4, $3, $1);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($3 + 8 | 0, $2);
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 26460);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function __cxx_global_array_dtor_2($0) {
 $0 = $0 | 0;
 std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void______29(HEAP32[7993]);
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_28std__nullptr_t_29(31964);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function __multi3($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $9 = $0;
 $10 = $4;
 $4 = 0;
 $11 = $4;
 $6 = $2;
 $2 = 0;
 $7 = __wasm_i64_mul($10, $4, $6, $2);
 $4 = i64toi32_i32$HIGH_BITS;
 $12 = $7;
 $7 = $7 >>> 0 < 0 ? $4 + 1 | 0 : $4;
 $5 = $3;
 $8 = $1;
 $3 = __wasm_i64_mul($5, 0, $1, 0);
 $4 = 0;
 $1 = i64toi32_i32$HIGH_BITS;
 $5 = __wasm_i64_mul($5, $13, $6, $2);
 $2 = $1 + $5 | 0;
 $1 = i64toi32_i32$HIGH_BITS + $4 | 0;
 $1 = $2 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
 $5 = $2;
 $6 = $1;
 $4 = $1 + $12 | 0;
 $1 = $7;
 $1 = $4 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
 $6 = $4;
 $7 = $1;
 $1 = __wasm_i64_mul($8, $14, $10, $11);
 $4 = i64toi32_i32$HIGH_BITS;
 $1 = $1 + $5 | 0;
 if ($1 >>> 0 < $5 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $8 = $4;
 $5 = $4 + $6 | 0;
 $4 = $7;
 HEAP32[$9 + 8 >> 2] = $5;
 HEAP32[$9 + 12 >> 2] = $5 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 368 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 51, 1, 1, 1);
 HEAP32[$0 >> 2] = 24212;
 $6 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $6;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP8[$0 + 29 | 0] = $5;
 HEAP8[$0 + 28 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($4, $1, $3);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0 + 368 | 0, $1, $2);
}
function loadCamera($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 192 | 0;
 global$0 = $1;
 $2 = -1;
 label$1 : {
  if ((arParamLoad(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0), $1 + 8 | 0) | 0) <= -1) {
   wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   arLog(3, 7504, $1);
   break label$1;
  }
  $0 = HEAP32[7996];
  HEAP32[7996] = $0 + 1;
  HEAP32[$1 + 4 >> 2] = $0;
  memcpy(std____2__unordered_map_int_2c_20ARParam_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20ARParam__20__20___operator_5b_5d_28int_20const__29($1 + 4 | 0), $1 + 8 | 0, 184);
  $2 = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 192 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $4 = HEAP32[$0 + 12 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 24 >> 2] = $3;
 HEAP32[$2 + 28 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $3 = HEAP32[$0 + 24 >> 2];
 $0 = HEAP32[$0 + 20 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function __strchrnul($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  $3 = $1 & 255;
  if ($3) {
   if ($0 & 3) {
    while (1) {
     $2 = HEAPU8[$0 | 0];
     if (!$2 | ($2 | 0) == ($1 & 255)) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 >> 2];
   label$5 : {
    if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
     break label$5;
    }
    $3 = Math_imul($3, 16843009);
    while (1) {
     $2 = $2 ^ $3;
     if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
      break label$5;
     }
     $2 = HEAP32[$0 + 4 >> 2];
     $0 = $0 + 4 | 0;
     if (!($2 + -16843009 & ($2 ^ -1) & -2139062144)) {
      continue;
     }
     break;
    }
   }
   while (1) {
    $2 = $0;
    $3 = HEAPU8[$2 | 0];
    if ($3) {
     $0 = $2 + 1 | 0;
     if (($3 | 0) != ($1 & 255)) {
      continue;
     }
    }
    break;
   }
   return $2;
  }
  return strlen($0) + $0 | 0;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function __extendsftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
 $6 = $3 & -2147483648;
 $2 = $3 & 2147483647;
 label$1 : {
  if ($2 + -8388608 >>> 0 <= 2130706431) {
   $3 = $2;
   $2 = $2 >>> 7;
   $3 = $3 << 25;
   $2 = $2 + 1065353216 | 0;
   $5 = $3;
   $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   $5 = $3 << 25;
   $2 = $3 >>> 7 | 2147418112;
   break label$1;
  }
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  $3 = $2;
  $2 = Math_clz32($2);
  __ashlti3($4, $3, 0, 0, 0, $2 + 81 | 0);
  $7 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$4 + 12 >> 2] ^ 65536 | 16265 - $2 << 16;
 }
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $2 | $6;
 global$0 = $4 + 16 | 0;
}
function cos($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $3 = $3 & 2147483647;
 label$1 : {
  if ($3 >>> 0 <= 1072243195) {
   $2 = 1;
   if ($3 >>> 0 < 1044816030) {
    break label$1;
   }
   $2 = __cos($0, 0);
   break label$1;
  }
  $2 = $0 - $0;
  if ($3 >>> 0 >= 2146435072) {
   break label$1;
  }
  $3 = __rem_pio2($0, $1) & 3;
  if ($3 >>> 0 <= 2) {
   label$4 : {
    switch ($3 - 1 | 0) {
    default:
     $2 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 0:
     $2 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 1:
     break label$4;
    }
   }
   $2 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
   break label$1;
  }
  $2 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___push_back_28multi_marker_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0) >> 2]) {
   void_20std____2__allocator_traits_std____2__allocator_multi_marker__20___construct_multi_marker_2c_20multi_marker_20const___28std____2__allocator_multi_marker___2c_20multi_marker__2c_20multi_marker_20const__29(std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0), HEAP32[$0 + 4 >> 2], $1);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 8;
   break label$1;
  }
  void_20std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____push_back_slow_path_multi_marker_20const___28multi_marker_20const__29($0, $1);
 }
 global$0 = $2 + 16 | 0;
}
function icpGetDeltaS($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 36 >> 2] = 6;
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 32 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = 1;
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = 6;
 HEAP32[$4 + 4 >> 2] = $3;
 HEAP32[$4 >> 2] = $2;
 $3 = arMatrixAllocTrans($4);
 label$1 : {
  if (!$3) {
   $2 = -1;
   break label$1;
  }
  $0 = arMatrixAllocMul($3, $4);
  label$3 : {
   if (!$0) {
    $2 = -1;
    $1 = $3;
    break label$3;
   }
   $1 = arMatrixAllocMul($3, $4 + 16 | 0);
   label$5 : {
    if (!$1) {
     $2 = -1;
     $1 = $0;
     break label$5;
    }
    $2 = 0;
    label$7 : {
     if ((arMatrixSelfInv($0) | 0) < 0) {
      $2 = -1;
      break label$7;
     }
     arMatrixMul($4 + 32 | 0, $0, $1);
    }
    arMatrixFree($3);
    $3 = $0;
   }
   arMatrixFree($3);
  }
  arMatrixFree($1);
 }
 global$0 = $4 + 48 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  $2 = HEAP8[$0 | 0];
  if (($2 | 0) == 95) {
   if (($0 + 1 | 0) == ($1 | 0)) {
    break label$1;
   }
   $2 = HEAP8[$0 + 1 | 0];
   if ($2 + -48 >>> 0 <= 9) {
    return $0 + 2 | 0;
   }
   if (($2 | 0) != 95) {
    break label$1;
   }
   $2 = $0 + 2 | 0;
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $3 = HEAP8[$2 | 0];
    if ($3 + -48 >>> 0 <= 9) {
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   }
   return ($3 | 0) == 95 ? $2 + 1 | 0 : $0;
  }
  if ($2 + -48 >>> 0 > 9) {
   break label$1;
  }
  $2 = $0;
  while (1) {
   $2 = $2 + 1 | 0;
   if (($2 | 0) == ($1 | 0)) {
    return $1;
   }
   if (HEAP8[$2 | 0] + -48 >>> 0 < 10) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($3, 0, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  $2 = __rem_pio2($0, $1) & 3;
  if ($2 >>> 0 <= 2) {
   label$5 : {
    switch ($2 - 1 | 0) {
    default:
     $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 0:
     $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 1:
     break label$5;
    }
   }
   $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
   break label$1;
  }
  $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function wcrtomb($0, $1) {
 label$1 : {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3 : {
    if (!HEAP32[HEAP32[7889] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   HEAP32[8356] = 25;
   $0 = -1;
  } else {
   $0 = 1;
  }
  return $0;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}
function $28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($0, $1) {
 if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) | 0) == ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1) | 0)) {
  $0 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$1 >> 2]);
 } else {
  $0 = 0;
 }
 return $0;
}
function arParamObserv2IdealLTf($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = Math_fround($2 + Math_fround(.5));
 label$1 : {
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648)) {
   $6 = ~~$2;
   break label$1;
  }
  $6 = -2147483648;
 }
 $7 = HEAP32[$0 + 20 >> 2];
 $8 = -1;
 $1 = Math_fround($1 + Math_fround(.5));
 label$4 : {
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
   $5 = ~~$1;
   break label$4;
  }
  $5 = -2147483648;
 }
 $5 = $5 + HEAP32[$0 + 16 >> 2] | 0;
 label$3 : {
  if (($5 | 0) < 0) {
   break label$3;
  }
  $7 = $7 + $6 | 0;
  if (($7 | 0) < 0) {
   break label$3;
  }
  $6 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) >= ($6 | 0) | ($7 | 0) >= HEAP32[$0 + 12 >> 2]) {
   break label$3;
  }
  $0 = HEAP32[$0 + 4 >> 2] + (Math_imul($7, $6) + $5 << 3) | 0;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$0 + 4 >> 2];
  $8 = 0;
 }
 return $8;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12);
 $1 = HEAP32[$1 >> 2] != 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 59, 1, 1, 1);
 HEAP8[$0 + 8 | 0] = $1;
 HEAP32[$0 >> 2] = 20760;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 20348);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2 + 16 | 0, $0);
 $0 = HEAP32[$2 + 20 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $1 = $1 - $0 >> 2;
 while (1) {
  if ($1) {
   HEAP32[$3 + 12 >> 2] = $0;
   $4 = $1 >>> 1;
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + ($4 << 2);
   if (std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const(HEAP32[$3 + 12 >> 2], $2)) {
    $0 = HEAP32[$3 + 12 >> 2] + 4 | 0;
    HEAP32[$3 + 12 >> 2] = $0;
    $1 = ($4 ^ -1) + $1 | 0;
   } else {
    $1 = $4;
   }
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
 return $0;
}
function icpGetQ_from_S($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAPF64[$1 >> 3];
 $3 = HEAPF64[$1 + 8 >> 3];
 $5 = $2 * $2 + $3 * $3;
 $3 = HEAPF64[$1 + 16 >> 3];
 $3 = $5 + $3 * $3;
 label$1 : {
  if ($3 == 0) {
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 1072693248;
   $2 = 0;
   break label$1;
  }
  $5 = $2;
  $2 = Math_sqrt($3);
  HEAPF64[$0 >> 3] = $5 / $2;
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$1 + 8 >> 3] / $2;
  $6 = HEAPF64[$1 + 16 >> 3] / $2;
 }
 HEAPF64[$0 + 24 >> 3] = $2;
 HEAPF64[$0 + 16 >> 3] = $6;
 $4 = HEAP32[$1 + 28 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$0 + 36 >> 2] = $4;
 $4 = HEAP32[$1 + 36 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$0 + 44 >> 2] = $4;
 $4 = HEAP32[$1 + 44 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$0 + 52 >> 2] = $4;
}
function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1 : {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
  }
  label$5 : {
   if (HEAP8[$2 + 75 | 0] < 0) {
    break label$5;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     break label$5;
    }
    $4 = $3 + -1 | 0;
    if (HEAPU8[$4 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $1 = $1 - $3 | 0;
   $0 = $0 + $3 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
   $6 = $3;
  }
  memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  $4 = $1 + $6 | 0;
 }
 return $4;
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 $4 = 1;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$1;
  }
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1);
  if (!$1) {
   break label$1;
  }
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = $1;
  memset($3 + 24 | 0, 0, 39);
  HEAP32[$3 + 56 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  if (HEAP32[$3 + 32 >> 2] != 1) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  $4 = 1;
 }
 global$0 = $3 - -64 | 0;
 return $4 | 0;
}
function __getf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = -1;
 $4 = $3 & 2147483647;
 $7 = $4;
 $5 = $2;
 label$1 : {
  if (!$2 & ($4 | 0) == 2147418112 ? $0 | $1 : ($4 | 0) == 2147418112 & $2 >>> 0 > 0 | $4 >>> 0 > 2147418112) {
   break label$1;
  }
  if (!($0 | $5 | ($7 | 1073610752 | $1))) {
   return 0;
  }
  $5 = $3 & 1073610752;
  if (($5 | 0) > 0 ? 1 : ($5 | 0) >= 0 ? 1 : 0) {
   if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 < 0 | $1 >>> 0 < 0 : ($3 | 0) < 1073610752 ? 1 : ($3 | 0) <= 1073610752 ? $2 >>> 0 >= 0 ? 0 : 1 : 0) {
    break label$1;
   }
   return ($0 | $2) != 0 | ($3 ^ 1073610752 | $1) != 0;
  }
  if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 > 0 | $1 >>> 0 > 0 : ($3 | 0) > 1073610752 ? 1 : ($3 | 0) >= 1073610752 ? $2 >>> 0 <= 0 ? 0 : 1 : 0) {
   break label$1;
  }
  $6 = ($0 | $2) != 0 | ($3 ^ 1073610752 | $1) != 0;
 }
 return $6;
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 HEAP8[$0 + 53 | 0] = 1;
 label$1 : {
  if (HEAP32[$0 + 4 >> 2] != ($2 | 0)) {
   break label$1;
  }
  HEAP8[$0 + 52 | 0] = 1;
  $2 = HEAP32[$0 + 16 >> 2];
  if (!$2) {
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 24 >> 2] = $3;
   HEAP32[$0 + 16 >> 2] = $1;
   if (($3 | 0) != 1 | HEAP32[$0 + 48 >> 2] != 1) {
    break label$1;
   }
   HEAP8[$0 + 54 | 0] = 1;
   return;
  }
  if (($1 | 0) == ($2 | 0)) {
   $2 = HEAP32[$0 + 24 >> 2];
   if (($2 | 0) == 2) {
    HEAP32[$0 + 24 >> 2] = $3;
    $2 = $3;
   }
   if (HEAP32[$0 + 48 >> 2] != 1 | ($2 | 0) != 1) {
    break label$1;
   }
   HEAP8[$0 + 54 | 0] = 1;
   return;
  }
  HEAP8[$0 + 54 | 0] = 1;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__NameState_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP16[$0 >> 1] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($1 + 332 | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 35, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24904;
 return $0;
}
function $28anonymous_20namespace_29__StringView__startsWith_28_28anonymous_20namespace_29__StringView_29_20const($0, $1) {
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1) >>> 0 <= $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0) {
  $0 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$0 >> 2]);
 } else {
  $0 = 0;
 }
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___end_28_29() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 $1 = std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($0 + 8 | 0, 0);
 global$0 = $0 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function arParamIdeal2ObservLTf($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $2 = Math_fround($2 + Math_fround(.5));
 label$1 : {
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648)) {
   $6 = ~~$2;
   break label$1;
  }
  $6 = -2147483648;
 }
 $7 = HEAP32[$0 + 20 >> 2];
 $1 = Math_fround($1 + Math_fround(.5));
 label$4 : {
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
   $5 = ~~$1;
   break label$4;
  }
  $5 = -2147483648;
 }
 $5 = $5 + HEAP32[$0 + 16 >> 2] | 0;
 label$3 : {
  if (($5 | 0) < 0) {
   break label$3;
  }
  $7 = $7 + $6 | 0;
  if (($7 | 0) < 0) {
   break label$3;
  }
  $6 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) >= ($6 | 0) | ($7 | 0) >= HEAP32[$0 + 12 >> 2]) {
   break label$3;
  }
  $0 = HEAP32[$0 >> 2] + (Math_imul($7, $6) + $5 << 3) | 0;
  HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$0 + 4 >> 2];
 }
}
function byteswap($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 192 | 0;
 global$0 = $2;
 byteSwapInt($0, $2 + 8 | 0);
 byteSwapInt($0 + 4 | 0, $2 + 8 | 4);
 while (1) {
  label$2 : {
   $3 = 0;
   if (($1 | 0) == 3) {
    while (1) {
     $1 = HEAP32[$0 + 176 >> 2];
     if (($3 | 0) >= HEAP32[($1 << 3) + 7448 >> 2]) {
      break label$2;
     }
     $1 = $3 << 3;
     byteSwapDouble(($1 + $0 | 0) + 104 | 0, ($2 + $1 | 0) + 112 | 0);
     $3 = $3 + 1 | 0;
     continue;
    }
   }
   while (1) {
    if (($3 | 0) != 4) {
     $4 = $3 << 3;
     $5 = $1 << 5;
     byteSwapDouble(($4 + ($5 + $0 | 0) | 0) + 8 | 0, (($2 + $5 | 0) + $4 | 0) + 16 | 0);
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$2 + 184 >> 2] = $1;
 memcpy($0, $2 + 8 | 0, 184);
 global$0 = $2 + 192 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2, $3) {
 var $4 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 47, 1, 1, 1);
 HEAP32[$0 >> 2] = 24332;
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$0 + 24 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 20), HEAP32[$1 >> 2], HEAPU8[$2 | 0], HEAP32[$3 >> 2]);
}
function icpCreateHandle($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = dlmalloc(136);
 if (!$1) {
  return 0;
 }
 while (1) {
  $3 = 0;
  if (($5 | 0) != 3) {
   while (1) {
    if (($3 | 0) != 4) {
     $2 = $3 << 3;
     $4 = $5 << 5;
     $6 = $2 + ($4 + $1 | 0) | 0;
     $2 = ($0 + $4 | 0) + $2 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $5 = $5 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 1071644672;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 1074790400;
 HEAP32[$1 + 112 >> 2] = -2147483648;
 HEAP32[$1 + 116 >> 2] = 1072672276;
 HEAP32[$1 + 104 >> 2] = -1610612736;
 HEAP32[$1 + 108 >> 2] = 1069128089;
 HEAP32[$1 + 96 >> 2] = 10;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 24 | 0, 21324);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2 + 8 | 0);
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 11, HEAPU8[$1 + 5 | 0], 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28748;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 20172);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 49, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24560;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 16), HEAP32[$1 >> 2], HEAPU8[$2 | 0], HEAPU8[$3 | 0]);
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___unique_ptr_true_2c_20void__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, $1 + 12 | 0);
 std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20_____bucket_list_deallocator_28_29($0 + 4 | 0);
 global$0 = $1 + 16 | 0;
}
function strcspn($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $3 = 1528;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 $1 = HEAP8[1528];
 label$1 : {
  if (!(HEAPU8[1529] ? $1 : 0)) {
   $1 = __strchrnul($0, $1);
   break label$1;
  }
  memset($4, 0, 32);
  $2 = HEAPU8[1528];
  if ($2) {
   while (1) {
    $1 = ($2 >>> 3 & 28) + $4 | 0;
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1 << ($2 & 31);
    $2 = HEAPU8[$3 + 1 | 0];
    $3 = $3 + 1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $1 = $0;
  $2 = HEAPU8[$1 | 0];
  if (!$2) {
   break label$1;
  }
  $3 = $0;
  while (1) {
   if (HEAP32[($2 >>> 3 & 28) + $4 >> 2] >>> ($2 & 31) & 1) {
    $1 = $3;
    break label$1;
   }
   $2 = HEAPU8[$3 + 1 | 0];
   $1 = $3 + 1 | 0;
   $3 = $1;
   if ($2) {
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 32 | 0;
 return $1 - $0 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___bucket_count_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0) >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 34, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26592;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 57, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 >> 2] = 21544;
 $3 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP8[$0 + 24 | 0] = $1;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 19, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23308;
 return $0;
}
function arLabeling($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 if (!$3) {
  if (($4 | 0) == 1) {
   if ($8) {
    return arLabelingSubDBZ($0, $1, $2, $8, $7);
   }
   if (!$6) {
    return arLabelingSubDBRC($0, $1, $2, $5, $7);
   }
   return arLabelingSubDBIC($0, $1, $2, $5, $7);
  }
  if ($8) {
   return arLabelingSubDWZ($0, $1, $2, $8, $7);
  }
  if (!$6) {
   return arLabelingSubDWRC($0, $1, $2, $5, $7);
  }
  return arLabelingSubDWIC($0, $1, $2, $5, $7);
 }
 if (($4 | 0) == 1) {
  if ($8) {
   return arLabelingSubEBZ($0, $1, $2, $8, $7);
  }
  if (!$6) {
   return arLabelingSubEBRC($0, $1, $2, $5, $7);
  }
  return arLabelingSubEBIC($0, $1, $2, $5, $7);
 }
 if ($8) {
  return arLabelingSubEWZ($0, $1, $2, $8, $7);
 }
 if (!$6) {
  return arLabelingSubEWRC($0, $1, $2, $5, $7);
 }
 return arLabelingSubEWIC($0, $1, $2, $5, $7);
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 16, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27452;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($3, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 5 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 7 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function arImageProcLumaHistAndCDFAndPercentile($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
 $1 = arImageProcLumaHistAndCDF($0, $1);
 if (($1 | 0) >= 0) {
  $4 = Math_fround(Math_fround(Math_imul(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]) | 0) * Math_fround(.5));
  label$2 : {
   if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
    $5 = ~~$4 >>> 0;
    break label$2;
   }
   $5 = 0;
  }
  while (1) {
   $3 = $7;
   $7 = $3 + 1 | 0;
   $6 = $3 & 255;
   $1 = HEAP32[(($6 << 2) + $0 | 0) + 1036 >> 2];
   if ($1 >>> 0 < $5 >>> 0) {
    continue;
   }
   break;
  }
  while (1) {
   if (($1 | 0) == ($5 | 0)) {
    $3 = $3 + 1 | 0;
    $1 = HEAP32[((($3 & 255) << 2) + $0 | 0) + 1036 >> 2];
    continue;
   }
   break;
  }
  HEAP8[$2 | 0] = ($3 & 255) + $6 >>> 1;
  $1 = 0;
 }
 return $1;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0;
 while (1) {
  if (($0 | 0) == ($1 | 0)) {
   return 1;
  }
  $2 = HEAP32[$0 >> 2];
  $0 = $0 + 4 | 0;
  if (HEAPU8[$2 + 6 | 0] == 1) {
   continue;
  }
  break;
 }
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 58, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24792;
 return $0;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____recommend_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___max_size_28_29_20const($0);
 if ($3 >>> 0 >= $1 >>> 0) {
  $0 = std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
  if ($0 >>> 0 < $3 >>> 1 >>> 0) {
   HEAP32[$2 + 8 >> 2] = $0 << 1;
   $3 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
  }
  global$0 = $2 + 16 | 0;
  return $3;
 }
 std____2____throw_length_error_28char_20const__29(19153);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12);
 $1 = HEAP32[$1 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 38, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22588;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = HEAP32[$0 + 16 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 20 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function sift($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 240 | 0;
 global$0 = $3;
 HEAP32[$3 >> 2] = $0;
 $6 = 1;
 label$1 : {
  if (($1 | 0) < 2) {
   break label$1;
  }
  $4 = $0;
  while (1) {
   $5 = $4 + -8 | 0;
   $7 = $1 + -2 | 0;
   $4 = $5 - HEAP32[($7 << 2) + $2 >> 2] | 0;
   if ((FUNCTION_TABLE[1]($0, $4) | 0) >= 0) {
    if ((FUNCTION_TABLE[1]($0, $5) | 0) > -1) {
     break label$1;
    }
   }
   $0 = ($6 << 2) + $3 | 0;
   label$4 : {
    if ((FUNCTION_TABLE[1]($4, $5) | 0) >= 0) {
     HEAP32[$0 >> 2] = $4;
     $7 = $1 + -1 | 0;
     break label$4;
    }
    HEAP32[$0 >> 2] = $5;
    $4 = $5;
   }
   $6 = $6 + 1 | 0;
   if (($7 | 0) < 2) {
    break label$1;
   }
   $0 = HEAP32[$3 >> 2];
   $1 = $7;
   continue;
  }
 }
 cycle($3, $6);
 global$0 = $3 + 240 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 48, 1, 1, 1);
 HEAP32[$0 >> 2] = 21996;
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 return $0;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___reset_28std__nullptr_t_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = 0;
 if ($1) {
  std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0);
  dlfree($1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 46, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23540;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 42, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 21780;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 27680);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 41);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = HEAP32[$0 + 4 >> 2];
 $28anonymous_20namespace_29__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 40);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($1, HEAP32[$2 + 8 >> 2]), HEAP32[$0 >> 2]);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 41);
 global$0 = $1 + 16 | 0;
}
function arMatrixDup($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = -1;
 label$1 : {
  $7 = HEAP32[$0 + 4 >> 2];
  if (($7 | 0) != HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $4 = HEAP32[$0 + 8 >> 2];
  if (($4 | 0) != HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  $6 = 0;
  while (1) {
   if (($5 | 0) >= ($7 | 0)) {
    break label$1;
   }
   $9 = Math_imul($5, $4);
   $3 = 0;
   while (1) {
    if (($3 | 0) < ($4 | 0)) {
     $2 = $3 + $9 << 3;
     $8 = $2 + HEAP32[$0 >> 2] | 0;
     $2 = HEAP32[$1 >> 2] + $2 | 0;
     $10 = HEAP32[$2 + 4 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$8 + 4 >> 2] = $10;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $6;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0 + 368 | 0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 26928);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 40, 1, 1, 1);
 HEAP32[$0 >> 2] = 25700;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20ARParam__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20ARParam__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20ARParam__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void______29($0) {
 var $1 = 0;
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29(31964);
 while (1) {
  if ($0) {
   $1 = HEAP32[$0 >> 2];
   dlfree($0);
   $0 = $1;
   continue;
  }
  break;
 }
}
function fread($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAPU8[$2 + 74 | 0];
 HEAP8[$2 + 74 | 0] = $3 + -1 | $3;
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$2 + 8 >> 2] - $3 | 0;
 $5 = $1;
 label$3 : {
  if (($4 | 0) < 1) {
   break label$3;
  }
  $5 = $3;
  $3 = $4 >>> 0 < $1 >>> 0 ? $4 : $1;
  memcpy($0, $5, $3);
  HEAP32[$2 + 4 >> 2] = $3 + HEAP32[$2 + 4 >> 2];
  $0 = $0 + $3 | 0;
  $5 = $1 - $3 | 0;
 }
 $3 = $5;
 if ($3) {
  while (1) {
   label$6 : {
    if (!__toread($2)) {
     $4 = FUNCTION_TABLE[HEAP32[$2 + 32 >> 2]]($2, $0, $3) | 0;
     if ($4 + 1 >>> 0 > 1) {
      break label$6;
     }
    }
    return ($1 - $3 >>> 0) / ($1 >>> 0) | 0;
   }
   $0 = $0 + $4 | 0;
   $3 = $3 - $4 | 0;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 ? 1 : 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, $1);
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($0, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function vsnprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 160 | 0;
 global$0 = $4;
 memcpy($4 + 8 | 0, 12656, 144);
 label$1 : {
  label$2 : {
   if ($1 + -1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$2;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   HEAP32[$4 + 52 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $0;
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $0 + $1 | 0;
   HEAP32[$4 + 36 >> 2] = $0;
   HEAP32[$4 + 24 >> 2] = $0;
   $0 = vfprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$1;
   }
   $1 = HEAP32[$4 + 28 >> 2];
   HEAP8[$1 - (($1 | 0) == HEAP32[$4 + 24 >> 2]) | 0] = 0;
   break label$1;
  }
  HEAP32[8356] = 61;
  $0 = -1;
 }
 global$0 = $4 + 160 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1);
}
function arMatrixTrans($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = -1;
 label$1 : {
  $4 = HEAP32[$0 + 4 >> 2];
  if (($4 | 0) != HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  $7 = HEAP32[$0 + 8 >> 2];
  if (($7 | 0) != HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  $6 = 0;
  while (1) {
   if (($5 | 0) >= ($4 | 0)) {
    break label$1;
   }
   $3 = HEAP32[$1 >> 2] + ($5 << 3) | 0;
   $0 = 0;
   while (1) {
    if (($0 | 0) < ($7 | 0)) {
     $8 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2 + 4 >> 2] = $8;
     $0 = $0 + 1 | 0;
     $2 = $2 + 8 | 0;
     $3 = ($4 << 3) + $3 | 0;
     continue;
    }
    break;
   }
   $5 = $5 + 1 | 0;
   continue;
  }
 }
 return $6;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 61, 1, 1, 1);
 HEAP32[$0 >> 2] = 20648;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 32);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $0 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($3, $2);
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 45, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24440;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 66, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23872;
 return $0;
}
function __fseeko_unlocked($0, $1) {
 var $2 = 0, $3 = 0;
 if (($1 | 0) == 1) {
  $2 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
  $3 = 0 - $2 | 0;
  $2 = 0 - (($2 >> 31) + (0 < $2 >>> 0) | 0) | 0;
 }
 label$2 : {
  if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   if (!HEAP32[$0 + 20 >> 2]) {
    break label$2;
   }
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $2 = FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $3, $2, $1) >>> 0 >= 0 ? 0 : 1;
  $1 = i64toi32_i32$HIGH_BITS;
  if (($1 | 0) < 0 ? 1 : ($1 | 0) <= 0 ? $2 : 0) {
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__StringView___28_28anonymous_20namespace_29__StringView__29($0 + 368 | 0, $1);
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $0 = unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2);
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 8, HEAPU8[$1 + 5 | 0], HEAPU8[$1 + 6 | 0], HEAPU8[$1 + 7 | 0]);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25456;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 6, 1, 1, 1);
 HEAP32[$0 >> 2] = 28632;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$0 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 20, 1, 1, 1);
 HEAP32[$0 >> 2] = 19624;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 55, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22204;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 368 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 56, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23988;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 25, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28264;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 23288);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$0 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeOrString_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 14, 0, 0, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28380;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function cycle($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = 8;
 $4 = global$0 - 256 | 0;
 global$0 = $4;
 label$1 : {
  if (($1 | 0) < 2) {
   break label$1;
  }
  $7 = ($1 << 2) + $0 | 0;
  HEAP32[$7 >> 2] = $4;
  $2 = $4;
  while (1) {
   $5 = $3 >>> 0 < 256 ? $3 : 256;
   memcpy($2, HEAP32[$0 >> 2], $5);
   $2 = 0;
   while (1) {
    $6 = ($2 << 2) + $0 | 0;
    $2 = $2 + 1 | 0;
    memcpy(HEAP32[$6 >> 2], HEAP32[($2 << 2) + $0 >> 2], $5);
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + $5;
    if (($1 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $3 = $3 - $5 | 0;
   if (!$3) {
    break label$1;
   }
   $2 = HEAP32[$7 >> 2];
   continue;
  }
 }
 global$0 = $4 + 256 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 20172);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 53, 1, 1, 1);
 HEAP32[$0 >> 2] = 21892;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 26696);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 2, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27924;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 23408);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 50, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22100;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    break label$1;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   $1 = $2;
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$2 + 1 | 0];
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$0 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 } else {
  $0 = 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 5, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28976;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 60, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 21224;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function scalbn($0, $1) {
 var $2 = 0;
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   $2 = $1 + -1023 | 0;
   if (($2 | 0) < 1024) {
    $1 = $2;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $2 = $1 + 1022 | 0;
  if (($2 | 0) > -1023) {
   $1 = $2;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 24888);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function icpGetU_from_X_by_MatX2U($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = HEAPF64[$2 >> 3];
 $4 = HEAPF64[$2 + 8 >> 3];
 $5 = HEAPF64[$2 + 16 >> 3];
 $6 = HEAPF64[$1 + 88 >> 3] + ($3 * HEAPF64[$1 + 64 >> 3] + $4 * HEAPF64[$1 + 72 >> 3] + $5 * HEAPF64[$1 + 80 >> 3]);
 if ($6 != 0) {
  $7 = HEAPF64[$1 + 56 >> 3];
  $8 = HEAPF64[$1 + 48 >> 3];
  $9 = HEAPF64[$1 + 40 >> 3];
  $10 = HEAPF64[$1 + 32 >> 3];
  HEAPF64[$0 >> 3] = (HEAPF64[$1 + 24 >> 3] + ($3 * HEAPF64[$1 >> 3] + $4 * HEAPF64[$1 + 8 >> 3] + $5 * HEAPF64[$1 + 16 >> 3])) / $6;
  HEAPF64[$0 + 8 >> 3] = ($7 + ($3 * $10 + $4 * $9 + $5 * $8)) / $6;
  $0 = 0;
 } else {
  $0 = -1;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 10, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27816;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
 return $4 | 0;
}
function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (($1 | 0) == 1 & $0 >>> 0 < 0 | $1 >>> 0 < 1) {
   $3 = $0;
   break label$1;
  }
  while (1) {
   $2 = $2 + -1 | 0;
   $3 = __wasm_i64_udiv($0, $1, 10);
   $4 = i64toi32_i32$HIGH_BITS;
   $5 = $4;
   $4 = __wasm_i64_mul($3, $4, 10, 0);
   HEAP8[$2 | 0] = $0 - $4 | 48;
   $4 = ($1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1 >>> 0 > 9;
   $0 = $3;
   $1 = $5;
   if ($4) {
    continue;
   }
   break;
  }
 }
 if ($3) {
  while (1) {
   $2 = $2 + -1 | 0;
   $0 = ($3 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $3 - Math_imul($0, 10) | 48;
   $1 = $3 >>> 0 > 9;
   $3 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function arPattDeleteHandle($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 if (!$0) {
  return;
 }
 while (1) {
  if (($1 | 0) < HEAP32[$0 + 4 >> 2]) {
   $3 = $1 << 2;
   if (HEAP32[$3 + HEAP32[$0 + 8 >> 2] >> 2]) {
    arPattFree($0, $1);
   }
   $2 = 0;
   while (1) {
    if (($2 | 0) != 4) {
     $4 = $2 + $3 << 2;
     dlfree(HEAP32[$4 + HEAP32[$0 + 12 >> 2] >> 2]);
     dlfree(HEAP32[HEAP32[$0 + 20 >> 2] + $4 >> 2]);
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   }
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 dlfree(HEAP32[$0 + 12 >> 2]);
 dlfree(HEAP32[$0 + 20 >> 2]);
 dlfree(HEAP32[$0 + 8 >> 2]);
 dlfree(HEAP32[$0 + 16 >> 2]);
 dlfree(HEAP32[$0 + 24 >> 2]);
 dlfree($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 44, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24096;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 12, HEAPU8[$1 + 5 | 0], 1, 1);
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28868;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 1, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27100;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 3, HEAPU8[$1 + 5 | 0], HEAPU8[$1 + 6 | 0], HEAPU8[$1 + 7 | 0]);
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 >> 2] = 28036;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
 return $4 | 0;
}
function atoi($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 while (1) {
  $1 = $0;
  $0 = $1 + 1 | 0;
  if (isspace(HEAP8[$1 | 0])) {
   continue;
  }
  break;
 }
 $2 = HEAP8[$1 | 0];
 $4 = $2 + -43 | 0;
 label$2 : {
  if ($4 >>> 0 > 2) {
   break label$2;
  }
  label$4 : {
   switch ($4 - 1 | 0) {
   case 1:
    $5 = 1;
    break;
   case 0:
    break label$2;
   default:
    break label$4;
   }
  }
  $2 = HEAP8[$0 | 0];
  $1 = $0;
  $6 = $5;
 }
 if (isdigit($2)) {
  while (1) {
   $3 = (Math_imul($3, 10) - HEAP8[$1 | 0] | 0) + 48 | 0;
   $0 = HEAP8[$1 + 1 | 0];
   $1 = $1 + 1 | 0;
   if (isdigit($0)) {
    continue;
   }
   break;
  }
 }
 return $6 ? $3 : 0 - $3 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 65, 1, 1, 1);
 HEAP8[$0 + 16 | 0] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23764;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
 return $4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 13, HEAPU8[$2 + 5 | 0], 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28488;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 global$0 = $2 + 16 | 0;
}
function __floatsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $6 = $0;
 $7 = $0;
 label$1 : {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  $2 = $1 >> 31;
  $4 = $2 + $1 ^ $2;
  $2 = Math_clz32($4);
  __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
  $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
  $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $2 = $2 + 1 | 0;
  }
  $5 = $1 & -2147483648 | $2;
  $2 = HEAP32[$3 + 4 >> 2];
  $1 = HEAP32[$3 >> 2];
 }
 HEAP32[$7 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $5;
 global$0 = $3 + 16 | 0;
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 21, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 19820;
 return $0;
}
function __emscripten_environ_constructor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0)) {
   break label$1;
  }
  $1 = dlmalloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
  HEAP32[8375] = $1;
  if (!$1) {
   break label$1;
  }
  label$2 : {
   $1 = dlmalloc(HEAP32[$0 + 8 >> 2]);
   if ($1) {
    $2 = HEAP32[8375];
    if ($2) {
     break label$2;
    }
   }
   HEAP32[8375] = 0;
   break label$1;
  }
  HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $2 >> 2] = 0;
  if (!__wasi_environ_get(HEAP32[8375], $1 | 0)) {
   break label$1;
  }
  HEAP32[8375] = 0;
 }
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 43, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23644;
 return $0;
}
function __ftello_unlocked($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = HEAP32[$0 + 40 >> 2];
 $2 = FUNCTION_TABLE[$1]($0, 0, 0, HEAPU8[$0 | 0] & 128 ? HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2] ? 2 : 1 : 1) | 0;
 $1 = i64toi32_i32$HIGH_BITS;
 $3 = $1;
 if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? $2 >>> 0 < 0 ? 0 : 1 : 0) {
  $4 = HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 28 >> 2] | 0;
  $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
  $5 = $2 - $0 | 0;
  $1 = $4 + $5 | 0;
  $0 = ($3 - (($0 >> 31) + ($2 >>> 0 < $0 >>> 0) | 0) | 0) + ($4 >> 31) | 0;
  $2 = $1;
  $3 = $1 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0;
 }
 i64toi32_i32$HIGH_BITS = $3;
 return $2;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___max_size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0);
 HEAP32[$1 + 12 >> 2] = 536870911;
 HEAP32[$1 + 8 >> 2] = 2147483647;
 $0 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($1 + 12 | 0, $1 + 8 | 0) >> 2];
 global$0 = $1 + 16 | 0;
 return $0;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20____vector_28_29($0) {
 var $1 = 0;
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____annotate_delete_28_29_20const($0);
 if (HEAP32[$0 >> 2]) {
  std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____destruct_at_end_28multi_marker__29($0, HEAP32[$0 >> 2]);
  std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0);
  $1 = HEAP32[$0 >> 2];
  std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
  dlfree($1);
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 22, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22472;
 return $0;
}
function std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20__20const__29($0, $1) {
 return std____2__operator___28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__2c_20std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__29($0, $1);
}
function __floatunsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $6 = $0;
 $7 = $0;
 label$1 : {
  if (!$1) {
   $1 = 0;
   $4 = 0;
   break label$1;
  }
  $3 = $1;
  $1 = Math_clz32($1);
  __ashlti3($2, $3, 0, 0, 0, $1 + 81 | 0);
  $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + (16414 - $1 << 16) | 0;
  $3 = 0 + HEAP32[$2 + 8 >> 2] | 0;
  if ($3 >>> 0 < $5 >>> 0) {
   $1 = $1 + 1 | 0;
  }
  $5 = $3;
  $3 = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$2 >> 2];
 }
 HEAP32[$7 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $3;
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 32, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26472;
 return $0;
}
function arUtilMatMul($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 while (1) {
  if (($5 | 0) != 3) {
   $6 = $5 << 5;
   $4 = $6 + $0 | 0;
   $9 = $4;
   $3 = 0;
   while (1) {
    if (($3 | 0) != 4) {
     $8 = $3 << 3;
     $7 = $8 + $1 | 0;
     HEAPF64[$8 + ($2 + $6 | 0) >> 3] = HEAPF64[$4 >> 3] * HEAPF64[$7 >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[$7 + 32 >> 3] + HEAPF64[$9 + 16 >> 3] * HEAPF64[$7 - -64 >> 3];
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   }
   $3 = $2 + $6 | 0;
   HEAPF64[$3 + 24 >> 3] = HEAPF64[$4 + 24 >> 3] + HEAPF64[$3 + 24 >> 3];
   $5 = $5 + 1 | 0;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($2, $1);
 }
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 123);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 12 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 125);
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 20348);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$3 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($3, $2);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, 26460);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function fopen($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 label$1 : {
  label$2 : {
   if (!strchr(12800, HEAP8[$1 | 0])) {
    HEAP32[8356] = 28;
    break label$2;
   }
   $2 = __fmodeflags($1);
   HEAP32[$3 + 8 >> 2] = 438;
   HEAP32[$3 >> 2] = $0;
   HEAP32[$3 + 4 >> 2] = $2 | 32768;
   $0 = 0;
   $2 = __syscall5(5, $3 | 0) | 0;
   if ($2 >>> 0 >= 4294963201) {
    HEAP32[8356] = 0 - $2;
    $2 = -1;
   }
   if (($2 | 0) < 0) {
    break label$1;
   }
   $0 = __fdopen($2, $1);
   if ($0) {
    break label$1;
   }
   __wasi_fd_close($2 | 0) | 0;
  }
  $0 = 0;
 }
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 37, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25348;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 23, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 20076;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 24, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25952;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $0 = HEAP32[$0 + 8 >> 2];
 if (HEAPU8[$0 + 4 | 0] == 7) {
  $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($1 + 8 | 0, $0);
  $2 = $28anonymous_20namespace_29__operator___28_28anonymous_20namespace_29__StringView_20const__2c_20_28anonymous_20namespace_29__StringView_20const__29($1 + 8 | 0, $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($1, 28848));
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function fputc($0) {
 var $1 = 0;
 if (HEAP32[$0 + 76 >> 2] < 0) {
  label$2 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$2;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$2;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   return;
  }
  __overflow($0);
  return;
 }
 label$3 : {
  label$4 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$4;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$4;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   break label$3;
  }
  __overflow($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 52, 1, 1, 1);
 HEAP8[$0 + 13 | 0] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22316;
 return $0;
}
function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $2 = $1;
   if ($0 == 0) {
    $1 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $1 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$2 >> 2] = $1;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 + -1022;
  $1 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}
function CENTER($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = -1;
 label$1 : {
  $5 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) != HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $7 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$0 >> 2];
  $4 = 0;
  while (1) {
   if (($6 | 0) >= ($7 | 0)) {
    break label$1;
   }
   $2 = HEAP32[$1 >> 2];
   $3 = 0;
   while (1) {
    if (($3 | 0) < ($5 | 0)) {
     HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] - HEAPF64[$2 >> 3];
     $3 = $3 + 1 | 0;
     $0 = $0 + 8 | 0;
     $2 = $2 + 8 | 0;
     continue;
    }
    break;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 return $4;
}
function get_buff($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 while (1) {
  if (fgets($0, $1)) {
   $2 = strlen($0);
   while (1) {
    label$4 : {
     if (!$2) {
      break label$4;
     }
     $2 = $2 + -1 | 0;
     $3 = $2 + $0 | 0;
     $4 = HEAPU8[$3 | 0] + -10 | 0;
     if ($4 >>> 0 > 3) {
      break label$4;
     }
     label$5 : {
      switch ($4 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$5;
      }
     }
     HEAP8[$3 | 0] = 0;
     continue;
    }
    break;
   }
   $2 = HEAPU8[$0 | 0];
   if (!$2 | ($2 | 0) == 35) {
    continue;
   }
  }
  break;
 }
}
function $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1);
 if ($2) {
  $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, $2);
  memmove(HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 >> 2], $2);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $2;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$0 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1 + 4 | 0, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < HEAPU32[$0 + 4 >> 2]) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 7, 1, 1, 1);
 HEAP32[$0 >> 2] = 19976;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4096 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $1 = $1 + 15 & -16;
 $4 = $3 + $1 | 0;
 if ($4 >>> 0 >= 4088) {
  if ($1 >>> 0 >= 4089) {
   return $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1);
  }
  $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0);
  $2 = HEAP32[$0 + 4096 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $1 + $3 | 0;
 }
 HEAP32[$2 + 4 >> 2] = $4;
 return ($2 + $3 | 0) + 8 | 0;
}
function $28anonymous_20namespace_29__StringView__dropFront_28unsigned_20long_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = $0;
 $4 = HEAP32[$1 >> 2];
 $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1);
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($3, $4 + ($0 >>> 0 > $2 >>> 0 ? $2 : $0 + -1 | 0) | 0, HEAP32[$1 + 4 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 31, 2, 2, 2);
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 20188;
 return $0;
}
function arController__arController_28_29($0) {
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 208 >> 2] = 0;
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 240 >> 2] = 0;
 HEAP32[$0 + 244 >> 2] = 1083129856;
 HEAP32[$0 + 232 >> 2] = -350469331;
 HEAP32[$0 + 236 >> 2] = 1058682594;
 HEAP32[$0 + 212 >> 2] = 0;
 HEAP32[$0 + 216 >> 2] = 0;
 HEAP32[$0 + 220 >> 2] = 0;
 HEAP32[$0 + 224 >> 2] = 0;
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____vector_base_28_29($0 + 248 | 0);
 HEAP32[$0 + 392 >> 2] = 2;
 HEAP32[$0 + 260 >> 2] = 0;
}
function std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_multi_marker__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_multi_marker__20_____construct_backward_multi_marker__28std____2__allocator_multi_marker___2c_20bool__2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 $0 = $2 - $1 | 0;
 $2 = HEAP32[$3 >> 2] - $0 | 0;
 HEAP32[$3 >> 2] = $2;
 if (($0 | 0) >= 1) {
  memcpy($2, $1, $0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $0 = $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($2 + 8 | 0, HEAPU8[$0 + 8 | 0] ? 20852 : 20857);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
  if (HEAP32[$0 + 20 >> 2]) {
   break label$1;
  }
  return -1;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1, $2) {
 var $3 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 while (1) {
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2) | 0;
  if (HEAPU8[$3 + 4 | 0] == 12) {
   $1 = HEAP32[$3 + 8 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   $3 = $3 + 12 | 0;
   HEAP32[$0 >> 2] = HEAP32[(HEAP32[$3 >> 2] < HEAP32[$0 >> 2] ? $3 : $0) >> 2];
   continue;
  }
  break;
 }
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20_____bucket_list_deallocator_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20true__28int___29($0, $1 + 12 | 0);
 global$0 = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 29, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 21656;
 return $0;
}
function __strerror_l($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   while (1) {
    if (HEAPU8[$1 + 13360 | 0] != ($0 | 0)) {
     $2 = 87;
     $1 = $1 + 1 | 0;
     if (($1 | 0) != 87) {
      continue;
     }
     break label$2;
    }
    break;
   }
   $2 = $1;
   if ($1) {
    break label$2;
   }
   $0 = 13456;
   break label$1;
  }
  $1 = 13456;
  while (1) {
   $3 = HEAPU8[$1 | 0];
   $0 = $1 + 1 | 0;
   $1 = $0;
   if ($3) {
    continue;
   }
   $1 = $0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
 }
}
function __overflow($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = 10;
 $2 = HEAP32[$0 + 16 >> 2];
 label$1 : {
  if (!$2) {
   if (__towrite($0)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 16 >> 2];
  }
  $3 = HEAP32[$0 + 20 >> 2];
  if (!(HEAP8[$0 + 75 | 0] == 10 | $3 >>> 0 >= $2 >>> 0)) {
   HEAP32[$0 + 20 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 10;
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
 }
 global$0 = $1 + 16 | 0;
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$0 + 16 >> 2];
 if (!$3) {
  HEAP32[$0 + 36 >> 2] = 1;
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = $1;
  return;
 }
 label$2 : {
  if (($1 | 0) == ($3 | 0)) {
   if (HEAP32[$0 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$0 + 24 >> 2] = $2;
   return;
  }
  HEAP8[$0 + 54 | 0] = 1;
  HEAP32[$0 + 24 >> 2] = 2;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
 }
}
function arVecHousehold($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  $1 = Math_sqrt(arVecInnerproduct($0, $0));
  if ($1 == 0) {
   break label$1;
  }
  $3 = HEAP32[$0 >> 2];
  $2 = HEAPF64[$3 >> 3];
  $1 = $2 < 0 ? -$1 : $1;
  $2 = $2 + $1;
  HEAPF64[$3 >> 3] = $2;
  $2 = 1 / Math_sqrt($1 * $2);
  $5 = HEAP32[$0 + 4 >> 2];
  $0 = 0;
  while (1) {
   if (($0 | 0) >= ($5 | 0)) {
    break label$1;
   }
   $4 = ($0 << 3) + $3 | 0;
   HEAPF64[$4 >> 3] = $2 * HEAPF64[$4 >> 3];
   $0 = $0 + 1 | 0;
   continue;
  }
 }
 return -$1;
}
function bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = 1;
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAPU8[$0 | 0] == HEAPU8[$2 | 0]) {
     break label$2;
    }
    $4 = 0;
   }
   global$0 = $3 + 16 | 0;
   return $4;
  }
  $2 = $2 + 1 | 0;
  $0 = $0 + 1 | 0;
  continue;
 }
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29($0, $1, $2) {
 return unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__OutputStream__operator___28_28anonymous_20namespace_29__StringView_29($1, $2);
 global$0 = $2 + 16 | 0;
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $6 = $0;
 $7 = $1;
 $4 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $1 = $5 >> 8;
  $4 = $1;
  if (!($5 & 1)) {
   break label$1;
  }
  $4 = HEAP32[$1 + HEAP32[$2 >> 2] >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $4 + $2 | 0, $5 & 2 ? $3 : 2);
}
function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($1, $0);
 global$0 = $2 + 16 | 0;
 return $3 ? $1 : $0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1);
 global$0 = $2 + 16 | 0;
 return $3 ? $1 : $0;
}
function arPattLoad($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = cat($1);
 label$1 : {
  if (!$3) {
   HEAP32[$2 + 16 >> 2] = $1;
   arLog(3, 3182, $2 + 16 | 0);
   wasm2js_i32$0 = $2, wasm2js_i32$1 = __strerror_l(HEAP32[8356]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   HEAP32[$2 >> 2] = 3935;
   arLog(3, 3638, $2);
   $1 = -1;
   break label$1;
  }
  $1 = arPattLoadFromBuffer($0, $3);
  dlfree($3);
 }
 global$0 = $2 + 32 | 0;
 return $1;
}
function std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = $2;
}
function fclose($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = HEAP32[$0 >> 2] & 1;
 if (!$4) {
  $1 = __ofl_lock();
  $2 = HEAP32[$0 + 52 >> 2];
  if ($2) {
   HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
  }
  $3 = HEAP32[$0 + 56 >> 2];
  if ($3) {
   HEAP32[$3 + 52 >> 2] = $2;
  }
  if (HEAP32[$1 >> 2] == ($0 | 0)) {
   HEAP32[$1 >> 2] = $3;
  }
  __unlock(32360);
 }
 fflush($0);
 FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  dlfree($1);
 }
 if (!$4) {
  dlfree($0);
 }
}
function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (!__wasi_syscall_ret(legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0)) {
   $1 = HEAP32[$4 + 12 >> 2];
   $0 = HEAP32[$4 + 8 >> 2];
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = -1;
  HEAP32[$4 + 12 >> 2] = -1;
  $1 = -1;
  $0 = -1;
 }
 global$0 = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $0 | 0;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $2 >>> 16;
 $5 = $0 >>> 16;
 $9 = Math_imul($4, $5);
 $6 = $2 & 65535;
 $7 = $0 & 65535;
 $8 = Math_imul($6, $7);
 $5 = ($8 >>> 16) + Math_imul($5, $6) | 0;
 $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
 $0 = (((Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) | 0) + ($5 >>> 16) | 0) + ($4 >>> 16) | 0;
 $1 = $8 & 65535 | $4 << 16;
 i64toi32_i32$HIGH_BITS = $0;
 return $1;
}
function matrixCopy($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : while (1) {
  label$2 : {
   $2 = 0;
   if (($4 | 0) == 3) {
    break label$2;
   }
   while (1) if (($2 | 0) == 4) {
    $4 = $4 + 1 | 0;
    continue label$1;
   } else {
    $1 = $2 << 3;
    $3 = $4 << 5;
    $5 = $1 + ($3 + 32256 | 0) | 0;
    $1 = ($0 + $3 | 0) + $1 | 0;
    $3 = HEAP32[$1 + 4 >> 2];
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$5 + 4 >> 2] = $3;
    $2 = $2 + 1 | 0;
    continue;
   }
  }
  break;
 }
}
function __toread($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
 if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 4) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 return $1 << 27 >> 31;
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool___pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____2c_20bool__2c_20false__28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20bool__29($0, $1, $2) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP8[$0 + 4 | 0] = HEAPU8[$2 | 0];
}
function loadMultiMarker_28char_20const__2c_20ARHandle__2c_20ARPattHandle___2c_20ARMultiMarkerInfoT___29($0, $1, $2, $3) {
 $0 = arMultiReadConfigFile($0, HEAP32[$2 >> 2]);
 HEAP32[$3 >> 2] = $0;
 if (!$0) {
  arLog(3, 12247, 0);
  arPattDeleteHandle(HEAP32[$2 >> 2]);
  return 0;
 }
 $0 = HEAP32[$0 + 108 >> 2];
 if ($0 >>> 0 <= 1) {
  if ($0 - 1) {
   arSetPatternDetectionMode($1, 0);
   return 1;
  }
  arSetPatternDetectionMode($1, 2);
  return 1;
 }
 arSetPatternDetectionMode($1, 3);
 return 1;
}
function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ($0) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return __fflush_unlocked($0) | 0;
  }
  return __fflush_unlocked($0) | 0;
 }
 if (HEAP32[7940]) {
  $1 = fflush(HEAP32[7940]);
 }
 $0 = HEAP32[__ofl_lock() >> 2];
 if ($0) {
  while (1) {
   if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
    $1 = __fflush_unlocked($0) | $1;
   }
   $0 = HEAP32[$0 + 56 >> 2];
   if ($0) {
    continue;
   }
   break;
  }
 }
 __unlock(32360);
 return $1 | 0;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = FUNCTION_TABLE[$0]($1, $2, $3) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 global$0 = $4 + 16 | 0;
 return HEAP32[$4 + 12 >> 2];
}
function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -1 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
   $0 = $0 + 1 | 0;
   continue;
  }
 }
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20arController__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arController___29($0) {
 arController___arController_28_29($0 + 8 | 0);
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___hash_function_28_29($0) {
 return $0 + 12 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arController__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arController__20__20___key_eq_28_29($0) {
 return $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 91);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__OutputStream__operator___28char_29($1, 93);
}
function pad($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 256 | 0;
 global$0 = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $4 = $2 - $3 | 0;
  $6 = $4 >>> 0 < 256;
  memset($5, $1, $6 ? $4 : 256);
  $1 = $0;
  $7 = $5;
  if (!$6) {
   $2 = $2 - $3 | 0;
   while (1) {
    out($0, $5, 256);
    $4 = $4 + -256 | 0;
    if ($4 >>> 0 > 255) {
     continue;
    }
    break;
   }
   $4 = $2 & 255;
  }
  out($1, $7, $4);
 }
 global$0 = $5 + 256 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, $1, $2, $3, $4) {
 HEAP8[$0 + 7 | 0] = $4;
 HEAP8[$0 + 6 | 0] = $3;
 HEAP8[$0 + 5 | 0] = $2;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP32[$0 >> 2] = 19776;
}
function arSetDebugMode($0, $1) {
 if (!$0) {
  return;
 }
 label$2 : {
  if (HEAP32[$0 >> 2] == ($1 | 0)) {
   break label$2;
  }
  HEAP32[$0 >> 2] = $1;
  if (!$1) {
   $0 = $0 + 4834148 | 0;
   dlfree(HEAP32[$0 >> 2]);
   HEAP32[$0 >> 2] = 0;
   break label$2;
  }
  $1 = $0 + 4834148 | 0;
  $0 = dlmalloc(Math_imul(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 36 >> 2]));
  HEAP32[$1 >> 2] = $0;
  if ($0) {
   break label$2;
  }
  arLog(3, 1425, 0);
  exit(1);
  abort();
 }
}
function store_int($0, $1, $2, $3) {
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $1 = $1 + 2 | 0;
  if ($1 >>> 0 > 5) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 1 | 0) {
   default:
    HEAP8[$0 | 0] = $2;
    return;
   case 0:
    HEAP16[$0 >> 1] = $2;
    return;
   case 1:
   case 2:
    HEAP32[$0 >> 2] = $2;
    return;
   case 3:
    break label$1;
   case 4:
    break label$2;
   }
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 $2 = 0;
 label$1 : {
  if (($1 | 0) == HEAP32[$0 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$0 >> 2] = $1 + 1;
  $2 = HEAPU8[$1 | 0];
 }
 return $2 << 24 >> 24;
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
}
function cat($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (!$0) {
   HEAP32[8356] = 28;
   break label$1;
  }
  $0 = fopen($0, 2256);
  if (!$0) {
   break label$1;
  }
  fseek($0, 2);
  $2 = ftell($0);
  fseek($0, 0);
  $1 = dlmalloc($2 + 1 | 0);
  if (!$1) {
   fclose($0);
   HEAP32[8356] = 48;
   return 0;
  }
  if (!fread($1, $2, $0)) {
   dlfree($1);
   fclose($0);
   break label$1;
  }
  HEAP8[$1 + $2 | 0] = 0;
  fclose($0);
  return $1;
 }
 return 0;
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
 }
}
function $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 4 >> 2] + $1 | 0;
  $2 = HEAP32[$0 + 8 >> 2];
  if ($1 >>> 0 < $2 >>> 0) {
   break label$1;
  }
  $2 = $2 << 1;
  $1 = $2 >>> 0 < $1 >>> 0 ? $1 : $2;
  HEAP32[$0 + 8 >> 2] = $1;
  $2 = $0;
  $0 = dlrealloc(HEAP32[$0 >> 2], $1);
  HEAP32[$2 >> 2] = $0;
  if ($0) {
   break label$1;
  }
  std__terminate_28_29();
  abort();
 }
}
function void_20emscripten__function_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 3, 12388, 12536, 46, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function __shlim($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 112 >> 2] = $1;
 HEAP32[$0 + 116 >> 2] = $2;
 $5 = HEAP32[$0 + 8 >> 2];
 $6 = HEAP32[$0 + 4 >> 2];
 $3 = $5 - $6 | 0;
 $4 = $3 >> 31;
 HEAP32[$0 + 120 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = $4;
 if (!(!($1 | $2) | (($4 | 0) < ($2 | 0) ? 1 : ($4 | 0) <= ($2 | 0) ? $3 >>> 0 > $1 >>> 0 ? 0 : 1 : 0))) {
  HEAP32[$0 + 104 >> 2] = $1 + $6;
  return;
 }
 HEAP32[$0 + 104 >> 2] = $5;
}
function arImageProcLumaHist($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = -1;
 label$1 : {
  if (!$0 | !$1) {
   break label$1;
  }
  $2 = 0;
  memset($0 + 12 | 0, 0, 1024);
  $4 = Math_imul(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]) + $1 | 0;
  while (1) {
   if ($1 >>> 0 >= $4 >>> 0) {
    break label$1;
   }
   $3 = (HEAPU8[$1 | 0] << 2) + $0 | 0;
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   $1 = $1 + 1 | 0;
   continue;
  }
 }
 return $2;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $7 = $6 >> 8;
 $0 = HEAP32[$0 >> 2];
 $8 = $0;
 if ($6 & 1) {
  $7 = HEAP32[HEAP32[$3 >> 2] + $7 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($8, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20ARParam__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20___2c_20std____2__pair_int_20const_2c_20ARParam___29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function dlrealloc($0, $1) {
 var $2 = 0, $3 = 0;
 if (!$0) {
  return dlmalloc($1);
 }
 if ($1 >>> 0 >= 4294967232) {
  HEAP32[8356] = 48;
  return 0;
 }
 $2 = try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
 if ($2) {
  return $2 + 8 | 0;
 }
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 $3 = HEAP32[$0 + -4 >> 2];
 $3 = ($3 & -8) - ($3 & 3 ? 4 : 8) | 0;
 memcpy($2, $0, $3 >>> 0 < $1 >>> 0 ? $3 : $1);
 dlfree($0);
 return $2;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[$0]($1, $2) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 global$0 = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 if ($2 - $0 >>> 0 > $1 >>> 0) {
  $0 = HEAP8[$0 + $1 | 0];
 } else {
  $0 = 0;
 }
 return $0 << 24 >> 24;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 >> 2];
 if (!(($2 | 0) == HEAP32[$0 + 4 >> 2] | HEAPU8[$2 | 0] != ($1 & 255))) {
  HEAP32[$0 >> 2] = $2 + 1;
  $3 = 1;
 }
 return $3;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____annotate_delete_28_29_20const($0) {
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0);
 std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0);
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__enable_if__28is_move_constructible_multi_marker____value_29_20___20_28is_move_assignable_multi_marker____value_29_2c_20void___type_20std____2__swap_multi_marker___28multi_marker___2c_20multi_marker___29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 + 12 >> 2];
 global$0 = $2 + 16 | 0;
}
function void_20emscripten__function_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 _embind_register_function(10097, 2, 12556, 12384, 48, 10);
 global$0 = $0 + 16 | 0;
}
function deleteHandle($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 216 >> 2];
 if ($1) {
  if (!(!$1 | !HEAP32[$1 + 7062384 >> 2])) {
   HEAP32[$1 + 7062384 >> 2] = 0;
  }
  arDeleteHandle(HEAP32[$0 + 216 >> 2]);
  HEAP32[$0 + 216 >> 2] = 0;
 }
 if (HEAP32[$0 + 228 >> 2]) {
  ar3DDeleteHandle($0 + 228 | 0);
  HEAP32[$0 + 228 >> 2] = 0;
 }
 if (HEAP32[$0 + 192 >> 2]) {
  arParamLTFree($0 + 192 | 0);
  HEAP32[$0 + 192 >> 2] = 0;
 }
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = HEAP32[$0 + 4 >> 2];
 $6 = $5 >> 8;
 $0 = HEAP32[$0 >> 2];
 $7 = $0;
 if ($5 & 1) {
  $6 = HEAP32[HEAP32[$2 >> 2] + $6 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($7, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
}
function std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____vector_base_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_elem_multi_marker__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0 + 8 | 0);
 global$0 = $1 + 16 | 0;
}
function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = strlen($1);
 $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = $2;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = memcpy($3 + 12 | 0, $1, $2 + 1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function $28anonymous_20namespace_29__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__OutputStream__2c_20unsigned_20long_29($0, $1, $2) {
 label$1 : {
  if (!$0) {
   $1 = 1024;
   $0 = dlmalloc(1024);
   if ($0) {
    break label$1;
   }
   return 0;
  }
  $1 = HEAP32[$1 >> 2];
 }
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = 0;
 return 1;
}
function $28anonymous_20namespace_29__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
 global$0 = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$2 + 12 >> 2];
 global$0 = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1);
}
function std____2__pair_int_20const_2c_20arController___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 arController__arController_28_29(memset($0 + 8 | 0, 0, 400));
 global$0 = $2 + 16 | 0;
}
function std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____destruct_at_end_28multi_marker__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0);
   $2 = $2 + -8 | 0;
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = $1;
}
function emscripten__internal__Invoker_double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 wasm2js_i32$0 = $2, wasm2js_f64$0 = +FUNCTION_TABLE[$0]($1), HEAPF64[wasm2js_i32$0 + 8 >> 3] = wasm2js_f64$0;
 global$0 = $2 + 16 | 0;
 return +HEAPF64[$2 + 8 >> 3];
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($3 | 0) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function emscripten__internal__Invoker_int_2c_20int___invoke_28int_20_28__29_28int_29_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$0]($1) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 16 | 0;
 global$0 = $9;
 __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
 $3 = HEAP32[$9 >> 2];
 $2 = HEAP32[$9 + 4 >> 2];
 $1 = HEAP32[$9 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2;
 global$0 = $9 + 16 | 0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0) {
 if (!$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
}
function strtok($0) {
 var $1 = 0;
 label$1 : {
  if (!$0) {
   $0 = HEAP32[8358];
   if (!$0) {
    break label$1;
   }
  }
  $1 = strspn($0) + $0 | 0;
  if (!HEAPU8[$1 | 0]) {
   HEAP32[8358] = 0;
   return 0;
  }
  $0 = strcspn($1) + $1 | 0;
  HEAP32[8358] = $0;
  if (HEAPU8[$0 | 0]) {
   HEAP32[8358] = $0 + 1;
   HEAP8[$0 | 0] = 0;
   return $1;
  }
  HEAP32[8358] = 0;
 }
 return $1;
}
function loadMarker_28char_20const__2c_20int__2c_20ARHandle__2c_20ARPattHandle___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = arPattLoad(HEAP32[$2 >> 2], $0);
 HEAP32[$1 >> 2] = $4;
 $1 = 1;
 if (($4 | 0) <= -1) {
  HEAP32[$3 >> 2] = $0;
  $1 = 0;
  arLog(3, 12201, $3);
  arPattDeleteHandle(HEAP32[$2 >> 2]);
 }
 global$0 = $3 + 16 | 0;
 return $1;
}
function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
}
function __towrite($0) {
 var $1 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
 return 0;
}
function arVecInnerproduct($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 if (($3 | 0) == HEAP32[$1 + 4 >> 2]) {
  while (1) {
   if (($2 | 0) < ($3 | 0)) {
    $4 = $2 << 3;
    $5 = $5 + HEAPF64[$4 + HEAP32[$0 >> 2] >> 3] * HEAPF64[HEAP32[$1 >> 2] + $4 >> 3];
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  return $5;
 }
 exit(0);
 abort();
}
function std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20___2c_20bool_29($0, $1, $2) {
 HEAP8[$0 + 4 | 0] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_______20__20___second_28_29($0) {
 return $0 + 4 | 0;
}
function dlcalloc($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = 0;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  $2 = __wasm_i64_mul($0, 0, 4, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  $1 = $2;
  if (($0 | 4) >>> 0 < 65536) {
   break label$2;
  }
  $1 = $3 ? -1 : $2;
 }
 $2 = $1;
 $0 = dlmalloc($2);
 if (!(!$0 | !(HEAPU8[$0 + -4 | 0] & 3))) {
  memset($0, 0, $2);
 }
 return $0;
}
function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = HEAPU8[$0 | 0];
 HEAP8[$0 | 0] = HEAPU8[$1 | 0];
 HEAP8[$1 | 0] = HEAPU8[$2 + 15 | 0];
 global$0 = $2 + 16 | 0;
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20true__28int___29($0, $1) {
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, $1);
}
function arUtilGetDirectoryNameFromPath($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  if (!$0 | !$1) {
   break label$1;
  }
  $2 = __memrchr($1, strlen($1) + 1 | 0);
  if (!$2) {
   HEAP8[$0 | 0] = 0;
   return $0;
  }
  $2 = ($2 + 1 | 0) - $1 | 0;
  if ($2 + 1 >>> 0 > 2048) {
   break label$1;
  }
  $3 = strncpy($0, $1, $2);
  HEAP8[$2 + $3 | 0] = 0;
 }
 return $3;
}
function strncat($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = strlen($0) + $0 | 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if (!$4) {
    break label$1;
   }
   HEAP8[$3 | 0] = $4;
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 HEAP8[$3 | 0] = 0;
 return $0;
}
function shr($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = $0;
 label$1 : {
  if ($1 >>> 0 <= 31) {
   $2 = HEAP32[$0 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = $2;
  $1 = $1 + -32 | 0;
  $3 = 0;
 }
 HEAP32[$4 + 4 >> 2] = $3 >>> $1;
 HEAP32[$0 >> 2] = $3 << 32 - $1 | $2 >>> $1;
}
function $28anonymous_20namespace_29__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP8[$3 + 15 | 0] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAPU8[$1 | 0];
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[HEAP32[$0 >> 2]] = HEAPU8[$3 + 15 | 0];
 global$0 = $3 + 16 | 0;
 return $0;
}
function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $2 = $1;
 $1 = HEAP32[$1 >> 2] + 15 & -16;
 HEAP32[$2 >> 2] = $1 + 16;
 wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0) {
 var $1 = 0;
 while (1) {
  $1 = HEAP32[$0 + 4096 >> 2];
  if ($1) {
   HEAP32[$0 + 4096 >> 2] = HEAP32[$1 >> 2];
   if (($0 | 0) == ($1 | 0)) {
    continue;
   }
   dlfree($1);
   continue;
  }
  break;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 4096 >> 2] = $0;
}
function std____2__pair_int_20const_2c_20ARParam___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 memset($0 + 8 | 0, 0, 184);
 global$0 = $2 + 16 | 0;
}
function std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arController__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arController__20const__2c_20int_20const__29_20const($0, $1, $2) {
 return std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($1, $2);
}
function shl($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = $0;
 label$1 : {
  if ($1 >>> 0 <= 31) {
   $2 = HEAP32[$0 + 4 >> 2];
   $3 = HEAP32[$0 >> 2];
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = 0;
  $1 = $1 + -32 | 0;
  $3 = 0;
 }
 HEAP32[$4 >> 2] = $3 << $1;
 HEAP32[$0 + 4 >> 2] = $2 << $1 | $3 >>> 32 - $1;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void___20__20__20___release_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $1;
}
function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}
function bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 return bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2);
}
function ftell($0) {
 var $1 = 0;
 label$1 : {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   $0 = __ftello_unlocked($0);
   $1 = i64toi32_i32$HIGH_BITS;
   break label$1;
  }
  $0 = __ftello_unlocked($0);
  $1 = i64toi32_i32$HIGH_BITS;
 }
 if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? $0 >>> 0 < 2147483648 ? 0 : 1 : 0) {
  HEAP32[8356] = 61;
  return -1;
 }
 return $0;
}
function emscripten__internal__Invoker_int___invoke_28int_20_28__29_28_29_29($0) {
 $0 = $0 | 0;
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[$0]() | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function arImageProcLumaHistAndCDF($0, $1) {
 var $2 = 0, $3 = 0;
 $1 = arImageProcLumaHist($0, $1);
 if (($1 | 0) >= 0) {
  $1 = 0;
  while (1) {
   $3 = ($2 << 2) + $0 | 0;
   $1 = HEAP32[$3 + 12 >> 2] + $1 | 0;
   HEAP32[$3 + 1036 >> 2] = $1;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 256) {
    continue;
   }
   break;
  }
  $1 = 0;
 }
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1) | 0;
}
function std____2__tuple_int_20const___20std____2__forward_as_tuple_int_20const___28int_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false_____tuple_leaf_int_20const__2c_20void__28int_20const__29($1 + 8 | 0, $0);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $1 = dlmalloc($1 + 8 | 0);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $0 = HEAP32[$0 + 4096 >> 2];
 $2 = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $1 + 8 | 0;
}
function __string_read($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 84 >> 2];
 $3 = $2 + 256 | 0;
 $5 = memchr($4, 0, $3);
 $3 = $5 ? $5 - $4 | 0 : $3;
 $2 = $3 >>> 0 < $2 >>> 0 ? $3 : $2;
 memcpy($1, $4, $2);
 $1 = $4 + $3 | 0;
 HEAP32[$0 + 84 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2 + $4;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 __embind_register_native_and_builtin_types();
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2__operator___28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__2c_20std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void_____20const__29($0, $1) {
 return HEAP32[$0 >> 2] == HEAP32[$1 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function __fmodeflags($0) {
 var $1 = 0;
 $1 = 2;
 if (!strchr($0, 43)) {
  $1 = HEAPU8[$0 | 0] != 114;
 }
 $1 = strchr($0, 120) ? $1 | 128 : $1;
 $1 = strchr($0, 101) ? $1 | 524288 : $1;
 $0 = HEAPU8[$0 | 0];
 $1 = ($0 | 0) == 114 ? $1 : $1 | 64;
 $1 = ($0 | 0) == 119 ? $1 | 512 : $1;
 return ($0 | 0) == 97 ? $1 | 1024 : $1;
}
function std____2____throw_length_error_28char_20const__29($0) {
 var $1 = 0;
 $1 = __cxa_allocate_exception(8) | 0;
 HEAP32[$1 >> 2] = 29228;
 HEAP32[$1 >> 2] = 29272;
 std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($1 + 4 | 0, $0);
 HEAP32[$1 >> 2] = 29320;
 __cxa_throw($1 | 0, 29352, 55);
 abort();
}
function void_20std____2__allocator_traits_std____2__allocator_multi_marker__20___construct_multi_marker_2c_20multi_marker_20const___28std____2__allocator_multi_marker___2c_20multi_marker__2c_20multi_marker_20const__29($0, $1, $2) {
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 4 >> 2] = $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__OutputStream__29_20const($0 + 8 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0;
}
function __uflow($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = -1;
 label$1 : {
  if (__toread($0)) {
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = HEAPU8[$1 + 15 | 0];
 }
 global$0 = $1 + 16 | 0;
 return $2;
}
function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (isdigit(HEAP8[HEAP32[$0 >> 2]])) {
  while (1) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP8[$1 | 0];
   HEAP32[$0 >> 2] = $1 + 1;
   $2 = (Math_imul($2, 10) + $3 | 0) + -48 | 0;
   if (isdigit(HEAP8[$1 + 1 | 0])) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function sbrk($0) {
 var $1 = 0, $2 = 0;
 $2 = __wasm_memory_size();
 label$1 : {
  $1 = HEAP32[8512];
  $0 = $1 + $0 | 0;
  if ($0 >>> 0 <= $2 << 16 >>> 0) {
   break label$1;
  }
  if (emscripten_resize_heap($0 | 0)) {
   break label$1;
  }
  HEAP32[8356] = 48;
  return -1;
 }
 HEAP32[8512] = $0;
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  $0 = HEAP32[$0 >> 2];
 }
 return $0;
}
function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $0 = $0 ? $0 : 1;
 while (1) {
  label$2 : {
   $1 = dlmalloc($0);
   if ($1) {
    break label$2;
   }
   $2 = HEAP32[8378];
   if (!$2) {
    break label$2;
   }
   FUNCTION_TABLE[$2]();
   continue;
  }
  break;
 }
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 if ($0 >>> 0 >= 11) {
  $1 = $0 + 16 & -16;
  $0 = $1 + -1 | 0;
  $0 = ($0 | 0) == 11 ? $1 : $0;
 } else {
  $0 = 10;
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__StringView_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 >> 2];
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $1 ? $1 : 1;
 HEAP32[$0 >> 2] = $1 ? $2 : $2 + 1 | 0;
 return $0;
}
function vsscanf($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 144 | 0;
 global$0 = $3;
 $3 = memset($3, 0, 144);
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 32 >> 2] = 61;
 HEAP32[$3 + 84 >> 2] = $0;
 $0 = vfscanf($3, $1, $2);
 global$0 = $3 + 144 | 0;
 return $0;
}
function void_20emscripten__function_int_2c_20int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_2c_20int_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 4, 12352, 12368, 44, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 44;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 5 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 7 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
}
function arMatrixAlloc($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = dlmalloc(12);
 if ($2) {
  $3 = dlmalloc(Math_imul($0, $1) << 3);
  HEAP32[$2 >> 2] = $3;
  if (!$3) {
   dlfree($2);
   return 0;
  }
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
 } else {
  $2 = 0;
 }
 return $2;
}
function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30023;
 _embind_register_integer(29676, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
 global$0 = $0 + 16 | 0;
}
function sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = HEAP32[$0 + 20 >> 2];
 $3 = HEAP32[$0 + 16 >> 2] - $4 | 0;
 $3 = $3 >>> 0 > $2 >>> 0 ? $2 : $3;
 memcpy($4, $1, $3);
 HEAP32[$0 + 20 >> 2] = $3 + HEAP32[$0 + 20 >> 2];
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 if (HEAP32[$1 + 16 >> 2] == -1) {
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $0;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 6 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30006;
 _embind_register_integer(29652, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 29991;
 _embind_register_integer(29640, HEAP32[$0 + 12 >> 2], 2, 0, 65535);
 global$0 = $0 + 16 | 0;
}
function __fpclassifyl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $5 = $3 & 65535;
 $3 = $3 >>> 16 & 32767;
 label$1 : {
  if (($3 | 0) != 32767) {
   $4 = 4;
   if ($3) {
    break label$1;
   }
   return $0 | $2 | ($1 | $5) ? 3 : 2;
  }
  $4 = !($0 | $2 | ($1 | $5));
 }
 return $4;
}
function arParamLTFree($0) {
 var $1 = 0;
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  if (!$1) {
   break label$1;
  }
  dlfree(HEAP32[$1 + 184 >> 2]);
  dlfree(HEAP32[HEAP32[$0 >> 2] + 188 >> 2]);
  dlfree(HEAP32[$0 >> 2]);
  HEAP32[$0 >> 2] = 0;
 }
}
function $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = dlmalloc(4096);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $2 = HEAP32[$0 + 4096 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 + 4096 >> 2] = $1;
}
function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 29959;
 _embind_register_integer(29616, HEAP32[$0 + 12 >> 2], 1, -128, 127);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(31100, 3, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30403;
 _embind_register_memory_view(31260, 5, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 29971;
 _embind_register_integer(29604, HEAP32[$0 + 12 >> 2], 1, 0, 255);
 global$0 = $0 + 16 | 0;
}
function void_20emscripten__function_void_2c_20int_2c_20double__28char_20const__2c_20void_20_28__29_28int_2c_20double_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 3, 12584, 12596, 51, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(31020, 1, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30028;
 _embind_register_integer(29688, HEAP32[$0 + 12 >> 2], 4, 0, -1);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 140;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(31180, 5, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30010;
 _embind_register_integer(29664, HEAP32[$0 + 12 >> 2], 4, 0, -1);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(30980, 0, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 29985;
 _embind_register_integer(29628, HEAP32[$0 + 12 >> 2], 2, -32768, 32767);
 global$0 = $0 + 16 | 0;
}
function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 29084 >> 2]);
}
function $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP32[$0 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = strlen($1) + $1 | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clearInline_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 44;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
}
function void_20emscripten__function_void_2c_20int_2c_20int__28char_20const__2c_20void_20_28__29_28int_2c_20int_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 3, 12616, 12628, 53, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 29954;
 _embind_register_integer(29592, HEAP32[$0 + 12 >> 2], 1, -128, 127);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__OutputStream__operator___28char_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__OutputStream__grow_28unsigned_20long_29($0, 1);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 1;
 HEAP8[HEAP32[$0 >> 2] + $2 | 0] = $1;
}
function void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 3, 12544, 12536, 47, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30672;
 _embind_register_memory_view(31340, 7, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30641;
 _embind_register_memory_view(31300, 6, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(31060, 2, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30373;
 _embind_register_memory_view(31220, 4, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30129;
 _embind_register_memory_view(30940, 0, HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 29108 >> 2]);
}
function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(31140, 4, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function void_20emscripten__function_void_2c_20int_2c_20float__28char_20const__2c_20void_20_28__29_28int_2c_20float_29_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 _embind_register_function(10560, 3, 12636, 12648, 54, 36);
 global$0 = $0 + 16 | 0;
}
function std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20___capacity_28_29_20const($0) {
 return HEAP32[std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 3;
}
function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
 if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1 | 0))) {
  HEAP32[$0 + 28 >> 2] = $2;
 }
}
function $28anonymous_20namespace_29__OutputStream__back_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $1 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $1 = HEAPU8[(HEAP32[$0 >> 2] + $2 | 0) + -1 | 0];
 }
 return $1 << 24 >> 24;
}
function fmt_x($0, $1, $2, $3) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 13296 | 0] | $3;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function void_20emscripten__function_double_2c_20int__28char_20const__2c_20double_20_28__29_28int_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 2, 12604, 12612, 52, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30048;
 _embind_register_float(29712, HEAP32[$0 + 12 >> 2], 8);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
}
function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 30042;
 _embind_register_float(29700, HEAP32[$0 + 12 >> 2], 4);
 global$0 = $0 + 16 | 0;
}
function arDeleteHandle($0) {
 var $1 = 0;
 if (!$0) {
  return;
 }
 $1 = HEAP32[$0 + 7062408 >> 2];
 if ($1) {
  arImageProcFinal($1);
  HEAP32[$0 + 7062408 >> 2] = 0;
 }
 dlfree(HEAP32[$0 + 4834144 >> 2]);
 dlfree(HEAP32[$0 + 4834148 >> 2]);
 dlfree($0);
}
function void_20emscripten__function_int_2c_20int__28char_20const__2c_20int_20_28__29_28int_29_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 _embind_register_function($0 | 0, 2, 12376, 12384, 45, $1 | 0);
 global$0 = $2 + 16 | 0;
}
function demangling_terminate_handler_28_29() {
 var $0 = 0;
 $0 = global$0 - 1088 | 0;
 global$0 = $0;
 if (HEAP32[8376]) {
  HEAP32[$0 + 32 >> 2] = HEAP32[7979];
  abort_message(19246, $0 + 32 | 0);
  abort();
 }
 abort_message(19284, 0);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2, $0);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___dropBack_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
}
function $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $1;
}
function void_20emscripten__function_void_2c_20int__28char_20const__2c_20void_20_28__29_28int_29_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 _embind_register_function(10338, 2, 12564, 12572, 49, 24);
 global$0 = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2, $0);
}
function std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = $1 + -1 | 0;
 if (!($2 & $1)) {
  return $0 & $2;
 }
 if ($0 >>> 0 >= $1 >>> 0) {
  $0 = ($0 >>> 0) % ($1 >>> 0) | 0;
 }
 return $0;
}
function std__terminate_28_29() {
 var $0 = 0;
 $0 = HEAP32[8376];
 if (!(!$0 | 1)) {
  std____terminate_28void_20_28__29_28_29_29(HEAP32[$0 + 12 >> 2]);
  abort();
 }
 std____terminate_28void_20_28__29_28_29_29(HEAP32[7978]);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__asString_28_29_20const($0, $1) {
 $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
}
function arVecAlloc($0) {
 var $1 = 0, $2 = 0;
 $1 = dlmalloc(8);
 if ($1) {
  $2 = dlmalloc($0 << 3);
  HEAP32[$1 >> 2] = $2;
  if (!$2) {
   dlfree($1);
   return 0;
  }
  HEAP32[$1 + 4 >> 2] = $0;
 } else {
  $1 = 0;
 }
 return $1;
}
function fmt_o($0, $1, $2) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function void_20emscripten__function_int__28char_20const__2c_20int_20_28__29_28_29_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 _embind_register_function(10350, 1, 12576, 12580, 50, 25);
 global$0 = $0 + 16 | 0;
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 setTempRet0(i64toi32_i32$HIGH_BITS | 0);
 return $0 | 0;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20float___invoke_28void_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 FUNCTION_TABLE[$0]($1, $2);
}
function ar3DCreateHandle2($0) {
 var $1 = 0;
 $1 = dlmalloc(4);
 if ($1) {
  $0 = icpCreateHandle($0);
  HEAP32[$1 >> 2] = $0;
  if (!$0) {
   dlfree($1);
   $1 = 0;
  }
  return $1;
 }
 arLog(3, 1408, 0);
 exit(1);
 abort();
}
function __ofl_add($0) {
 var $1 = 0, $2 = 0;
 $1 = __ofl_lock();
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 >> 2];
 if ($2) {
  HEAP32[$2 + 52 >> 2] = $0;
 }
 HEAP32[$1 >> 2] = $0;
 __unlock(32360);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0) {
 return HEAP32[$0 >> 2] == ($0 + 12 | 0);
}
function arLog($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 if (!(!HEAPU8[$1 | 0] | (!$1 | HEAP32[7838] > ($0 | 0)))) {
  HEAP32[$3 + 12 >> 2] = $2;
  arLogv($0, $1, $2);
 }
 global$0 = $3 + 16 | 0;
}
function ar3DDeleteHandle($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 if (!$1) {
  return;
 }
 $2 = HEAP32[$1 >> 2];
 if ($2) {
  dlfree($2);
  HEAP32[$1 >> 2] = 0;
 }
 dlfree(HEAP32[$0 >> 2]);
 HEAP32[$0 >> 2] = 0;
}
function __getTypeName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = __strdup(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
 var $1 = 0;
 $0 = HEAP32[$0 >> 2] + -12 | 0;
 $1 = HEAP32[$0 + 8 >> 2] + -1 | 0;
 HEAP32[$0 + 8 >> 2] = $1;
 if (($1 | 0) <= -1) {
  dlfree($0);
 }
}
function a_ctz_l($0) {
 var $1 = 0, $2 = 0;
 if (!$0) {
  return 32;
 }
 if (!($0 & 1)) {
  while (1) {
   $1 = $1 + 1 | 0;
   $2 = $0 & 2;
   $0 = $0 >>> 1;
   if (!$2) {
    continue;
   }
   break;
  }
 }
 return $1;
}
function arMatrixAllocMul($0, $1) {
 var $2 = 0;
 $2 = arMatrixAlloc(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 if ($2) {
  if ((arMatrixMul($2, $0, $1) | 0) > -1) {
   return $2;
  }
  arMatrixFree($2);
 }
 return 0;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20double___invoke_28void_20_28__29_28int_2c_20double_29_2c_20int_2c_20double_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 FUNCTION_TABLE[$0]($1, $2);
}
function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
}
function arMatrixAllocTrans($0) {
 var $1 = 0;
 $1 = arMatrixAlloc(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
 if ($1) {
  if ((arMatrixTrans($1, $0) | 0) > -1) {
   return $1;
  }
  arMatrixFree($1);
 }
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__NodeOrString_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function arMatrixAllocDup($0) {
 var $1 = 0;
 $1 = arMatrixAlloc(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
 if ($1) {
  if ((arMatrixDup($1, $0) | 0) > -1) {
   return $1;
  }
  arMatrixFree($1);
 }
 return 0;
}
function rewind($0) {
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  __fseeko_unlocked($0, 0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
  return;
 }
 __fseeko_unlocked($0, 0);
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
}
function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($0);
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return ($0 | 0) == ($1 | 0);
 }
 return !strcmp(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
}
function arg_n($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = (($1 << 2) - ((($1 | 0) != 0) << 2) | 0) + $0 | 0;
 HEAP32[$2 + 8 >> 2] = $0 + 4;
 return HEAP32[$0 >> 2];
}
function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1) {
 return HEAPU32[$0 >> 2] < HEAPU32[$1 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function __memrchr($0, $1) {
 var $2 = 0;
 while (1) {
  if (!$1) {
   return 0;
  }
  $1 = $1 + -1 | 0;
  $2 = $1 + $0 | 0;
  if (HEAPU8[$2 | 0] != 47) {
   continue;
  }
  break;
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2];
}
function abort_message($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $2 = HEAP32[3338];
 vfprintf($2, $0, $1);
 fputc($2);
 abort();
 abort();
}
function snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = vsnprintf($0, $1, $2, $3);
 global$0 = $4 + 16 | 0;
 return $0;
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arController__2c_20void______operator___28_29_20const($0) {
 return HEAP32[$0 >> 2] + 8 | 0;
}
function byteSwapDouble($0, $1) {
 var $2 = 0;
 while (1) {
  if (($2 | 0) != 8) {
   HEAP8[$1 + $2 | 0] = HEAPU8[($0 - $2 | 0) + 7 | 0];
   $2 = $2 + 1 | 0;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function byteSwapInt($0, $1) {
 var $2 = 0;
 while (1) {
  if (($2 | 0) != 4) {
   HEAP8[$1 + $2 | 0] = HEAPU8[($0 - $2 | 0) + 3 | 0];
   $2 = $2 + 1 | 0;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($0) {
 if (HEAPU8[$0 + 8 | 0]) {
  HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$0 + 4 >> 2];
 }
}
function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
 void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std__logic_error___logic_error_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 29272;
 std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
 return $0 | 0;
}
function sscanf($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = vsscanf($0, $1, $2);
 global$0 = $3 + 16 | 0;
 return $0;
}
function std____2____compressed_pair_elem_multi_marker__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0) {
 HEAP32[$0 >> 2] = 0;
}
function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function arImageProcInit($0, $1) {
 var $2 = 0;
 $2 = dlmalloc(2064);
 if ($2) {
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = 0;
 }
 return $2;
}
function $28anonymous_20namespace_29__StringView__StringView_28char_20const__2c_20char_20const__29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function arPattFree($0, $1) {
 $1 = HEAP32[$0 + 8 >> 2] + ($1 << 2) | 0;
 if (!HEAP32[$1 >> 2]) {
  return;
 }
 HEAP32[$1 >> 2] = 0;
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -1;
}
function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__isString_28_29_20const($0) {
 if (!HEAP32[$0 + 4 >> 2]) {
  return 0;
 }
 return HEAP32[$0 >> 2] != 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return HEAP32[$0 >> 2] + ($1 << 3) | 0;
}
function pntz($0) {
 var $1 = 0;
 $1 = a_ctz_l(HEAP32[$0 >> 2] + -1 | 0);
 if (!$1) {
  $0 = a_ctz_l(HEAP32[$0 + 4 >> 2]);
  return $0 ? $0 + 32 | 0 : 0;
 }
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
 return HEAP8[$0 + 11 | 0] < 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeOrString__isNode_28_29_20const($0) {
 if (!HEAP32[$0 >> 2]) {
  return 0;
 }
 return !HEAP32[$0 + 4 >> 2];
}
function fwrite($0, $1, $2) {
 label$1 : {
  if (HEAP32[$2 + 76 >> 2] <= -1) {
   $0 = __fwritex($0, $1, $2);
   break label$1;
  }
  $0 = __fwritex($0, $1, $2);
 }
}
function arController___arController_28_29($0) {
 std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20____vector_28_29($0 + 248 | 0);
 return $0;
}
function $28anonymous_20namespace_29__SwapAndRestore_bool____SwapAndRestore_28_29($0) {
 if (HEAPU8[$0 + 5 | 0]) {
  HEAP8[HEAP32[$0 >> 2]] = HEAPU8[$0 + 4 | 0];
 }
}
function emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[$0]($1);
}
function dynCall_iiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3;
}
function std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false_____tuple_leaf_int_20const__2c_20void__28int_20const__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
}
function std____2____compressed_pair_multi_marker__2c_20std____2__allocator_multi_marker_____second_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 4 >> 2];
}
function dynCall_viiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function void_20emscripten__constant_int__28char_20const__2c_20int_20const__29($0, $1) {
 _embind_register_constant($0 | 0, 29652, +HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($0) {
 return HEAP32[$0 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0;
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}
function std____2__tuple___20std____2__forward_as_tuple___28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 global$0 = $0 + 16 | 0;
}
function std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1) {
 return HEAP32[$0 >> 2] == HEAP32[$1 >> 2];
}
function arSetPatternDetectionMode($0, $1) {
 if (!$0 | $1 >>> 0 > 4) {
  $0 = -1;
 } else {
  HEAP32[$0 + 24 >> 2] = $1;
  $0 = 0;
 }
 return $0;
}
function arSetPattRatio($0, $1) {
 if (!$0 | $1 <= 0 | $1 >= 1) {
  $0 = -1;
 } else {
  HEAPF64[$0 + 7062416 >> 3] = $1;
  $0 = 0;
 }
 return $0;
}
function __strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return memcpy($2, $0, $1);
}
function compE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAPF64[$0 >> 3] - HEAPF64[$1 >> 3];
 return ($2 < 0 ? -1 : $2 > 0) | 0;
}
function std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____RAII_IncreaseAnnotator____done_28_29($0) {
 $0 = $0 | 0;
}
function dynCall_iiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function dynCall_viif($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $0;
}
function __wasm_rotl_i32($0) {
 var $1 = 0;
 $1 = $0 & 31;
 $0 = 0 - $0 & 31;
 return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
}
function std____2____vector_base_multi_marker_2c_20std____2__allocator_multi_marker__20_____end_cap_28_29($0) {
 return $0 + 8 | 0;
}
function ferror($0) {
 if (HEAP32[$0 + 76 >> 2] <= -1) {
  return HEAP32[$0 >> 2] >>> 5 & 1;
 }
 return HEAP32[$0 >> 2] >>> 5 & 1;
}
function dynCall_viii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function arMatrixSelfInv($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 $0 = HEAP32[$0 + 4 >> 2];
 return minv($1, $0, $0) ? 0 : -1;
}
function $28anonymous_20namespace_29__OutputStream__setCurrentPosition_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
}
function dynCall_viid($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function std__length_error___length_error_28_29($0) {
 $0 = $0 | 0;
 std__logic_error___logic_error_28_29($0);
 dlfree($0);
}
function __wasm_i64_udiv($0, $1, $2) {
 return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2);
}
function $28anonymous_20namespace_29__StringView__empty_28_29_20const($0) {
 return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
}
function setThrew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!HEAP32[8504]) {
  HEAP32[8505] = $1;
  HEAP32[8504] = $0;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($0) {
 return !HEAP32[$0 + 4 >> 2];
}
function std__logic_error___logic_error_28_29_1($0) {
 $0 = $0 | 0;
 dlfree(std__logic_error___logic_error_28_29($0));
}
function std____terminate_28void_20_28__29_28_29_29($0) {
 FUNCTION_TABLE[$0]();
 abort_message(29132, 0);
 abort();
}
function dynCall_iii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function std____2____hash_value_type_int_2c_20arController_____get_value_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function dynCall_dii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +FUNCTION_TABLE[$0]($1, $2);
}
function do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __string_read($0, $1, $2) | 0;
}
function legalfunc$wasm2js_scratch_store_i64($0, $1) {
 legalimport$wasm2js_scratch_store_i64($0 | 0, $1 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function std____2____is_hash_power2_28unsigned_20long_29($0) {
 return !($0 + -1 & $0) & $0 >>> 0 > 2;
}
function strchr($0, $1) {
 $0 = __strchrnul($0, $1);
 return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
}
function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = global$0 - $0 & -16;
 global$0 = $0;
 return $0 | 0;
}
function icpSetInlierProbability($0, $1) {
 if (!$0) {
  return;
 }
 HEAPF64[$0 + 128 >> 3] = $1;
}
function dynCall_ii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0;
}
function __wasi_syscall_ret($0) {
 if (!$0) {
  return 0;
 }
 HEAP32[8356] = $0;
 return -1;
}
function std____2___DeallocateCaller____do_call_28void__29($0) {
 $0 = $0 | 0;
 dlfree($0);
}
function dynCall_di($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +FUNCTION_TABLE[$0]($1);
}
function arImageProcFinal($0) {
 if ($0) {
  dlfree(HEAP32[$0 >> 2]);
  dlfree($0);
 }
}
function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}
function __growWasmMemory($0) {
 $0 = $0 | 0;
 return __wasm_memory_grow($0 | 0) | 0;
}
function isxdigit($0) {
 return (isdigit($0) | 0) != 0 | ($0 | 32) + -97 >>> 0 < 6;
}
function arMatrixFree($0) {
 if ($0) {
  dlfree(HEAP32[$0 >> 2]);
  dlfree($0);
 }
}
function std__exception__what_28_29_20const($0) {
 $0 = $0 | 0;
 return 29202;
}
function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1);
}
function norm($0, $1, $2) {
 return Math_sqrt($0 * $0 + $1 * $1 + $2 * $2);
}
function dot($0, $1, $2, $3, $4, $5) {
 return $0 * $3 + $1 * $4 + $2 * $5;
}
function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2);
}
function dynCall_i($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[$0]() | 0;
}
function dummy_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 | 0;
}
function __cxa_pure_virtual() {
 abort_message(29172, 0);
 abort();
}
function strncpy($0, $1, $2) {
 __stpncpy($0, $1, $2);
 return $0;
}
function isspace($0) {
 return ($0 | 0) == 32 | $0 + -9 >>> 0 < 5;
}
function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}
function arVecFree($0) {
 dlfree(HEAP32[$0 >> 2]);
 dlfree($0);
}
function dynCall_v($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[$0]();
}
function setLogLevel($0) {
 $0 = $0 | 0;
 HEAP32[7838] = $0;
}
function stackRestore($0) {
 $0 = $0 | 0;
 global$0 = $0;
}
function __ofl_lock() {
 __lock(32360);
 return 32368;
}
function std__uncaught_exception_28_29() {
 return 0;
}
function fseek($0, $1) {
 __fseeko_unlocked($0, $1);
}
function isdigit($0) {
 return $0 + -48 >>> 0 < 10;
}
function getLogLevel() {
 return HEAP32[7838];
}
function stackSave() {
 return global$0 | 0;
}
function __errno_location() {
 return 33424;
}
function _get_timezone() {
 return 34036;
}
function _get_daylight() {
 return 34032;
}
function _get_tzname() {
 return 34024;
}

// EMSCRIPTEN_END_FUNCS

 FUNCTION_TABLE[1] = compE;
 FUNCTION_TABLE[2] = __cxx_global_array_dtor;
 FUNCTION_TABLE[3] = __cxx_global_array_dtor_2;
 FUNCTION_TABLE[4] = setup;
 FUNCTION_TABLE[5] = teardown;
 FUNCTION_TABLE[6] = addMarker;
 FUNCTION_TABLE[7] = addMultiMarker;
 FUNCTION_TABLE[8] = getMultiMarkerNum;
 FUNCTION_TABLE[9] = getMultiMarkerCount;
 FUNCTION_TABLE[10] = loadCamera;
 FUNCTION_TABLE[11] = setMarkerInfoDir;
 FUNCTION_TABLE[12] = setMarkerInfoVertex;
 FUNCTION_TABLE[13] = getTransMatSquare;
 FUNCTION_TABLE[14] = getTransMatSquareCont;
 FUNCTION_TABLE[15] = getTransMatMultiSquare;
 FUNCTION_TABLE[16] = getTransMatMultiSquareRobust;
 FUNCTION_TABLE[17] = detectMarker;
 FUNCTION_TABLE[18] = getMarkerNum;
 FUNCTION_TABLE[19] = getMultiEachMarkerInfo;
 FUNCTION_TABLE[20] = getMarkerInfo;
 FUNCTION_TABLE[21] = setDebugMode;
 FUNCTION_TABLE[22] = getDebugMode;
 FUNCTION_TABLE[23] = getProcessingImage;
 FUNCTION_TABLE[24] = setLogLevel;
 FUNCTION_TABLE[25] = getLogLevel;
 FUNCTION_TABLE[26] = setProjectionNearPlane;
 FUNCTION_TABLE[27] = getProjectionNearPlane;
 FUNCTION_TABLE[28] = setProjectionFarPlane;
 FUNCTION_TABLE[29] = getProjectionFarPlane;
 FUNCTION_TABLE[30] = setThresholdMode;
 FUNCTION_TABLE[31] = getThresholdMode;
 FUNCTION_TABLE[32] = setThreshold;
 FUNCTION_TABLE[33] = getThreshold;
 FUNCTION_TABLE[34] = setPatternDetectionMode;
 FUNCTION_TABLE[35] = getPatternDetectionMode;
 FUNCTION_TABLE[36] = setPattRatio;
 FUNCTION_TABLE[37] = getPattRatio;
 FUNCTION_TABLE[38] = setMatrixCodeType;
 FUNCTION_TABLE[39] = getMatrixCodeType;
 FUNCTION_TABLE[40] = setLabelingMode;
 FUNCTION_TABLE[41] = getLabelingMode;
 FUNCTION_TABLE[42] = setImageProcMode;
 FUNCTION_TABLE[43] = getImageProcMode;
 FUNCTION_TABLE[44] = emscripten__internal__Invoker_int_2c_20int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[45] = emscripten__internal__Invoker_int_2c_20int___invoke_28int_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[46] = emscripten__internal__Invoker_int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28int_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[47] = emscripten__internal__Invoker_int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29;
 FUNCTION_TABLE[48] = emscripten__internal__Invoker_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[49] = emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[50] = emscripten__internal__Invoker_int___invoke_28int_20_28__29_28_29_29;
 FUNCTION_TABLE[51] = emscripten__internal__Invoker_void_2c_20int_2c_20double___invoke_28void_20_28__29_28int_2c_20double_29_2c_20int_2c_20double_29;
 FUNCTION_TABLE[52] = emscripten__internal__Invoker_double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[53] = emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29;
 FUNCTION_TABLE[54] = emscripten__internal__Invoker_void_2c_20int_2c_20float___invoke_28void_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29;
 FUNCTION_TABLE[55] = std__logic_error___logic_error_28_29;
 FUNCTION_TABLE[56] = sn_write;
 FUNCTION_TABLE[57] = __stdio_seek;
 FUNCTION_TABLE[58] = __stdio_write;
 FUNCTION_TABLE[59] = __stdio_read;
 FUNCTION_TABLE[60] = __stdio_close;
 FUNCTION_TABLE[61] = do_read;
 FUNCTION_TABLE[62] = __emscripten_stdout_close;
 FUNCTION_TABLE[63] = __emscripten_stdout_seek;
 FUNCTION_TABLE[64] = fmt_fp;
 FUNCTION_TABLE[65] = pop_arg_long_double;
 FUNCTION_TABLE[66] = demangling_terminate_handler_28_29;
 FUNCTION_TABLE[67] = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[68] = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[69] = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[70] = dummy_2;
 FUNCTION_TABLE[71] = $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[72] = void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20ARParam__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20ARParam__2c_20void___20___2c_20std____2__pair_int_20const_2c_20ARParam___29;
 FUNCTION_TABLE[73] = $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const;
 FUNCTION_TABLE[74] = std____2____hash_value_type_int_2c_20arController_____get_value_28_29;
 FUNCTION_TABLE[75] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[76] = __cxa_pure_virtual;
 FUNCTION_TABLE[77] = $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29;
 FUNCTION_TABLE[78] = $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[79] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[80] = $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[81] = $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const;
 FUNCTION_TABLE[82] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[83] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[84] = $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[85] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[86] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[87] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[88] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[89] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[90] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[91] = $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[92] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[93] = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[94] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[95] = $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[96] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[97] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[98] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[99] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[100] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[101] = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[102] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[103] = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[104] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[105] = $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[106] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[107] = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[108] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[109] = $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[110] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[111] = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[112] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[113] = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[114] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[115] = $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[116] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[117] = $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[118] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[119] = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[120] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[121] = $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[122] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[123] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[124] = $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[125] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[126] = $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[127] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[128] = $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[129] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[130] = $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[131] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[132] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[133] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[134] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[135] = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[136] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[137] = $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[138] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[139] = $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[140] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[141] = $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[142] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[143] = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[144] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[145] = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[146] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[147] = $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[148] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[149] = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[150] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[151] = $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[152] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[153] = $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[154] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[155] = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[156] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[157] = $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[158] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[159] = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[160] = $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const;
 FUNCTION_TABLE[161] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[162] = $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[163] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[164] = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[165] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[166] = $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[167] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[168] = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[169] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[170] = $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[171] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[172] = $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[173] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[174] = $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[175] = $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const;
 FUNCTION_TABLE[176] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[177] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[178] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[179] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[180] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[181] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[182] = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[183] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[184] = $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[185] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[186] = $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[187] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[188] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[189] = $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[190] = $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const;
 FUNCTION_TABLE[191] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[192] = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[193] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[194] = $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[195] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[196] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[197] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[198] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[199] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[200] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[201] = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[202] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[203] = $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[204] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[205] = $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[206] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[207] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[208] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[209] = $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[210] = $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[211] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[212] = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[213] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[214] = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[215] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[216] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[217] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[218] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[219] = $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[220] = $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[221] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[222] = $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[223] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[224] = $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[225] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[226] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[227] = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[228] = $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[229] = $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[230] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[231] = $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[232] = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[233] = $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[234] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[235] = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[236] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[237] = $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[238] = $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[239] = $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[240] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[241] = $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[242] = $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[243] = $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[244] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[245] = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__OutputStream__29_20const;
 FUNCTION_TABLE[246] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[247] = std____2____hash_value_type_int_2c_20arController_____get_value_28_29;
 FUNCTION_TABLE[248] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[249] = std__exception__what_28_29_20const;
 FUNCTION_TABLE[250] = std__logic_error___logic_error_28_29_1;
 FUNCTION_TABLE[251] = std____2____compressed_pair_multi_marker__2c_20std____2__allocator_multi_marker_____second_28_29;
 FUNCTION_TABLE[252] = std__length_error___length_error_28_29;
 FUNCTION_TABLE[253] = std____2____hash_value_type_int_2c_20arController_____get_value_28_29;
 FUNCTION_TABLE[254] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[255] = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____RAII_IncreaseAnnotator____done_28_29;
 FUNCTION_TABLE[256] = std____2__vector_multi_marker_2c_20std____2__allocator_multi_marker__20_____RAII_IncreaseAnnotator____done_28_29;
 FUNCTION_TABLE[257] = __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[258] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[259] = __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[260] = __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[261] = __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[262] = __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[263] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[264] = __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[265] = __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[266] = __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[267] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[268] = __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[269] = __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[270] = __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[271] = EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "_get_tzname": _get_tzname, 
  "_get_daylight": _get_daylight, 
  "_get_timezone": _get_timezone, 
  "setThrew": setThrew, 
  "_ZSt18uncaught_exceptionv": std__uncaught_exception_28_29, 
  "__cxa_demangle": __cxa_demangle, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_vi": emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_i": dynCall_i, 
  "dynCall_vid": emscripten__internal__Invoker_void_2c_20int_2c_20double___invoke_28void_20_28__29_28int_2c_20double_29_2c_20int_2c_20double_29, 
  "dynCall_di": dynCall_di, 
  "dynCall_vii": emscripten__internal__Invoker_void_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, 
  "dynCall_vif": emscripten__internal__Invoker_void_2c_20int_2c_20float___invoke_28void_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_viid": dynCall_viid, 
  "dynCall_dii": dynCall_dii, 
  "dynCall_viii": dynCall_viii, 
  "dynCall_viif": dynCall_viif, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iidiiii": dynCall_iidiiii, 
  "dynCall_v": dynCall_v, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_viiii": dynCall_viiii
};
}

var writeSegment = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(wasmMemory.buffer);
writeSegment(1024, "RXJyb3I6IGxhYmVsaW5nIHdvcmsgb3ZlcmZsb3cuCgBFcnJvcjogbGFiZWxpbmcgd29yayBvdmVyZmxvdy4KAEVycm9yOiBsYWJlbGluZyB3b3JrIG92ZXJmbG93LgoARXJyb3I6IGxhYmVsaW5nIHdvcmsgb3ZlcmZsb3cuCgBFcnJvcjogbGFiZWxpbmcgd29yayBvdmVyZmxvdy4KAEVycm9yOiBsYWJlbGluZyB3b3JrIG92ZXJmbG93LgoARXJyb3I6IGxhYmVsaW5nIHdvcmsgb3ZlcmZsb3cuCgBFcnJvcjogbGFiZWxpbmcgd29yayBvdmVyZmxvdy4KAEVycm9yOiBsYWJlbGluZyB3b3JrIG92ZXJmbG93LgoARXJyb3I6IGxhYmVsaW5nIHdvcmsgb3ZlcmZsb3cuCgBFcnJvcjogbGFiZWxpbmcgd29yayBvdmVyZmxvdy4KAEVycm9yOiBsYWJlbGluZyB3b3JrIG92ZXJmbG93LgoAT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAE1hcmtlciBPSy4APz8/IDEKAE91dCBvZiBtZW1vcnkhIQoAT3V0IG9mIG1lbW9yeSEhCgBPdXQgb2YgbWVtb3J5ISEKAE91dCBvZiBtZW1vcnkhIQoAIAkKDQBPdXQgb2YgbWVtb3J5ISEKAE91dCBvZiBtZW1vcnkhIQoAID09PSBtYXRyaXggKCVkLCVkKSA9PT0KAHdiAGFyZ2xDYW1lcmFGcnVzdHVtUkgoKTogYXJQYXJhbURlY29tcE1hdCgpIGluZGljYXRlZCBwYXJhbWV0ZXIgZXJyb3IuCgBPdXQgb2YgbWVtb3J5ISEKACA9PT0gdmVjdG9yICglZCkgPT09CgBEYXRhIG51bSBlcnJvciEhCgBFcnJvcjogbWFsbG9jCgBFcnJvcjogbWFsbG9jCgBFcnJvcjogbWFsbG9jCgBFcnJvcjogbWFsbG9jCgBFcnJvciAxOiBpY3BHZXRJbml0WHcyWGMKAE91dCBvZiBtZW1vcnkhIQoAT3V0IG9mIG1lbW9yeSEhCgByAGRlYnVnACVzLyVzAFVua25vd24gb3IgdW5zdXBwb3J0ZWQgbGFiZWxpbmcgdGhyZXNob2xkIG1vZGUgcmVxdWVzdGVkLiBTZXQgdG8gbWFudWFsLgoAUGF0dGVybiBleHRyYWN0aW9uIGZhaWxlZC4APz8/IDIKAEVycm9yOiB1bnN1cHBvcnRlZCBwaXhlbCBmb3JtYXQuCgBFcnJvcjogTlVMTCBwYXR0SGFuZGxlLgoAdwBBUl9QSVhFTF9GT1JNQVRfUkdCAFNJWkUgPSAlZCwgJWQKAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIGNhbWVyYSBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3Igd3JpdGluZy4KACVzLiVzAE91dCBvZiBtZW1vcnkhIQoARXJyb3I6IGljcEdldEpfVV9YYwBFcnJvciAyOiBpY3BHZXRJbml0WHcyWGMKAEVycm9yOiB1bmFibGUgdG8gb3BlbiBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnLgoAaW5mbwByYgBNQU5VQUwAR2VuZXJpYyBlcnJvciBkdXJpbmcgbWF0Y2hpbmcgcGhhc2UuAD8/PyAzCgBFcnJvcjogY2FuJ3QgbG9hZCBwYXR0ZXJuIGZyb20gTlVMTCBidWZmZXIuCgAlNGQAQVJfUElYRUxfRk9STUFUX0JHUgAgJTEwZwBEaXN0b3J0aW9uIGZhY3RvcjogazE9JTEuMTBmLCBrMj0lMS4xMGYsIHAxPSUxLjEwZiwgcDI9JTEuMTBmCgAlcyVzCgB3YgAgJTEwZwBFcnJvciBpY3BHZXRKX1VfUwoAPT09PT09ICVzID09PT09PT09CgBFcnJvciAzOiBpY3BHZXRJbml0WHcyWGMKACVzJXMKAHdhcm5pbmcAd2IAQVVUT19NRURJQU4ASW5zdWZmaWNpZW50IGNvbnRyYXN0IGR1cmluZyBtYXRjaGluZy4ARXJyb3I6IG91dCBvZiBtZW1vcnkuCgBBUl9QSVhFTF9GT1JNQVRfUkdCQQAgICAgICAgICAgICAgICAgICBmeD0lZiwgZnk9JWYsIHgwPSVmLCB5MD0lZiwgcz0lZgoAAEVycm9yOiBVbmFibGUgdG8gb3BlbiBmaWxlICclcycgZm9yIHdyaXRpbmcuCgBFcnJvciBpY3BHZXRVX2Zyb21fWF9ieV9NYXRYMlUKACU3LjVmIABFcnJvciA0OiBpY3BHZXRJbml0WHcyWGMKAABlcnJvcgBFcnJvciBhbGxvY2F0aW5nIG1lbW9yeS4KAEFVVE9fT1RTVQBCYXJjb2RlIG1hdGNoaW5nIGNvdWxkIG5vdCBmaW5kIGNvcnJlY3QgYmFyY29kZSBsb2NhdG9yIHBhdHRlcm4uAFBhdHRlcm4gRGF0YSByZWFkIGVycm9yISEKAEFSX1BJWEVMX0ZPUk1BVF9CR1JBAERpc3RvcnRpb24gZmFjdG9yID0gJWYgJWYgJWYgJWYgJWYgJWYKAHJiAHJiAEVycm9yIGljcEdldFhjX2Zyb21fWHdfYnlfTWF0WHcyWGMKAEVycm9yIDU6IGljcEdldEluaXRYdzJYYwoAJWQAWyVzXSAARXJyb3Igb3BlbmluZyAnJXMnLgoAQVVUT19BREFQVElWRQBCYXJjb2RlIG1hdGNoaW5nIGVycm9yIGRldGVjdGlvbi9jb3JyZWN0aW9uIGZvdW5kIHVucmVjb3ZlcmFibGUgZXJyb3IuAEVycm9yIHJlYWRpbmcgcGF0dGVybiBmaWxlICclcycuCgBBUl9QSVhFTF9GT1JNQVRfQUJHUgBEaXN0b3J0aW9uIGZhY3RvciA9ICVmICVmICVmICVmICVmCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBjYW1lcmEgcGFyYW1ldGVycyBmaWxlICIlcyIgZm9yIHJlYWRpbmcuCgBFcnJvcjogVW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMnIGZvciByZWFkaW5nLgoARXJyb3IgPSAlZgoARXJyb3IgNjogaWNwR2V0SW5pdFh3MlhjCgBFcnJvciBwcm9jZXNzaW5nIG11bHRpbWFya2VyIGNvbmZpZyBmaWxlICclcyc6IEZpcnN0IGxpbmUgbXVzdCBiZSBudW1iZXIgb2YgbWFya2VyIGNvbmZpZ3MgdG8gcmVhZC4KAEVycm9yIGNyZWF0aW5nIGZ1bGwgZmlsZSBwYXRoIGZyb20gJyVzJyBhbmQgJyVzJwBBVVRPX0JSQUNLRVRJTkcATWF0Y2hpbmcgY29uZmlkZW5jZSBjdXRvZmYgdmFsdWUgbm90IHJlYWNoZWQuACVzJXMKAEFSX1BJWEVMX0ZPUk1BVF9NT05PAERpc3RvcnRpb24gZmFjdG9yID0gJWYgJWYgJWYgJWYKAEVycm9yICglZCk6IHVuYWJsZSB0byBkZXRlcm1pbmUgZmlsZSBsZW5ndGguAEVycm9yIGljcDJHZXRUUwoARXJyb3IgNzogaWNwR2V0SW5pdFh3MlhjCgBPdXQgb2YgbWVtb3J5ISEKAEVycm9yIGluIG9wZW5pbmcgJyVzJyBpbiB6aXBmaWxlLgoAAADTCAAA8QkAABULAAAZDAAA+A0AAExhYmVsaW5nIHRocmVzaG9sZCBtb2RlIHNldCB0byAlcy4KAE1heGltdW0gYWxsb3dhYmxlIHBvc2UgZXJyb3IgZXhjZWVkZWQuAABBUl9QSVhFTF9GT1JNQVRfQVJHQgBFcnJvcjogc3VwcGxpZWQgZmlsZSBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgYW4gQVJUb29sS2l0IGNhbWVyYSBwYXJhbWV0ZXIgZmlsZS4KACVsbHUlYwBFcnJvciBpbiBvcGVuaW5nICclcycgZm9yIHJlYWRpbmcKAEVycm9yOiBVbnN1cHBvcnRlZCBwaXhlbCBmb3JtYXQgKCVkKSByZXF1ZXN0ZWQuCgBNdWx0aS1tYXJrZXIgcG9zZSBlcnJvciB2YWx1ZSBleGNlZWRlZC4AQVJfUElYRUxfRk9STUFUXzJ2dXkAJTcuNWYgAEVycm9yICglZCk6IHVuYWJsZSB0byByZWFkIGZyb20gZmlsZS4ARXJyb3IgcHJvY2Vzc2luZyBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnOiBwYXR0ZXJuICclcycgc3BlY2lmaWVkIGluIG11bHRpbWFya2VyIGNvbmZpZ3VyYXRpb24gd2hpbGUgaW4gYmFyY29kZS1vbmx5IG1vZGUuCgBFcnJvciBpbiByZWFkaW5nICclcycuCgBSZWplY3RlZCBmcmVxdWVudGx5IG1pc3JlY29nbmlzZWQgbWF0cml4IG1hcmtlci4AQVJfUElYRUxfRk9STUFUX3l1dnMARXJyb3I6IHN1cHBsaWVkIGJ1ZmZlciBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgQVJUb29sS2l0IGNhbWVyYSBwYXJhbWV0ZXJzLgoARXJyb3IgcHJvY2Vzc2luZyBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnOiBVbmFibGUgdG8gZGV0ZXJtaW5lIGRpcmVjdG9yeSBuYW1lLgoARXJyb3IgaW4gd3JpdGluZyAnJXMnIGluIHRoZSB6aXBmaWxlLgoAQXV0byB0aHJlc2hvbGQgKGJyYWNrZXQpIG1hcmtlciBjb3VudHMgLVslM2Q6ICUzZF0gWyUzZDogJTNkXSBbJTNkOiAlM2RdKy4KAEFSX1BJWEVMX0ZPUk1BVF9SR0JfNTY1AEZpZWxkLW9mLXZpZXcgdmVydGljYWwgPSAlLjFmLCBob3Jpem9udGFsID0gJS4xZiBkZWdyZWVzLCBhc3BlY3QgcmF0aW8gPSAlLjNmCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBleHRlcm5hbCBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3Igd3JpdGluZy4KAEVycm9yIHByb2Nlc3NpbmcgbXVsdGltYXJrZXIgY29uZmlnIGZpbGUgJyVzJzogVW5hYmxlIHRvIGxvYWQgcGF0dGVybiAnJXMnLgoARXJyb3IgaW4gY2xvc2luZyAlcyBpbiB0aGUgemlwZmlsZS4KAEF1dG8gdGhyZXNob2xkIChicmFja2V0KSBhZGp1c3RlZCB0aHJlc2hvbGQgdG8gJWQuCgBBUl9QSVhFTF9GT1JNQVRfUkdCQV81NTUxAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIGV4dGVybmFsIHBhcmFtZXRlcnMgZmlsZSAiJXMiIGZvciByZWFkaW5nLgoAJWxmAEVycm9yIGluIGNsb3NpbmcgJyVzJy4KAEF1dG8gdGhyZXNob2xkICglcykgYWRqdXN0ZWQgdGhyZXNob2xkIHRvICVkLgoAQVJfUElYRUxfRk9STUFUX1JHQkFfNDQ0NABbJSAuM2YgJSAuM2YgJSAuM2ZdIFslIDYuMWZdCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBvcHRpY2FsIHBhcmFtZXRlcnMgZmlsZSAiJXMiIGZvciB3cml0aW5nLgoARXJyb3IgcHJvY2Vzc2luZyBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnLCBtYXJrZXIgZGVmaW5pdGlvbiAlM2Q6IEZpcnN0IGxpbmUgbXVzdCBiZSBwYXR0ZXJuIHdpZHRoLgoAbWVkaWFuAEFSX1BJWEVMX0ZPUk1BVF80MjB2AEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIG9wdGljYWwgcGFyYW1ldGVycyBmaWxlICIlcyIgZm9yIHJlYWRpbmcuCgAlbGYgJWxmICVsZiAlbGYAT3RzdQBBUl9QSVhFTF9GT1JNQVRfNDIwZgAlZiAlZg==");
writeSegment(5636, "AQAAAAEAAAABAAAAAAAAAP//////////////////////////AAAAAAEAAAABAAAAAQAAAAAAAAD/////AQAAAAkAAAAFAAAABAAAAAMAAAAC");
writeSegment(5731, "AQABAQEAAgT//wUDAQAC/wYH/wMBAgIDAgMCAwMA/wQGBwX/AQQFBAQFBQQFBwYGBgcHBwb/AgQGBwUD/wD//wP/BQb//wkK/wz//w//ERL/FP//Fxj//xv/HR7//wEC/wT//wcI//8L/w0O/xD//xP/FRb//xka/xz//x8BAAAAAgAAAAQAAAAIAAAAAwAAAAYAAAAMAAAACwAAAAUAAAAKAAAABwAAAA4AAAAPAAAADQAAAAkAAAAAAAAA/////wAAAAABAAAABAAAAAIAAAAIAAAABQAAAAoAAAADAAAADgAAAAkAAAAHAAAABgAAAA0AAAALAAAADAAAAAEAAAACAAAABAAAAAgAAAAQAAAABQAAAAoAAAAUAAAADQAAABoAAAARAAAABwAAAA4AAAAcAAAAHQAAAB8AAAAbAAAAEwAAAAMAAAAGAAAADAAAABgAAAAVAAAADwAAAB4AAAAZAAAAFwAAAAsAAAAWAAAACQAAABIAAAAAAAAA/////wAAAAABAAAAEgAAAAIAAAAFAAAAEwAAAAsAAAADAAAAHQAAAAYAAAAbAAAAFAAAAAgAAAAMAAAAFwAAAAQAAAAKAAAAHgAAABEAAAAHAAAAFgAAABwAAAAaAAAAFQAAABkAAAAJAAAAEAAAAA0AAAAOAAAAGAAAAA8AAAABAAAAAgAAAAQAAAAIAAAAEAAAACAAAABAAAAAAwAAAAYAAAAMAAAAGAAAADAAAABgAAAAQwAAAAUAAAAKAAAAFAAAACgAAABQAAAAIwAAAEYAAAAPAAAAHgAAADwAAAB4AAAAcwAAAGUAAABJAAAAEQAAACIAAABEAAAACwAAABYAAAAsAAAAWAAAADMAAABmAAAATwAAAB0AAAA6AAAAdAAAAGsAAABVAAAAKQAAAFIAAAAnAAAATgAAAB8AAAA+AAAAfAAAAHsAAAB1AAAAaQAAAFEAAAAhAAAAQgAAAAcAAAAOAAAAHAAAADgAAABwAAAAYwAAAEUAAAAJAAAAEgAAACQAAABIAAAAEwAAACYAAABMAAAAGwAAADYAAABsAAAAWwAAADUAAABqAAAAVwAAAC0AAABaAAAANwAAAG4AAABfAAAAPQAAAHoAAAB3AAAAbQAAAFkAAAAxAAAAYgAAAEcAAAANAAAAGgAAADQAAABoAAAAUwAAACUAAABKAAAAFwAAAC4AAABcAAAAOwAAAHYAAABvAAAAXQAAADkAAAByAAAAZwAAAE0AAAAZAAAAMgAAAGQAAABLAAAAFQAAACoAAABUAAAAKwAAAFYAAAAvAAAAXgAAAD8AAAB+AAAAfwAAAH0AAAB5AAAAcQAAAGEAAABBAAAAAAAAAP////8AAAAAAQAAAAcAAAACAAAADgAAAAgAAAA4AAAAAwAAAD8AAAAPAAAAHwAAAAkAAABaAAAAOQAAABUAAAAEAAAAHAAAAEAAAABDAAAAEAAAAHAAAAAgAAAAYQAAAAoAAABsAAAAWwAAAEYAAAA6AAAAJgAAABYAAAAvAAAABQAAADYAAAAdAAAAEwAAAEEAAABfAAAARAAAAC0AAAARAAAAKwAAAHEAAABzAAAAIQAAAE0AAABiAAAAdQAAAAsAAABXAAAAbQAAACMAAABcAAAASgAAAEcAAABPAAAAOwAAAGgAAAAnAAAAZAAAABcAAABSAAAAMAAAAHcAAAAGAAAAfgAAADcAAAANAAAAHgAAAD4AAAAUAAAAWQAAAEIAAAAbAAAAYAAAAG8AAABFAAAAawAAAC4AAAAlAAAAEgAAADUAAAAsAAAAXgAAAHIAAAAqAAAAdAAAAEwAAAAiAAAAVgAAAE4AAABJAAAAYwAAAGcAAAB2AAAAUQAAAAwAAAB9AAAAWAAAAD0AAABuAAAAGgAAACQAAABqAAAAXQAAADQAAABLAAAAKQAAAEgAAABVAAAAUAAAAGYAAAA8AAAAfAAAAGkAAAAZAAAAKAAAADMAAABlAAAAVAAAABgAAAB7AAAAUwAAADIAAAAxAAAAegAAAHgAAAB5AAAAQVJfUElYRUxfRk9STUFUX05WMjEARXJyb3IgcHJvY2Vzc2luZyBtdWx0aW1hcmtlciBjb25maWcgZmlsZSAnJXMnLCBtYXJrZXIgZGVmaW5pdGlvbiAlM2Q6IExpbmVzIDIgLSA0IG11c3QgYmUgbWFya2VyIHRyYW5zZm9ybS4KAAAAAwAAAAMAAAAEAAAABAAAAAQAAAABAAAABAAAAAIAAAACAAAAAgAAAAIAAAACAAAAAQAAAAEAAAABAAAABAAAAIgAAAAFAAAAkAAAAAYAAACYAAAACQAAALAAAAA0BwAAywgAAOYJAAD1CgAAbG9hZENhbWVyYSgpOiBFcnJvciBsb2FkaW5nIHBhcmFtZXRlciBmaWxlICVzIGZvciBjYW1lcmEuCgAqKiogQ2FtZXJhIFBhcmFtZXRlciByZXNpemVkIGZyb20gJWQsICVkLiAqKioKAHNldENhbWVyYSgpOiBFcnJvcjogYXJQYXJhbUxUQ3JlYXRlLgoAc2V0Q2FtZXJhKCk6IEVycm9yOiBhckNyZWF0ZUhhbmRsZS4KAHNldENhbWVyYSgpOiBFcnJvciBjcmVhdGluZyAzRCBoYW5kbGUAQVJUb29sS2l0SlMoKTogVW5hYmxlIHRvIHNldCB1cCBBUiBtYXJrZXIuCgBBUlRvb2xLaXRKUygpOiBVbmFibGUgdG8gc2V0IHVwIEFSIG11bHRpbWFya2VyLgoAUGF0dGVybiBkZXRlY3Rpb24gbW9kZSBzZXQgdG8gJWQuCgBQYXR0ZXJuIHJhdGlvIHNpemUgc2V0IHRvICVmLgoATGFiZWxpbmcgbW9kZSBzZXQgdG8gJWQKAFRocmVzaG9sZCBzZXQgdG8gJWQKAFRocmVzaG9sZCBtb2RlIHNldCB0byAlZAoARGVidWcgbW9kZSBzZXQgdG8gJXMKAG9uLgBvZmYuAEltYWdlIHByb2MuIG1vZGUgc2V0IHRvICVkLgoAeyBpZiAoIWFydG9vbGtpdFsibXVsdGlFYWNoTWFya2VySW5mbyJdKSB7IGFydG9vbGtpdFsibXVsdGlFYWNoTWFya2VySW5mbyJdID0gKHt9KTsgfSB2YXIgbXVsdGlFYWNoTWFya2VyID0gYXJ0b29sa2l0WyJtdWx0aUVhY2hNYXJrZXJJbmZvIl07IG11bHRpRWFjaE1hcmtlclsndmlzaWJsZSddID0gJDA7IG11bHRpRWFjaE1hcmtlclsncGF0dElkJ10gPSAkMTsgbXVsdGlFYWNoTWFya2VyWydwYXR0VHlwZSddID0gJDI7IG11bHRpRWFjaE1hcmtlclsnd2lkdGgnXSA9ICQzOyB9AGlpaWQAeyB2YXIgJGEgPSBhcmd1bWVudHM7IHZhciBpID0gMTI7IGlmICghYXJ0b29sa2l0WyJtYXJrZXJJbmZvIl0pIHsgYXJ0b29sa2l0WyJtYXJrZXJJbmZvIl0gPSAoeyBwb3M6IFswLDBdLCBsaW5lOiBbWzAsMCwwXSwgWzAsMCwwXSwgWzAsMCwwXSwgWzAsMCwwXV0sIHZlcnRleDogW1swLDBdLCBbMCwwXSwgWzAsMF0sIFswLDBdXSB9KTsgfSB2YXIgbWFya2VySW5mbyA9IGFydG9vbGtpdFsibWFya2VySW5mbyJdOyBtYXJrZXJJbmZvWyJhcmVhIl0gPSAkMDsgbWFya2VySW5mb1siaWQiXSA9ICQxOyBtYXJrZXJJbmZvWyJpZFBhdHQiXSA9ICQyOyBtYXJrZXJJbmZvWyJpZE1hdHJpeCJdID0gJDM7IG1hcmtlckluZm9bImRpciJdID0gJDQ7IG1hcmtlckluZm9bImRpclBhdHQiXSA9ICQ1OyBtYXJrZXJJbmZvWyJkaXJNYXRyaXgiXSA9ICQ2OyBtYXJrZXJJbmZvWyJjZiJdID0gJDc7IG1hcmtlckluZm9bImNmUGF0dCJdID0gJDg7IG1hcmtlckluZm9bImNmTWF0cml4Il0gPSAkOTsgbWFya2VySW5mb1sicG9zIl1bMF0gPSAkMTA7IG1hcmtlckluZm9bInBvcyJdWzFdID0gJDExOyBtYXJrZXJJbmZvWyJsaW5lIl1bMF1bMF0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMF1bMV0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMF1bMl0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMV1bMF0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMV1bMV0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMV1bMl0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMl1bMF0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMl1bMV0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bMl1bMl0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bM11bMF0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bM11bMV0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJsaW5lIl1bM11bMl0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJ2ZXJ0ZXgiXVswXVswXSA9ICRhW2krK107IG1hcmtlckluZm9bInZlcnRleCJdWzBdWzFdID0gJGFbaSsrXTsgbWFya2VySW5mb1sidmVydGV4Il1bMV1bMF0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJ2ZXJ0ZXgiXVsxXVsxXSA9ICRhW2krK107IG1hcmtlckluZm9bInZlcnRleCJdWzJdWzBdID0gJGFbaSsrXTsgbWFya2VySW5mb1sidmVydGV4Il1bMl1bMV0gPSAkYVtpKytdOyBtYXJrZXJJbmZvWyJ2ZXJ0ZXgiXVszXVswXSA9ICRhW2krK107IG1hcmtlckluZm9bInZlcnRleCJdWzNdWzFdID0gJGFbaSsrXTsgbWFya2VySW5mb1siZXJyb3JDb3JyZWN0ZWQiXSA9ICRhW2krK107IH0AAAAAAGlpaWlpaWlkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkaQBzZXR1cCgpOiBFcnJvcjogYXJQYXR0Q3JlYXRlSGFuZGxlLgoAQWxsb2NhdGVkIHZpZGVvRnJhbWVTaXplICVkCgB7IGlmICghYXJ0b29sa2l0WyJmcmFtZU1hbGxvYyJdKSB7IGFydG9vbGtpdFsiZnJhbWVNYWxsb2MiXSA9ICh7fSk7IH0gdmFyIGZyYW1lTWFsbG9jID0gYXJ0b29sa2l0WyJmcmFtZU1hbGxvYyJdOyBmcmFtZU1hbGxvY1siZnJhbWVwb2ludGVyIl0gPSAkMTsgZnJhbWVNYWxsb2NbImZyYW1lc2l6ZSJdID0gJDI7IGZyYW1lTWFsbG9jWyJjYW1lcmEiXSA9ICQzOyBmcmFtZU1hbGxvY1sidHJhbnNmb3JtIl0gPSAkNDsgZnJhbWVNYWxsb2NbInZpZGVvTHVtYVBvaW50ZXIiXSA9ICQ1OyB9AGlpaWlpaQBzZXR1cAB0ZWFyZG93bgBfYWRkTWFya2VyAF9hZGRNdWx0aU1hcmtlcgBnZXRNdWx0aU1hcmtlck51bQBnZXRNdWx0aU1hcmtlckNvdW50AF9sb2FkQ2FtZXJhAHNldE1hcmtlckluZm9EaXIAc2V0TWFya2VySW5mb1ZlcnRleABnZXRUcmFuc01hdFNxdWFyZQBnZXRUcmFuc01hdFNxdWFyZUNvbnQAZ2V0VHJhbnNNYXRNdWx0aVNxdWFyZQBnZXRUcmFuc01hdE11bHRpU3F1YXJlUm9idXN0AGRldGVjdE1hcmtlcgBnZXRNYXJrZXJOdW0AZ2V0TXVsdGlFYWNoTWFya2VyAGdldE1hcmtlcgBzZXREZWJ1Z01vZGUAZ2V0RGVidWdNb2RlAGdldFByb2Nlc3NpbmdJbWFnZQBzZXRMb2dMZXZlbABnZXRMb2dMZXZlbABzZXRQcm9qZWN0aW9uTmVhclBsYW5lAGdldFByb2plY3Rpb25OZWFyUGxhbmUAc2V0UHJvamVjdGlvbkZhclBsYW5lAGdldFByb2plY3Rpb25GYXJQbGFuZQBzZXRUaHJlc2hvbGRNb2RlAGdldFRocmVzaG9sZE1vZGUAc2V0VGhyZXNob2xkAGdldFRocmVzaG9sZABzZXRQYXR0ZXJuRGV0ZWN0aW9uTW9kZQBnZXRQYXR0ZXJuRGV0ZWN0aW9uTW9kZQBzZXRQYXR0UmF0aW8AZ2V0UGF0dFJhdGlvAHNldE1hdHJpeENvZGVUeXBlAGdldE1hdHJpeENvZGVUeXBlAHNldExhYmVsaW5nTW9kZQBnZXRMYWJlbGluZ01vZGUAc2V0SW1hZ2VQcm9jTW9kZQBnZXRJbWFnZVByb2NNb2RlAEVSUk9SX0FSQ09OVFJPTExFUl9OT1RfRk9VTkQARVJST1JfTVVMVElNQVJLRVJfTk9UX0ZPVU5EAEVSUk9SX01BUktFUl9JTkRFWF9PVVRfT0ZfQk9VTkRTAEFSX0RFQlVHX0RJU0FCTEUAQVJfREVCVUdfRU5BQkxFAEFSX0RFRkFVTFRfREVCVUdfTU9ERQBBUl9MQUJFTElOR19XSElURV9SRUdJT04AQVJfTEFCRUxJTkdfQkxBQ0tfUkVHSU9OAEFSX0RFRkFVTFRfTEFCRUxJTkdfTU9ERQBBUl9ERUZBVUxUX0xBQkVMSU5HX1RIUkVTSABBUl9JTUFHRV9QUk9DX0ZSQU1FX0lNQUdFAEFSX0lNQUdFX1BST0NfRklFTERfSU1BR0UAQVJfREVGQVVMVF9JTUFHRV9QUk9DX01PREUAQVJfVEVNUExBVEVfTUFUQ0hJTkdfQ09MT1IAQVJfVEVNUExBVEVfTUFUQ0hJTkdfTU9OTwBBUl9NQVRSSVhfQ09ERV9ERVRFQ1RJT04AQVJfVEVNUExBVEVfTUFUQ0hJTkdfQ09MT1JfQU5EX01BVFJJWABBUl9URU1QTEFURV9NQVRDSElOR19NT05PX0FORF9NQVRSSVgAQVJfREVGQVVMVF9QQVRURVJOX0RFVEVDVElPTl9NT0RFAEFSX1VTRV9UUkFDS0lOR19ISVNUT1JZAEFSX05PVVNFX1RSQUNLSU5HX0hJU1RPUlkAQVJfVVNFX1RSQUNLSU5HX0hJU1RPUllfVjIAQVJfREVGQVVMVF9NQVJLRVJfRVhUUkFDVElPTl9NT0RFAEFSX01BWF9MT09QX0NPVU5UAEFSX0xPT1BfQlJFQUtfVEhSRVNIAEFSX0xPR19MRVZFTF9ERUJVRwBBUl9MT0dfTEVWRUxfSU5GTwBBUl9MT0dfTEVWRUxfV0FSTgBBUl9MT0dfTEVWRUxfRVJST1IAQVJfTE9HX0xFVkVMX1JFTF9JTkZPAEFSX01BVFJJWF9DT0RFXzN4MwBBUl9NQVRSSVhfQ09ERV8zeDNfSEFNTUlORzYzAEFSX01BVFJJWF9DT0RFXzN4M19QQVJJVFk2NQBBUl9NQVRSSVhfQ09ERV80eDQAQVJfTUFUUklYX0NPREVfNHg0X0JDSF8xM185XzMAQVJfTUFUUklYX0NPREVfNHg0X0JDSF8xM181XzUAQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfTUFOVUFMAEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fTUVESUFOAEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVQBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0FEQVBUSVZFAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9OT05FAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QQVRURVJOX0VYVFJBQ1RJT04AQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0dFTkVSSUMAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0NPTlRSQVNUAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9CQVJDT0RFX05PVF9GT1VORABBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQkFSQ09ERV9FRENfRkFJTABBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQ09ORklERU5DRQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUgBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUl9NVUxUSQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfSEVVUklTVElDX1RST1VCTEVTT01FX01BVFJJWF9DT0RFUwBsb2FkTWFya2VyKCk6IEVycm9yIGxvYWRpbmcgcGF0dGVybiBmaWxlICVzLgoAY29uZmlnIGRhdGEgbG9hZCBlcnJvciAhIQoAAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemU=");
writeSegment(12352, "1HMAANRzAADUcwAA1HMAAGlpaWlpAAAA1HMAANRzAABpaWkA1HMAANRzAADgMAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUATlN0M19fMjIxX19iYXNpY19zdHJpbmdfY29tbW9uSUxiMUVFRQAAAAAgdAAArzAAAKR0AABwMAAAAAAAAAEAAADYMAAAAAAAAGlpaWkAAAAA1HMAANRzAADUcwAA1HMAAOAwAACAcwAA1HMAAHZpaQDUcwAAaWkAAIBzAADUcwAAEHQAAHZpaWQAAAAAEHQAANRzAABkaWkAgHMAANRzAADUcwAAdmlpaQAAAACAcwAA1HMAAAR0AAB2aWlm");
writeSegment(12692, "OA==");
writeSegment(12731, "//////8=");
writeSegment(12800, "cndhAHJ3YQAtKyAgIDBYMHgAKG51bGwp");
writeSegment(12832, "EQAKABEREQAAAAAFAAAAAAAACQAAAAAL");
writeSegment(12864, "EQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERER");
writeSegment(12913, "Cw==");
writeSegment(12922, "EQAKChEREQAKAAACAAkLAAAACQALAAAL");
writeSegment(12971, "DA==");
writeSegment(12983, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
writeSegment(13029, "Dg==");
writeSegment(13041, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
writeSegment(13087, "EA==");
writeSegment(13099, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
writeSegment(13154, "EgAAABISEgAAAAAAAAk=");
writeSegment(13203, "Cw==");
writeSegment(13215, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
writeSegment(13261, "DA==");
writeSegment(13273, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAAAAABh8AAAAAAAAGRJEOwI/LEcUPTMwChsGRktFNw9JDo4XA0AdPGkrNh9KLRwBICUpIQgMFRYiLhA4Pgs0MRhkdHV2L0EJfzkRI0MyQomKiwUEJignDSoeNYwHGkiTE5SV");
writeSegment(13456, "SWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgZG93bgBIb3N0IGlzIHVucmVhY2hhYmxlAEFkZHJlc3MgaW4gdXNlAEJyb2tlbiBwaXBlAEkvTyBlcnJvcgBObyBzdWNoIGRldmljZSBvciBhZGRyZXNzAEJsb2NrIGRldmljZSByZXF1aXJlZABObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAERldmljZSBub3QgYSBzdHJlYW0ATm8gZGF0YSBhdmFpbGFibGUARGV2aWNlIHRpbWVvdXQAT3V0IG9mIHN0cmVhbXMgcmVzb3VyY2VzAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBGaWxlIGRlc2NyaXB0b3IgaW4gYmFkIHN0YXRlAE5vdCBhIHNvY2tldABEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkAE1lc3NhZ2UgdG9vIGxhcmdlAFByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldABQcm90b2NvbCBub3QgYXZhaWxhYmxlAFByb3RvY29sIG5vdCBzdXBwb3J0ZWQAU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAFByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAENhbm5vdCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93bgBPcGVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcwBPcGVyYXRpb24gaW4gcHJvZ3Jlc3MAU3RhbGUgZmlsZSBoYW5kbGUAUmVtb3RlIEkvTyBlcnJvcgBRdW90YSBleGNlZWRlZABObyBtZWRpdW0gZm91bmQAV3JvbmcgbWVkaXVtIHR5cGUATm8gZXJyb3IgaW5mb3JtYXRpb24AAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNMAAAAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQBpbmZpbml0eQBuYW4=");
writeSegment(15760, "0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///");
writeSegment(15840, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
writeSegment(18627, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAAACAAAAAwAAAAUAAAAHAAAACwAAAA0AAAARAAAAEwAAABcAAAAdAAAAHwAAACUAAAApAAAAKwAAAC8AAAA1AAAAOwAAAD0AAABDAAAARwAAAEkAAABPAAAAUwAAAFkAAABhAAAAZQAAAGcAAABrAAAAbQAAAHEAAAB/AAAAgwAAAIkAAACLAAAAlQAAAJcAAACdAAAAowAAAKcAAACtAAAAswAAALUAAAC/AAAAwQAAAMUAAADHAAAA0wAAAAEAAAALAAAADQAAABEAAAATAAAAFwAAAB0AAAAfAAAAJQAAACkAAAArAAAALwAAADUAAAA7AAAAPQAAAEMAAABHAAAASQAAAE8AAABTAAAAWQAAAGEAAABlAAAAZwAAAGsAAABtAAAAcQAAAHkAAAB/AAAAgwAAAIkAAACLAAAAjwAAAJUAAACXAAAAnQAAAKMAAACnAAAAqQAAAK0AAACzAAAAtQAAALsAAAC/AAAAwQAAAMUAAADHAAAA0QAAAGJhc2ljX3N0cmluZwBhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAHZlY3RvcgB0ZXJtaW5hdGluZyB3aXRoICVzIGV4Y2VwdGlvbiBvZiB0eXBlICVzOiAlcwB0ZXJtaW5hdGluZyB3aXRoICVzIGV4Y2VwdGlvbiBvZiB0eXBlICVzAHRlcm1pbmF0aW5nIHdpdGggJXMgZm9yZWlnbiBleGNlcHRpb24AdGVybWluYXRpbmcAdW5jYXVnaHQAX1oAX19fWgBfYmxvY2tfaW52b2tlAGludm9jYXRpb24gZnVuY3Rpb24gZm9yIGJsb2NrIGluIABVYTllbmFibGVfaWZJAHZ0YWJsZSBmb3IgAFZUVCBmb3IgAHR5cGVpbmZvIGZvciAAdHlwZWluZm8gbmFtZSBmb3IgAGNvdmFyaWFudCByZXR1cm4gdGh1bmsgdG8gAHRocmVhZC1sb2NhbCB3cmFwcGVyIHJvdXRpbmUgZm9yIAB0aHJlYWQtbG9jYWwgaW5pdGlhbGl6YXRpb24gcm91dGluZSBmb3IgAHZpcnR1YWwgdGh1bmsgdG8gAG5vbi12aXJ0dWFsIHRodW5rIHRvIABndWFyZCB2YXJpYWJsZSBmb3IgAHJlZmVyZW5jZSB0ZW1wb3JhcnkgZm9yIAAAAAAALE0AAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABKAAAASwAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTExU3BlY2lhbE5hbWVFAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTROb2RlRQAgdAAA/EwAAEh0AADMTAAAJE0AAAAAAAAkTQAAQwAAAEQAAABFAAAARgAAAEwAAABIAAAASQAAAEoAAABNAAAAAAAAAMxNAABDAAAARAAAAEUAAABGAAAATgAAAEgAAABJAAAASgAAAE8AAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMUN0b3JWdGFibGVTcGVjaWFsTmFtZUUAAABIdAAAkE0AACRNAABjb25zdHJ1Y3Rpb24gdnRhYmxlIGZvciAALWluLQBTdABzdGQ=");
writeSegment(19972, "WE4AAEMAAABEAAAARQAAAEYAAABQAAAASAAAAFEAAABKAAAAUgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThOYW1lVHlwZUUASHQAACxOAAAkTQAAAAAAAMBOAABDAAAARAAAAEUAAABGAAAAUwAAAEgAAABUAAAASgAAAFUAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxME5lc3RlZE5hbWVFAABIdAAAkE4AACRNAAA6OgBhdXRvAAAAAABATwAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAASQAAAEoAAABcAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjRGb3J3YXJkVGVtcGxhdGVSZWZlcmVuY2VFAAAAAEh0AAAATwAAJE0AAGRlY2x0eXBlKAApAGdzACYmACYAJj0APQBhbGlnbm9mICgAY29uc3RfY2FzdAAsAH4AZHluYW1pY19jYXN0ACoALioALgAvAC89AF4AXj0APT0APj0APgA8PQA8PAA8PD0APAAtAC09ACo9AC0tACE9ACEAbm9leGNlcHQgKAB8fAB8AHw9AC0+KgArACs9ACsrAC0+AHJlaW50ZXJwcmV0X2Nhc3QAJQAlPQA+PgA+Pj0Ac3RhdGljX2Nhc3QAc2l6ZW9mICgAc2l6ZW9mLi4uICgAdHlwZWlkICgAdGhyb3cAd2NoYXJfdABiMEUAYjFFAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydAAAdQBsAHVsAGxsAHVsbABfX2ludDEyOAB1bnNpZ25lZCBfX2ludDEyOA==");
writeSegment(20645, "UQAAQwAAAEQAAABFAAAARgAAAF0AAABIAAAASQAAAEoAAABeAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTRJbnRlZ2VyTGl0ZXJhbEUAAEh0AADMUAAAJE0AACgAAAAAAAAAaFEAAEMAAABEAAAARQAAAEYAAABfAAAASAAAAEkAAABKAAAAYAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThCb29sRXhwckUASHQAADxRAAAkTQAAdHJ1ZQBmYWxzZQAAAAAAAORRAABDAAAARAAAAEUAAABGAAAAYQAAAEgAAABJAAAASgAAAGIAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNkZsb2F0TGl0ZXJhbEltcGxJZkVFAEh0AACsUQAAJE0AACVhZgAAAAAAWFIAAEMAAABEAAAARQAAAEYAAABjAAAASAAAAEkAAABKAAAAZAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE2RmxvYXRMaXRlcmFsSW1wbElkRUUASHQAACBSAAAkTQAAJWEAAAAAAADMUgAAQwAAAEQAAABFAAAARgAAAGUAAABIAAAASQAAAEoAAABmAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTZGbG9hdExpdGVyYWxJbXBsSWVFRQBIdAAAlFIAACRNAAAlTGFM");
writeSegment(21220, "QFMAAEMAAABEAAAARQAAAEYAAABnAAAASAAAAEkAAABKAAAAaAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1SW50ZWdlckNhc3RFeHByRQBIdAAADFMAACRNAABmcABmTAAAAAAAAAC0UwAAQwAAAEQAAABFAAAARgAAAGkAAABIAAAASQAAAEoAAABqAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTNGdW5jdGlvblBhcmFtRQAAAEh0AACAUwAAJE0AAGFhAGFuAGFOAGFTAGNtAGRzAGR2AGRWAGVvAGVPAGVxAGdlAGd0AGxlAGxzAGxTAGx0AG1pAG1JAG1sAG1MAG5lAG9vAG9yAG9SAHBsAHBMAHJtAHJNAHJzAHJT");
writeSegment(21540, "eFQAAEMAAABEAAAARQAAAEYAAABrAAAASAAAAEkAAABKAAAAbAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThGb2xkRXhwckUASHQAAExUAAAkTQAALi4uIAAgLi4uAAAAAAAAAPhUAABDAAAARAAAAEUAAABGAAAAbQAAAEgAAABJAAAASgAAAG4AAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMlBhcmFtZXRlclBhY2tFeHBhbnNpb25FAABIdAAAvFQAACRNAAAuLi4ALCAAAAAAAABoVQAAQwAAAEQAAABFAAAARgAAAG8AAABIAAAASQAAAEoAAABwAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTBCaW5hcnlFeHByRQAASHQAADhVAAAkTQAAKSAAICgAAAAAAAAA2FUAAEMAAABEAAAARQAAAEYAAABxAAAASAAAAEkAAABKAAAAcgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwUHJlZml4RXhwckUAAEh0AACoVQAAJE0AAAAAAAA8VgAAQwAAAEQAAABFAAAARgAAAHMAAABIAAAASQAAAEoAAAB0AAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlOENhc3RFeHByRQBIdAAAEFYAACRNAAA+KAAAAAAAAKRWAABDAAAARAAAAEUAAABGAAAAdQAAAEgAAABJAAAASgAAAHYAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU4Q2FsbEV4cHJFAEh0AAB4VgAAJE0AAGN2AAAAAAAAFFcAAEMAAABEAAAARQAAAEYAAAB3AAAASAAAAEkAAABKAAAAeAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE0Q29udmVyc2lvbkV4cHJFAABIdAAA4FYAACRNAAApKAAAAAAAAIBXAABDAAAARAAAAEUAAABGAAAAeQAAAEgAAABJAAAASgAAAHoAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMERlbGV0ZUV4cHJFAABIdAAAUFcAACRNAABkZWxldGUAW10gAHNyTgBzcgBfR0xPQkFMX19OAChhbm9ueW1vdXMgbmFtZXNwYWNlKQAAAAAAACBYAABDAAAARAAAAEUAAABGAAAAewAAAEgAAAB8AAAASgAAAH0AAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM1F1YWxpZmllZE5hbWVFAAAASHQAAOxXAAAkTQAAZG4Ab24AAAAAAAAAjFgAAEMAAABEAAAARQAAAEYAAAB+AAAASAAAAEkAAABKAAAAfwAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThEdG9yTmFtZUUASHQAAGBYAAAkTQAAb3BlcmF0b3ImJgBvcGVyYXRvciYAb3BlcmF0b3ImPQBvcGVyYXRvcj0Ab3BlcmF0b3IoKQBvcGVyYXRvciwAb3BlcmF0b3J+AG9wZXJhdG9yIGRlbGV0ZVtdAG9wZXJhdG9yKgBvcGVyYXRvciBkZWxldGUAb3BlcmF0b3IvAG9wZXJhdG9yLz0Ab3BlcmF0b3JeAG9wZXJhdG9yXj0Ab3BlcmF0b3I9PQBvcGVyYXRvcj49AG9wZXJhdG9yPgBvcGVyYXRvcltdAG9wZXJhdG9yPD0Ab3BlcmF0b3I8PABvcGVyYXRvcjw8PQBvcGVyYXRvcjwAb3BlcmF0b3ItAG9wZXJhdG9yLT0Ab3BlcmF0b3IqPQBvcGVyYXRvci0tAG9wZXJhdG9yIG5ld1tdAG9wZXJhdG9yIT0Ab3BlcmF0b3IhAG9wZXJhdG9yIG5ldwBvcGVyYXRvcnx8AG9wZXJhdG9yfABvcGVyYXRvcnw9AG9wZXJhdG9yLT4qAG9wZXJhdG9yKwBvcGVyYXRvcis9AG9wZXJhdG9yKysAb3BlcmF0b3ItPgBvcGVyYXRvcj8Ab3BlcmF0b3IlAG9wZXJhdG9yJT0Ab3BlcmF0b3I+PgBvcGVyYXRvcj4+PQBvcGVyYXRvcjw9PgAAAAAAAOxaAABDAAAARAAAAEUAAABGAAAAgAAAAEgAAABJAAAASgAAAIEAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMkNvbnZlcnNpb25PcGVyYXRvclR5cGVFAABIdAAAsFoAACRNAABvcGVyYXRvciAAAAAAAAAAZFsAAEMAAABEAAAARQAAAEYAAACCAAAASAAAAEkAAABKAAAAgwAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1TGl0ZXJhbE9wZXJhdG9yRQBIdAAAMFsAACRNAABvcGVyYXRvciIiIAAAAAAA4FsAAEMAAABEAAAARQAAAEYAAACEAAAASAAAAIUAAABKAAAAhgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5R2xvYmFsUXVhbGlmaWVkTmFtZUUASHQAAKhbAAAkTQAAAAAAAEhcAABDAAAARAAAAEUAAABGAAAAhwAAAEgAAABJAAAASgAAAIgAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxME1lbWJlckV4cHJFAABIdAAAGFwAACRNAAAAAAAAuFwAAEMAAABEAAAARQAAAEYAAACJAAAASAAAAEkAAABKAAAAigAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE4QXJyYXlTdWJzY3JpcHRFeHByRQAASHQAAIBcAAAkTQAAKVsAXQ==");
writeSegment(23760, "KF0AAEMAAABEAAAARQAAAEYAAACLAAAASAAAAEkAAABKAAAAjAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwQnJhY2VkRXhwckUAAEh0AAD4XAAAJE0AACA9IAAAAAAAmF0AAEMAAABEAAAARQAAAEYAAACNAAAASAAAAEkAAABKAAAAjgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1QnJhY2VkUmFuZ2VFeHByRQBIdAAAZF0AACRNAAAgLi4uIAAAAAAAAAAMXgAAQwAAAEQAAABFAAAARgAAAI8AAABIAAAASQAAAEoAAACQAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTJJbml0TGlzdEV4cHJFAAAAAEh0AADYXQAAJE0AAAAAAAB0XgAAQwAAAEQAAABFAAAARgAAAJEAAABIAAAASQAAAEoAAACSAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTFQb3N0Zml4RXhwckUASHQAAEReAAAkTQAAbncAbmEAcGk=");
writeSegment(24208, "5F4AAEMAAABEAAAARQAAAEYAAACTAAAASAAAAEkAAABKAAAAlAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTdOZXdFeHByRQAASHQAALheAAAkTQAAOjpvcGVyYXRvciAAbmV3AFtdAAAAAAAAZF8AAEMAAABEAAAARQAAAEYAAACVAAAASAAAAEkAAABKAAAAlgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEzRW5jbG9zaW5nRXhwckUAAABIdAAAMF8AACRNAAAAAAAA0F8AAEMAAABEAAAARQAAAEYAAACXAAAASAAAAEkAAABKAAAAmAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE1Q29uZGl0aW9uYWxFeHByRQBIdAAAnF8AACRNAAApID8gKAApIDogKAAAAAAATGAAAEMAAABEAAAARQAAAEYAAACZAAAASAAAAEkAAABKAAAAmgAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5U2l6ZW9mUGFyYW1QYWNrRXhwckUASHQAABRgAAAkTQAAc2l6ZW9mLi4uKAAAAAAAAMRgAABDAAAARAAAAEUAAABGAAAAmwAAAEgAAABJAAAASgAAAJwAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM05vZGVBcnJheU5vZGVFAAAASHQAAJBgAAAkTQAAAAAAACxhAABDAAAARAAAAEUAAABGAAAAnQAAAEgAAABJAAAASgAAAJ4AAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5VGhyb3dFeHByRQAAAABIdAAA/GAAACRNAAB0aHJvdyAAAAAAAACsYQAAQwAAAEQAAABFAAAARgAAAJ8AAABIAAAAoAAAAEoAAAChAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjdFeHBhbmRlZFNwZWNpYWxTdWJzdGl0dXRpb25FAEh0AABsYQAAJE0AAHN0ZDo6YWxsb2NhdG9yAHN0ZDo6YmFzaWNfc3RyaW5nAHN0ZDo6YmFzaWNfc3RyaW5nPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4sIHN0ZDo6YWxsb2NhdG9yPGNoYXI+ID4Ac3RkOjpiYXNpY19pc3RyZWFtPGNoYXIsIHN0ZDo6Y2hhcl90cmFpdHM8Y2hhcj4gPgBzdGQ6OmJhc2ljX29zdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AHN0ZDo6YmFzaWNfaW9zdHJlYW08Y2hhciwgc3RkOjpjaGFyX3RyYWl0czxjaGFyPiA+AGFsbG9jYXRvcgBiYXNpY19zdHJpbmcAYmFzaWNfaXN0cmVhbQBiYXNpY19vc3RyZWFtAGJhc2ljX2lvc3RyZWFt");
writeSegment(25344, "XGMAAEMAAABEAAAARQAAAEYAAACiAAAASAAAAEkAAABKAAAAowAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEyQ3RvckR0b3JOYW1lRQAAAABIdAAAKGMAACRNAAAAAAAAxGMAAEMAAABEAAAARQAAAEYAAACkAAAASAAAAEkAAABKAAAApQAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwQWJpVGFnQXR0ckUAAEh0AACUYwAAJE0AAFthYmk6AERDAFV0AFVsAHZFAAAAAAAAAERkAABDAAAARAAAAEUAAABGAAAApgAAAEgAAABJAAAASgAAAKcAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNVVubmFtZWRUeXBlTmFtZUUASHQAABBkAAAkTQAAJ3VubmFtZWQAJwAAAAAAALxkAABDAAAARAAAAEUAAABGAAAAqAAAAEgAAABJAAAASgAAAKkAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxNUNsb3N1cmVUeXBlTmFtZUUASHQAAIhkAAAkTQAAJ2xhbWJkYQAnKAAAAAAAADxlAABDAAAARAAAAEUAAABGAAAAqgAAAEgAAABJAAAASgAAAKsAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUyMVN0cnVjdHVyZWRCaW5kaW5nTmFtZUUAAABIdAAAAGUAACRNAABzdHJpbmcgbGl0ZXJhbAAAAAAAALRlAABDAAAARAAAAEUAAABGAAAArAAAAEgAAABJAAAASgAAAK0AAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5TG9jYWxOYW1lRQAAAABIdAAAhGUAACRNAAAAAAAAJGYAAEMAAABEAAAARQAAAEYAAACuAAAASAAAAK8AAABKAAAAsAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5U3BlY2lhbFN1YnN0aXR1dGlvbkUASHQAAOxlAAAkTQAAc3RkOjpzdHJpbmcAc3RkOjppc3RyZWFtAHN0ZDo6b3N0cmVhbQBzdGQ6Omlvc3RyZWFtAHN0cmluZwBpc3RyZWFtAG9zdHJlYW0AaW9zdHJlYW0AAAAAAORmAACxAAAAsgAAALMAAAC0AAAAtQAAALYAAABJAAAASgAAALcAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxM1BhcmFtZXRlclBhY2tFAAAASHQAALBmAAAkTQAAAAAAAFBnAABDAAAARAAAAEUAAABGAAAAuAAAAEgAAABJAAAASgAAALkAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMlRlbXBsYXRlQXJnc0UAAAAASHQAABxnAAAkTQAAIAAAAAAAAADIZwAAQwAAAEQAAABFAAAARgAAALoAAABIAAAAuwAAAEoAAAC8AAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBOYW1lV2l0aFRlbXBsYXRlQXJnc0UAAAAASHQAAIxnAAAkTQAAU3RMAAAAAAA8aAAAQwAAAEQAAABFAAAARgAAAL0AAABIAAAAvgAAAEoAAAC/AAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTZTdGRRdWFsaWZpZWROYW1lRQAAAABIdAAABGgAACRNAABzdGQ6OgAAAAAAAAC4aAAAQwAAAEQAAABFAAAARgAAAMAAAABIAAAASQAAAEoAAADBAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBUZW1wbGF0ZUFyZ3VtZW50UGFja0UAAAAASHQAAHxoAAAkTQAAAAAAACRpAABDAAAARAAAAEUAAABGAAAAwgAAAEgAAABJAAAASgAAAMMAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGUxMkVuYWJsZUlmQXR0ckUAAAAASHQAAPBoAAAkTQAAIFtlbmFibGVfaWY6");
writeSegment(26948, "pGkAAMQAAABEAAAAxQAAAEYAAADGAAAAxwAAAEkAAABKAAAAyAAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE2RnVuY3Rpb25FbmNvZGluZ0UAAAAASHQAAGxpAAAkTQAAIGNvbnN0ACB2b2xhdGlsZQAgcmVzdHJpY3QAICYAICYmAAAAAAAAADBqAABDAAAARAAAAEUAAABGAAAAyQAAAEgAAABJAAAASgAAAMoAAABOMTJfR0xPQkFMX19OXzExNml0YW5pdW1fZGVtYW5nbGU5RG90U3VmZml4RQAAAABIdAAAAGoAACRNAAB2b2lkAGJvb2wAaW50AHVuc2lnbmVkIGludABsb25nAHVuc2lnbmVkIGxvbmcAbG9uZyBsb25nAHVuc2lnbmVkIGxvbmcgbG9uZwBmbG9hdABkb3VibGUAbG9uZyBkb3VibGUAX19mbG9hdDEyOABkZWNpbWFsNjQAZGVjaW1hbDEyOABkZWNpbWFsMzIAZGVjaW1hbDE2AGNoYXIzMl90AGNoYXIxNl90AGRlY2x0eXBlKGF1dG8pAHN0ZDo6bnVsbHB0cl90ACBjb21wbGV4ACBpbWFnaW5hcnkARG8Abm9leGNlcHQARE8ARHcARHgAUkUAT0UAAAAAAACUawAAQwAAAEQAAABFAAAARgAAAMsAAABIAAAASQAAAEoAAADMAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTJOb2V4Y2VwdFNwZWNFAAAAAEh0AABgawAAJE0AAG5vZXhjZXB0KAAAAAAAAAAUbAAAQwAAAEQAAABFAAAARgAAAM0AAABIAAAASQAAAEoAAADOAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBEeW5hbWljRXhjZXB0aW9uU3BlY0UAAAAASHQAANhrAAAkTQAAdGhyb3coAAAAAAAAiGwAAM8AAABEAAAA0AAAAEYAAADRAAAA0gAAAEkAAABKAAAA0wAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEyRnVuY3Rpb25UeXBlRQAAAABIdAAAVGwAACRNAABvYmpjcHJvdG8=");
writeSegment(27813, "bQAAQwAAAEQAAABFAAAARgAAANQAAABIAAAASQAAAEoAAADVAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTNPYmpDUHJvdG9OYW1lRQAAAEh0AADMbAAAJE0AAAAAAABwbQAAQwAAAEQAAABFAAAARgAAANYAAABIAAAASQAAAEoAAADXAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTdWZW5kb3JFeHRRdWFsVHlwZUUAAABIdAAAOG0AACRNAAAAAAAA1G0AANgAAADZAAAA2gAAAEYAAADbAAAA3AAAAEkAAABKAAAA3QAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZThRdWFsVHlwZUUASHQAAKhtAAAkTQAARHYAAAAAAABEbgAAQwAAAEQAAABFAAAARgAAAN4AAABIAAAASQAAAEoAAADfAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTVQaXhlbFZlY3RvclR5cGVFAEh0AAAQbgAAJE0AAHBpeGVsIHZlY3RvclsAAAAAAAAAvG4AAEMAAABEAAAARQAAAEYAAADgAAAASAAAAEkAAABKAAAA4QAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTEwVmVjdG9yVHlwZUUAAEh0AACMbgAAJE0AACB2ZWN0b3Jb");
writeSegment(28376, "MG8AAOIAAADjAAAARQAAAEYAAADkAAAA5QAAAEkAAABKAAAA5gAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTlBcnJheVR5cGVFAAAAAEh0AAAAbwAAJE0AAFsAAAAAAAAApG8AAOcAAABEAAAARQAAAEYAAADoAAAA6QAAAEkAAABKAAAA6gAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTE5UG9pbnRlclRvTWVtYmVyVHlwZUUASHQAAGxvAAAkTQAAOjoqAFRzAHN0cnVjdABUdQB1bmlvbgBUZQBlbnVtAAAAAAAAOHAAAEMAAABEAAAARQAAAEYAAADrAAAASAAAAEkAAABKAAAA7AAAAE4xMl9HTE9CQUxfX05fMTE2aXRhbml1bV9kZW1hbmdsZTIyRWxhYm9yYXRlZFR5cGVTcGVmVHlwZUUAAEh0AAD8bwAAJE0AAAAAAACgcAAA7QAAAEQAAABFAAAARgAAAO4AAADvAAAASQAAAEoAAADwAAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTFQb2ludGVyVHlwZUUASHQAAHBwAAAkTQAAaWQ8AG9iamNfb2JqZWN0AAAAAAAccQAA8QAAAEQAAABFAAAARgAAAPIAAADzAAAASQAAAEoAAAD0AAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMTNSZWZlcmVuY2VUeXBlRQAAAEh0AADocAAAJE0AAAAAAACQcQAAQwAAAEQAAABFAAAARgAAAPUAAABIAAAASQAAAEoAAAD2AAAATjEyX0dMT0JBTF9fTl8xMTZpdGFuaXVtX2RlbWFuZ2xlMjBQb3N0Zml4UXVhbGlmaWVkVHlwZUUAAAAASHQAAFRxAAAkTQAAt2IAAMFiAADBYgAAzmIAANxiAADqYgAAt2IAAMFiAABkZgAAa2YAAHNmAAB7ZgAAdGVybWluYXRlX2hhbmRsZXIgdW5leHBlY3RlZGx5IHJldHVybmVkAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAHN0ZDo6ZXhjZXB0aW9u");
writeSegment(29224, "SHIAAPcAAAD4AAAA+QAAAFN0OWV4Y2VwdGlvbgAAAAAgdAAAOHIAAAAAAAB0cgAANwAAAPoAAAD7AAAAU3QxMWxvZ2ljX2Vycm9yAEh0AABkcgAASHIAAAAAAACocgAANwAAAPwAAAD7AAAAU3QxMmxlbmd0aF9lcnJvcgAAAABIdAAAlHIAAHRyAABTdDl0eXBlX2luZm8AAAAAIHQAALRyAABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAABIdAAAzHIAAMRyAABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAABIdAAA/HIAAPByAAAAAAAAcHMAAP0AAAD+AAAA/wAAAAABAAABAQAATjEwX19jeHhhYml2MTIzX19mdW5kYW1lbnRhbF90eXBlX2luZm9FAEh0AABIcwAA8HIAAHYAAAA0cwAAfHMAAGIAAAA0cwAAiHMAAGMAAAA0cwAAlHMAAGgAAAA0cwAAoHMAAGEAAAA0cwAArHMAAHMAAAA0cwAAuHMAAHQAAAA0cwAAxHMAAGkAAAA0cwAA0HMAAGoAAAA0cwAA3HMAAGwAAAA0cwAA6HMAAG0AAAA0cwAA9HMAAGYAAAA0cwAAAHQAAGQAAAA0cwAADHQAAAAAAAAgcwAA/QAAAAIBAAD/AAAAAAEAAAMBAAAEAQAABQEAAAYBAAAAAAAAkHQAAP0AAAAHAQAA/wAAAAABAAADAQAACAEAAAkBAAAKAQAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAEh0AABodAAAIHMAAAAAAADsdAAA/QAAAAsBAAD/AAAAAAEAAAMBAAAMAQAADQEAAA4BAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAASHQAAMR0AAAgcwAAdm9pZABib29sAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydABpbnQAdW5zaWduZWQgaW50AGxvbmcAdW5zaWduZWQgbG9uZwBmbG9hdABkb3VibGUAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4Ac3RkOjp3c3RyaW5nAGVtc2NyaXB0ZW46OnZhbABlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0loTlNfMTFjaGFyX3RyYWl0c0loRUVOU185YWxsb2NhdG9ySWhFRUVFAACkdAAA8HcAAAAAAAABAAAA2DAAAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJd05TXzExY2hhcl90cmFpdHNJd0VFTlNfOWFsbG9jYXRvckl3RUVFRQAApHQAAEh4AAAAAAAAAQAAANgwAAAAAAAATjEwZW1zY3JpcHRlbjN2YWxFAAAgdAAAoHgAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWNFRQAAIHQAALx4AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lhRUUAACB0AADkeAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaEVFAAAgdAAADHkAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXNFRQAAIHQAADR5AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0l0RUUAACB0AABceQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaUVFAAAgdAAAhHkAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWpFRQAAIHQAAKx5AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lsRUUAACB0AADUeQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJbUVFAAAgdAAA/HkAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWZFRQAAIHQAACR6AABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lkRUUAACB0AABMeg==");
writeSegment(31352, "AQAAAP/////9/////v///w==");
writeSegment(31556, "xII=");
writeSegment(31616, "BQ==");
writeSegment(31628, "Pg==");
writeSegment(31652, "OgAAAD8AAACIfgAAAAQ=");
writeSegment(31676, "AQ==");
writeSegment(31691, "Cv////8=");
writeSegment(31760, "gHsAAAAAAAAF");
writeSegment(31780, "PA==");
writeSegment(31804, "OgAAADkAAACQgg==");
writeSegment(31828, "Ag==");
writeSegment(31843, "//////8=");
writeSegment(31912, "QgAAAGBL");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}// EMSCRIPTEN_END_ASM




)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: function(binary, info) {
    return {
      then: function(ok, err) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary, info))
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];




if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 272,
  'maximum': 272 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5277088,
    STACKTOP = STACK_BASE,
    STACK_MAX = 34208,
    DYNAMIC_BASE = 5277088,
    DYNAMICTOP_PTR = 34048;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'artoolkit.debug.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_unstable': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3) {if (!artoolkit["multiEachMarkerInfo"]) { artoolkit["multiEachMarkerInfo"] = ({}); } var multiEachMarker = artoolkit["multiEachMarkerInfo"]; multiEachMarker['visible'] = $0; multiEachMarker['pattId'] = $1; multiEachMarker['pattType'] = $2; multiEachMarker['width'] = $3;},
 function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {var $a = arguments; var i = 12; if (!artoolkit["markerInfo"]) { artoolkit["markerInfo"] = ({ pos: [0,0], line: [[0,0,0], [0,0,0], [0,0,0], [0,0,0]], vertex: [[0,0], [0,0], [0,0], [0,0]] }); } var markerInfo = artoolkit["markerInfo"]; markerInfo["area"] = $0; markerInfo["id"] = $1; markerInfo["idPatt"] = $2; markerInfo["idMatrix"] = $3; markerInfo["dir"] = $4; markerInfo["dirPatt"] = $5; markerInfo["dirMatrix"] = $6; markerInfo["cf"] = $7; markerInfo["cfPatt"] = $8; markerInfo["cfMatrix"] = $9; markerInfo["pos"][0] = $10; markerInfo["pos"][1] = $11; markerInfo["line"][0][0] = $a[i++]; markerInfo["line"][0][1] = $a[i++]; markerInfo["line"][0][2] = $a[i++]; markerInfo["line"][1][0] = $a[i++]; markerInfo["line"][1][1] = $a[i++]; markerInfo["line"][1][2] = $a[i++]; markerInfo["line"][2][0] = $a[i++]; markerInfo["line"][2][1] = $a[i++]; markerInfo["line"][2][2] = $a[i++]; markerInfo["line"][3][0] = $a[i++]; markerInfo["line"][3][1] = $a[i++]; markerInfo["line"][3][2] = $a[i++]; markerInfo["vertex"][0][0] = $a[i++]; markerInfo["vertex"][0][1] = $a[i++]; markerInfo["vertex"][1][0] = $a[i++]; markerInfo["vertex"][1][1] = $a[i++]; markerInfo["vertex"][2][0] = $a[i++]; markerInfo["vertex"][2][1] = $a[i++]; markerInfo["vertex"][3][0] = $a[i++]; markerInfo["vertex"][3][1] = $a[i++]; markerInfo["errorCorrected"] = $a[i++];},
 function($0, $1, $2, $3, $4, $5) {if (!artoolkit["frameMalloc"]) { artoolkit["frameMalloc"] = ({}); } var frameMalloc = artoolkit["frameMalloc"]; frameMalloc["framepointer"] = $1; frameMalloc["framesize"] = $2; frameMalloc["camera"] = $3; frameMalloc["transform"] = $4; frameMalloc["videoLumaPointer"] = $5;}];

// Avoid creating a new array
var _readAsmConstArgsArray = [];

function readAsmConstArgs(sigPtr, buf) {
  var args = _readAsmConstArgsArray;
  args.length = 0;
  while (1) {
    var ch = HEAPU8[sigPtr++];
    if (!ch) return args;
    if (ch === 'd'.charCodeAt(0) || ch === 'f'.charCodeAt(0)) {
      buf = alignMemory(buf, 8);
      args.push(HEAPF64[(buf >> 3)]);
      buf += 8;
    } else if (ch === 'i'.charCodeAt(0)) {
      buf = alignMemory(buf, 4);
      args.push(HEAP32[(buf >> 2)]);
      buf += 4;
    } else abort("unexpected char in asm const signature " + ch);
  }
}


function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}



// STATICTOP = STATIC_BASE + 33184;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });



/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
      assert(__cxa_demangle_func);
      try {
        var s = func;
        if (s.startsWith('__Z'))
          s = s.substr(1);
        var len = lengthBytesUTF8(s)+1;
        var buf = _malloc(len);
        stringToUTF8(s, buf, len);
        var status = _malloc(4);
        var ret = __cxa_demangle_func(buf, 0, 0, status);
        if (HEAP32[((status)>>2)] === 0 && ret) {
          return UTF8ToString(ret);
        }
        // otherwise, libcxxabi failed
      } catch(e) {
        // ignore problems here
      } finally {
        if (buf) _free(buf);
        if (status) _free(status);
        if (ret) _free(ret);
      }
      // failure when using libcxxabi, don't demangle
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(
  ) {
  return _atexit.apply(null, arguments)
  }

  
  var ___exception_infos={};
  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // If memory can grow, we don't want to hold on to references of
          // the memory Buffer, as they may get invalidated. That means
          // we need to do a copy here.
          // FIXME: this is inefficient as the file packager may have
          //        copied the data into memory already - we may want to
          //        integrate more there and let the file packager loading
          //        code be able to query if memory growth is on or off.
          if (canOwn) {
            warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
          }
          canOwn = false;
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              var HEAP = getHeap();
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 34048;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
      var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.
  
      if (requestedSize > LIMIT) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + LIMIT + ' bytes!');
        return false;
      }
  
      var MIN_TOTAL_MEMORY = 16777216;
      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.
  
      // TODO: see realloc_buffer - for PTHREADS we may want to decrease these jumps
      while (newSize < requestedSize) { // Keep incrementing the heap size as long as it's less than what is requested.
        if (newSize <= 536870912) {
          newSize = alignUp(2 * newSize, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
        } else {
          // ..., but after that, add smaller increments towards 2GB, which we cannot reach
          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
  
        if (newSize === oldSize) {
          warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + HEAP8.length);
        }
      }
  
  
  
      var replacement = emscripten_realloc_buffer(newSize);
      if (!replacement) {
        err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
        return false;
      }
  
      err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
  
      return true;
    }

  
  
  var ENV={};function _emscripten_get_environ() {
      if (!_emscripten_get_environ.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': thisProgram
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        _emscripten_get_environ.strings = strings;
      }
      return _emscripten_get_environ.strings;
    }function _environ_get(__environ, environ_buf) {
      var strings = _emscripten_get_environ();
      var bufSize = 0;
      strings.forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = _emscripten_get_environ();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      var aligned_dest_end = 0;
      var block_aligned_dest_end = 0;
      var dest_end = 0;
      // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
      if ((num|0) >= 8192) {
        _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
        return dest|0;
      }
  
      ret = dest|0;
      dest_end = (dest + num)|0;
      if ((dest&3) == (src&3)) {
        // The initial unaligned < 4-byte front.
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        aligned_dest_end = (dest_end & -4)|0;
        block_aligned_dest_end = (aligned_dest_end - 64)|0;
        while ((dest|0) <= (block_aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
          HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
          HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
          HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
          HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
          HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
          HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
          HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
          HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
          HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
          HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
          HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
          HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
          HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
          HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
          dest = (dest+64)|0;
          src = (src+64)|0;
        }
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      } else {
        // In the unaligned copy case, unroll a bit as well.
        aligned_dest_end = (dest_end - 4)|0;
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
          HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
          HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      }
      // The remaining unaligned < 4 byte tail.
      while ((dest|0) < (dest_end|0)) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
      }
      return ret|0;
    }

  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }
FS.staticInit();;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array

var asmGlobalArg = {};
var asmLibraryArg = { "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__lock": ___lock, "__syscall221": ___syscall221, "__syscall5": ___syscall5, "__syscall54": ___syscall54, "__unlock": ___unlock, "_embind_register_bool": __embind_register_bool, "_embind_register_constant": __embind_register_constant, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_function": __embind_register_function, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "abort": _abort, "emscripten_asm_const_iii": _emscripten_asm_const_iii, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "exit": _exit, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
var real____wasm_call_ctors = asm["__wasm_call_ctors"];
asm["__wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____wasm_call_ctors.apply(null, arguments);
};

var real__malloc = asm["malloc"];
asm["malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__free = asm["free"];
asm["free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real____errno_location = asm["__errno_location"];
asm["__errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__fflush = asm["fflush"];
asm["fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real___get_tzname = asm["_get_tzname"];
asm["_get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real___get_daylight = asm["_get_daylight"];
asm["_get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_timezone = asm["_get_timezone"];
asm["_get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real__setThrew = asm["setThrew"];
asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["_ZSt18uncaught_exceptionv"];
asm["_ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_demangle = asm["__cxa_demangle"];
asm["__cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_demangle.apply(null, arguments);
};

var real____getTypeName = asm["__getTypeName"];
asm["__getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____embind_register_native_and_builtin_types = asm["__embind_register_native_and_builtin_types"];
asm["__embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____embind_register_native_and_builtin_types.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real___growWasmMemory = asm["__growWasmMemory"];
asm["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___growWasmMemory.apply(null, arguments);
};

var real_dynCall_iii = asm["dynCall_iii"];
asm["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iii.apply(null, arguments);
};

var real_dynCall_vi = asm["dynCall_vi"];
asm["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vi.apply(null, arguments);
};

var real_dynCall_iiii = asm["dynCall_iiii"];
asm["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiii.apply(null, arguments);
};

var real_dynCall_ii = asm["dynCall_ii"];
asm["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_ii.apply(null, arguments);
};

var real_dynCall_i = asm["dynCall_i"];
asm["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_i.apply(null, arguments);
};

var real_dynCall_vid = asm["dynCall_vid"];
asm["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vid.apply(null, arguments);
};

var real_dynCall_di = asm["dynCall_di"];
asm["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_di.apply(null, arguments);
};

var real_dynCall_vii = asm["dynCall_vii"];
asm["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vii.apply(null, arguments);
};

var real_dynCall_vif = asm["dynCall_vif"];
asm["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vif.apply(null, arguments);
};

var real_dynCall_iiiii = asm["dynCall_iiiii"];
asm["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiii.apply(null, arguments);
};

var real_dynCall_viid = asm["dynCall_viid"];
asm["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viid.apply(null, arguments);
};

var real_dynCall_dii = asm["dynCall_dii"];
asm["dynCall_dii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_dii.apply(null, arguments);
};

var real_dynCall_viii = asm["dynCall_viii"];
asm["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viii.apply(null, arguments);
};

var real_dynCall_viif = asm["dynCall_viif"];
asm["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viif.apply(null, arguments);
};

var real_dynCall_jiji = asm["dynCall_jiji"];
asm["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_jiji.apply(null, arguments);
};

var real_dynCall_iidiiii = asm["dynCall_iidiiii"];
asm["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iidiiii.apply(null, arguments);
};

var real_dynCall_v = asm["dynCall_v"];
asm["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_v.apply(null, arguments);
};

var real_dynCall_viiiiii = asm["dynCall_viiiiii"];
asm["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiiii.apply(null, arguments);
};

var real_dynCall_viiiii = asm["dynCall_viiiii"];
asm["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiii.apply(null, arguments);
};

var real_dynCall_viiii = asm["dynCall_viiii"];
asm["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiii.apply(null, arguments);
};

Module["asm"] = asm;
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

var __get_tzname = Module["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_tzname"].apply(null, arguments)
};

var __get_daylight = Module["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_daylight"].apply(null, arguments)
};

var __get_timezone = Module["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_get_timezone"].apply(null, arguments)
};

var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var ___cxa_demangle = Module["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_demangle"].apply(null, arguments)
};

var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getTypeName"].apply(null, arguments)
};

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__embind_register_native_and_builtin_types"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_vid = Module["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vid"].apply(null, arguments)
};

var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_viid = Module["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viid"].apply(null, arguments)
};

var dynCall_dii = Module["dynCall_dii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dii"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



